
Lesson_5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e74  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08004f30  08004f30  00005f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005010  08005010  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005010  08005010  00006010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005018  08005018  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005018  08005018  00006018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800501c  0800501c  0000601c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005020  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  2000005c  0800507c  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  0800507c  00007278  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bfae  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020b0  00000000  00000000  00013032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000918  00000000  00000000  000150e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006f4  00000000  00000000  00015a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000180b3  00000000  00000000  000160f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d314  00000000  00000000  0002e1a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096a36  00000000  00000000  0003b4bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d1ef1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002398  00000000  00000000  000d1f34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000d42cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000005c 	.word	0x2000005c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004f18 	.word	0x08004f18

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000060 	.word	0x20000060
 8000100:	08004f18 	.word	0x08004f18

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	@ 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	@ 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			@ (mov r8, r8)

08000404 <__aeabi_uldivmod>:
 8000404:	2b00      	cmp	r3, #0
 8000406:	d111      	bne.n	800042c <__aeabi_uldivmod+0x28>
 8000408:	2a00      	cmp	r2, #0
 800040a:	d10f      	bne.n	800042c <__aeabi_uldivmod+0x28>
 800040c:	2900      	cmp	r1, #0
 800040e:	d100      	bne.n	8000412 <__aeabi_uldivmod+0xe>
 8000410:	2800      	cmp	r0, #0
 8000412:	d002      	beq.n	800041a <__aeabi_uldivmod+0x16>
 8000414:	2100      	movs	r1, #0
 8000416:	43c9      	mvns	r1, r1
 8000418:	0008      	movs	r0, r1
 800041a:	b407      	push	{r0, r1, r2}
 800041c:	4802      	ldr	r0, [pc, #8]	@ (8000428 <__aeabi_uldivmod+0x24>)
 800041e:	a102      	add	r1, pc, #8	@ (adr r1, 8000428 <__aeabi_uldivmod+0x24>)
 8000420:	1840      	adds	r0, r0, r1
 8000422:	9002      	str	r0, [sp, #8]
 8000424:	bd03      	pop	{r0, r1, pc}
 8000426:	46c0      	nop			@ (mov r8, r8)
 8000428:	ffffffd9 	.word	0xffffffd9
 800042c:	b403      	push	{r0, r1}
 800042e:	4668      	mov	r0, sp
 8000430:	b501      	push	{r0, lr}
 8000432:	9802      	ldr	r0, [sp, #8]
 8000434:	f000 f806 	bl	8000444 <__udivmoddi4>
 8000438:	9b01      	ldr	r3, [sp, #4]
 800043a:	469e      	mov	lr, r3
 800043c:	b002      	add	sp, #8
 800043e:	bc0c      	pop	{r2, r3}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			@ (mov r8, r8)

08000444 <__udivmoddi4>:
 8000444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000446:	4657      	mov	r7, sl
 8000448:	464e      	mov	r6, r9
 800044a:	4645      	mov	r5, r8
 800044c:	46de      	mov	lr, fp
 800044e:	b5e0      	push	{r5, r6, r7, lr}
 8000450:	0004      	movs	r4, r0
 8000452:	000d      	movs	r5, r1
 8000454:	4692      	mov	sl, r2
 8000456:	4699      	mov	r9, r3
 8000458:	b083      	sub	sp, #12
 800045a:	428b      	cmp	r3, r1
 800045c:	d830      	bhi.n	80004c0 <__udivmoddi4+0x7c>
 800045e:	d02d      	beq.n	80004bc <__udivmoddi4+0x78>
 8000460:	4649      	mov	r1, r9
 8000462:	4650      	mov	r0, sl
 8000464:	f000 f8ba 	bl	80005dc <__clzdi2>
 8000468:	0029      	movs	r1, r5
 800046a:	0006      	movs	r6, r0
 800046c:	0020      	movs	r0, r4
 800046e:	f000 f8b5 	bl	80005dc <__clzdi2>
 8000472:	1a33      	subs	r3, r6, r0
 8000474:	4698      	mov	r8, r3
 8000476:	3b20      	subs	r3, #32
 8000478:	d434      	bmi.n	80004e4 <__udivmoddi4+0xa0>
 800047a:	469b      	mov	fp, r3
 800047c:	4653      	mov	r3, sl
 800047e:	465a      	mov	r2, fp
 8000480:	4093      	lsls	r3, r2
 8000482:	4642      	mov	r2, r8
 8000484:	001f      	movs	r7, r3
 8000486:	4653      	mov	r3, sl
 8000488:	4093      	lsls	r3, r2
 800048a:	001e      	movs	r6, r3
 800048c:	42af      	cmp	r7, r5
 800048e:	d83b      	bhi.n	8000508 <__udivmoddi4+0xc4>
 8000490:	42af      	cmp	r7, r5
 8000492:	d100      	bne.n	8000496 <__udivmoddi4+0x52>
 8000494:	e079      	b.n	800058a <__udivmoddi4+0x146>
 8000496:	465b      	mov	r3, fp
 8000498:	1ba4      	subs	r4, r4, r6
 800049a:	41bd      	sbcs	r5, r7
 800049c:	2b00      	cmp	r3, #0
 800049e:	da00      	bge.n	80004a2 <__udivmoddi4+0x5e>
 80004a0:	e076      	b.n	8000590 <__udivmoddi4+0x14c>
 80004a2:	2200      	movs	r2, #0
 80004a4:	2300      	movs	r3, #0
 80004a6:	9200      	str	r2, [sp, #0]
 80004a8:	9301      	str	r3, [sp, #4]
 80004aa:	2301      	movs	r3, #1
 80004ac:	465a      	mov	r2, fp
 80004ae:	4093      	lsls	r3, r2
 80004b0:	9301      	str	r3, [sp, #4]
 80004b2:	2301      	movs	r3, #1
 80004b4:	4642      	mov	r2, r8
 80004b6:	4093      	lsls	r3, r2
 80004b8:	9300      	str	r3, [sp, #0]
 80004ba:	e029      	b.n	8000510 <__udivmoddi4+0xcc>
 80004bc:	4282      	cmp	r2, r0
 80004be:	d9cf      	bls.n	8000460 <__udivmoddi4+0x1c>
 80004c0:	2200      	movs	r2, #0
 80004c2:	2300      	movs	r3, #0
 80004c4:	9200      	str	r2, [sp, #0]
 80004c6:	9301      	str	r3, [sp, #4]
 80004c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <__udivmoddi4+0x8e>
 80004ce:	601c      	str	r4, [r3, #0]
 80004d0:	605d      	str	r5, [r3, #4]
 80004d2:	9800      	ldr	r0, [sp, #0]
 80004d4:	9901      	ldr	r1, [sp, #4]
 80004d6:	b003      	add	sp, #12
 80004d8:	bcf0      	pop	{r4, r5, r6, r7}
 80004da:	46bb      	mov	fp, r7
 80004dc:	46b2      	mov	sl, r6
 80004de:	46a9      	mov	r9, r5
 80004e0:	46a0      	mov	r8, r4
 80004e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e4:	4642      	mov	r2, r8
 80004e6:	469b      	mov	fp, r3
 80004e8:	2320      	movs	r3, #32
 80004ea:	1a9b      	subs	r3, r3, r2
 80004ec:	4652      	mov	r2, sl
 80004ee:	40da      	lsrs	r2, r3
 80004f0:	4641      	mov	r1, r8
 80004f2:	0013      	movs	r3, r2
 80004f4:	464a      	mov	r2, r9
 80004f6:	408a      	lsls	r2, r1
 80004f8:	0017      	movs	r7, r2
 80004fa:	4642      	mov	r2, r8
 80004fc:	431f      	orrs	r7, r3
 80004fe:	4653      	mov	r3, sl
 8000500:	4093      	lsls	r3, r2
 8000502:	001e      	movs	r6, r3
 8000504:	42af      	cmp	r7, r5
 8000506:	d9c3      	bls.n	8000490 <__udivmoddi4+0x4c>
 8000508:	2200      	movs	r2, #0
 800050a:	2300      	movs	r3, #0
 800050c:	9200      	str	r2, [sp, #0]
 800050e:	9301      	str	r3, [sp, #4]
 8000510:	4643      	mov	r3, r8
 8000512:	2b00      	cmp	r3, #0
 8000514:	d0d8      	beq.n	80004c8 <__udivmoddi4+0x84>
 8000516:	07fb      	lsls	r3, r7, #31
 8000518:	0872      	lsrs	r2, r6, #1
 800051a:	431a      	orrs	r2, r3
 800051c:	4646      	mov	r6, r8
 800051e:	087b      	lsrs	r3, r7, #1
 8000520:	e00e      	b.n	8000540 <__udivmoddi4+0xfc>
 8000522:	42ab      	cmp	r3, r5
 8000524:	d101      	bne.n	800052a <__udivmoddi4+0xe6>
 8000526:	42a2      	cmp	r2, r4
 8000528:	d80c      	bhi.n	8000544 <__udivmoddi4+0x100>
 800052a:	1aa4      	subs	r4, r4, r2
 800052c:	419d      	sbcs	r5, r3
 800052e:	2001      	movs	r0, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2100      	movs	r1, #0
 8000536:	3e01      	subs	r6, #1
 8000538:	1824      	adds	r4, r4, r0
 800053a:	414d      	adcs	r5, r1
 800053c:	2e00      	cmp	r6, #0
 800053e:	d006      	beq.n	800054e <__udivmoddi4+0x10a>
 8000540:	42ab      	cmp	r3, r5
 8000542:	d9ee      	bls.n	8000522 <__udivmoddi4+0xde>
 8000544:	3e01      	subs	r6, #1
 8000546:	1924      	adds	r4, r4, r4
 8000548:	416d      	adcs	r5, r5
 800054a:	2e00      	cmp	r6, #0
 800054c:	d1f8      	bne.n	8000540 <__udivmoddi4+0xfc>
 800054e:	9800      	ldr	r0, [sp, #0]
 8000550:	9901      	ldr	r1, [sp, #4]
 8000552:	465b      	mov	r3, fp
 8000554:	1900      	adds	r0, r0, r4
 8000556:	4169      	adcs	r1, r5
 8000558:	2b00      	cmp	r3, #0
 800055a:	db24      	blt.n	80005a6 <__udivmoddi4+0x162>
 800055c:	002b      	movs	r3, r5
 800055e:	465a      	mov	r2, fp
 8000560:	4644      	mov	r4, r8
 8000562:	40d3      	lsrs	r3, r2
 8000564:	002a      	movs	r2, r5
 8000566:	40e2      	lsrs	r2, r4
 8000568:	001c      	movs	r4, r3
 800056a:	465b      	mov	r3, fp
 800056c:	0015      	movs	r5, r2
 800056e:	2b00      	cmp	r3, #0
 8000570:	db2a      	blt.n	80005c8 <__udivmoddi4+0x184>
 8000572:	0026      	movs	r6, r4
 8000574:	409e      	lsls	r6, r3
 8000576:	0033      	movs	r3, r6
 8000578:	0026      	movs	r6, r4
 800057a:	4647      	mov	r7, r8
 800057c:	40be      	lsls	r6, r7
 800057e:	0032      	movs	r2, r6
 8000580:	1a80      	subs	r0, r0, r2
 8000582:	4199      	sbcs	r1, r3
 8000584:	9000      	str	r0, [sp, #0]
 8000586:	9101      	str	r1, [sp, #4]
 8000588:	e79e      	b.n	80004c8 <__udivmoddi4+0x84>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d8bc      	bhi.n	8000508 <__udivmoddi4+0xc4>
 800058e:	e782      	b.n	8000496 <__udivmoddi4+0x52>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	2100      	movs	r1, #0
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	2200      	movs	r2, #0
 800059a:	9100      	str	r1, [sp, #0]
 800059c:	9201      	str	r2, [sp, #4]
 800059e:	2201      	movs	r2, #1
 80005a0:	40da      	lsrs	r2, r3
 80005a2:	9201      	str	r2, [sp, #4]
 80005a4:	e785      	b.n	80004b2 <__udivmoddi4+0x6e>
 80005a6:	4642      	mov	r2, r8
 80005a8:	2320      	movs	r3, #32
 80005aa:	1a9b      	subs	r3, r3, r2
 80005ac:	002a      	movs	r2, r5
 80005ae:	4646      	mov	r6, r8
 80005b0:	409a      	lsls	r2, r3
 80005b2:	0023      	movs	r3, r4
 80005b4:	40f3      	lsrs	r3, r6
 80005b6:	4644      	mov	r4, r8
 80005b8:	4313      	orrs	r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	40e2      	lsrs	r2, r4
 80005be:	001c      	movs	r4, r3
 80005c0:	465b      	mov	r3, fp
 80005c2:	0015      	movs	r5, r2
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	dad4      	bge.n	8000572 <__udivmoddi4+0x12e>
 80005c8:	4642      	mov	r2, r8
 80005ca:	002f      	movs	r7, r5
 80005cc:	2320      	movs	r3, #32
 80005ce:	0026      	movs	r6, r4
 80005d0:	4097      	lsls	r7, r2
 80005d2:	1a9b      	subs	r3, r3, r2
 80005d4:	40de      	lsrs	r6, r3
 80005d6:	003b      	movs	r3, r7
 80005d8:	4333      	orrs	r3, r6
 80005da:	e7cd      	b.n	8000578 <__udivmoddi4+0x134>

080005dc <__clzdi2>:
 80005dc:	b510      	push	{r4, lr}
 80005de:	2900      	cmp	r1, #0
 80005e0:	d103      	bne.n	80005ea <__clzdi2+0xe>
 80005e2:	f000 f807 	bl	80005f4 <__clzsi2>
 80005e6:	3020      	adds	r0, #32
 80005e8:	e002      	b.n	80005f0 <__clzdi2+0x14>
 80005ea:	0008      	movs	r0, r1
 80005ec:	f000 f802 	bl	80005f4 <__clzsi2>
 80005f0:	bd10      	pop	{r4, pc}
 80005f2:	46c0      	nop			@ (mov r8, r8)

080005f4 <__clzsi2>:
 80005f4:	211c      	movs	r1, #28
 80005f6:	2301      	movs	r3, #1
 80005f8:	041b      	lsls	r3, r3, #16
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0xe>
 80005fe:	0c00      	lsrs	r0, r0, #16
 8000600:	3910      	subs	r1, #16
 8000602:	0a1b      	lsrs	r3, r3, #8
 8000604:	4298      	cmp	r0, r3
 8000606:	d301      	bcc.n	800060c <__clzsi2+0x18>
 8000608:	0a00      	lsrs	r0, r0, #8
 800060a:	3908      	subs	r1, #8
 800060c:	091b      	lsrs	r3, r3, #4
 800060e:	4298      	cmp	r0, r3
 8000610:	d301      	bcc.n	8000616 <__clzsi2+0x22>
 8000612:	0900      	lsrs	r0, r0, #4
 8000614:	3904      	subs	r1, #4
 8000616:	a202      	add	r2, pc, #8	@ (adr r2, 8000620 <__clzsi2+0x2c>)
 8000618:	5c10      	ldrb	r0, [r2, r0]
 800061a:	1840      	adds	r0, r0, r1
 800061c:	4770      	bx	lr
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	02020304 	.word	0x02020304
 8000624:	01010101 	.word	0x01010101
	...

08000630 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000630:	b590      	push	{r4, r7, lr}
 8000632:	b089      	sub	sp, #36	@ 0x24
 8000634:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	240c      	movs	r4, #12
 8000638:	193b      	adds	r3, r7, r4
 800063a:	0018      	movs	r0, r3
 800063c:	2314      	movs	r3, #20
 800063e:	001a      	movs	r2, r3
 8000640:	2100      	movs	r1, #0
 8000642:	f003 ffeb 	bl	800461c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000646:	4b21      	ldr	r3, [pc, #132]	@ (80006cc <MX_GPIO_Init+0x9c>)
 8000648:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800064a:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <MX_GPIO_Init+0x9c>)
 800064c:	2104      	movs	r1, #4
 800064e:	430a      	orrs	r2, r1
 8000650:	635a      	str	r2, [r3, #52]	@ 0x34
 8000652:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <MX_GPIO_Init+0x9c>)
 8000654:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000656:	2204      	movs	r2, #4
 8000658:	4013      	ands	r3, r2
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800065e:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <MX_GPIO_Init+0x9c>)
 8000660:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000662:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <MX_GPIO_Init+0x9c>)
 8000664:	2120      	movs	r1, #32
 8000666:	430a      	orrs	r2, r1
 8000668:	635a      	str	r2, [r3, #52]	@ 0x34
 800066a:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <MX_GPIO_Init+0x9c>)
 800066c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800066e:	2220      	movs	r2, #32
 8000670:	4013      	ands	r3, r2
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000676:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <MX_GPIO_Init+0x9c>)
 8000678:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800067a:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <MX_GPIO_Init+0x9c>)
 800067c:	2101      	movs	r1, #1
 800067e:	430a      	orrs	r2, r1
 8000680:	635a      	str	r2, [r3, #52]	@ 0x34
 8000682:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <MX_GPIO_Init+0x9c>)
 8000684:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000686:	2201      	movs	r2, #1
 8000688:	4013      	ands	r3, r2
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800068e:	23a0      	movs	r3, #160	@ 0xa0
 8000690:	05db      	lsls	r3, r3, #23
 8000692:	2200      	movs	r2, #0
 8000694:	2120      	movs	r1, #32
 8000696:	0018      	movs	r0, r3
 8000698:	f000 fdd8 	bl	800124c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800069c:	0021      	movs	r1, r4
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	2220      	movs	r2, #32
 80006a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a4:	187b      	adds	r3, r7, r1
 80006a6:	2201      	movs	r2, #1
 80006a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	187b      	adds	r3, r7, r1
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006b0:	187b      	adds	r3, r7, r1
 80006b2:	2202      	movs	r2, #2
 80006b4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80006b6:	187a      	adds	r2, r7, r1
 80006b8:	23a0      	movs	r3, #160	@ 0xa0
 80006ba:	05db      	lsls	r3, r3, #23
 80006bc:	0011      	movs	r1, r2
 80006be:	0018      	movs	r0, r3
 80006c0:	f000 fc60 	bl	8000f84 <HAL_GPIO_Init>

}
 80006c4:	46c0      	nop			@ (mov r8, r8)
 80006c6:	46bd      	mov	sp, r7
 80006c8:	b009      	add	sp, #36	@ 0x24
 80006ca:	bd90      	pop	{r4, r7, pc}
 80006cc:	40021000 	.word	0x40021000

080006d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d4:	f000 fa26 	bl	8000b24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d8:	f000 f810 	bl	80006fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006dc:	f7ff ffa8 	bl	8000630 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006e0:	f000 f940 	bl	8000964 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &znak, 1);
 80006e4:	4903      	ldr	r1, [pc, #12]	@ (80006f4 <main+0x24>)
 80006e6:	4b04      	ldr	r3, [pc, #16]	@ (80006f8 <main+0x28>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	0018      	movs	r0, r3
 80006ec:	f001 fd92 	bl	8002214 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006f0:	46c0      	nop			@ (mov r8, r8)
 80006f2:	e7fd      	b.n	80006f0 <main+0x20>
 80006f4:	20000078 	.word	0x20000078
 80006f8:	20000098 	.word	0x20000098

080006fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fc:	b590      	push	{r4, r7, lr}
 80006fe:	b093      	sub	sp, #76	@ 0x4c
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	2410      	movs	r4, #16
 8000704:	193b      	adds	r3, r7, r4
 8000706:	0018      	movs	r0, r3
 8000708:	2338      	movs	r3, #56	@ 0x38
 800070a:	001a      	movs	r2, r3
 800070c:	2100      	movs	r1, #0
 800070e:	f003 ff85 	bl	800461c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000712:	003b      	movs	r3, r7
 8000714:	0018      	movs	r0, r3
 8000716:	2310      	movs	r3, #16
 8000718:	001a      	movs	r2, r3
 800071a:	2100      	movs	r1, #0
 800071c:	f003 ff7e 	bl	800461c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000720:	2380      	movs	r3, #128	@ 0x80
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	0018      	movs	r0, r3
 8000726:	f000 fdaf 	bl	8001288 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800072a:	193b      	adds	r3, r7, r4
 800072c:	2202      	movs	r2, #2
 800072e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000730:	193b      	adds	r3, r7, r4
 8000732:	2280      	movs	r2, #128	@ 0x80
 8000734:	0052      	lsls	r2, r2, #1
 8000736:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000738:	193b      	adds	r3, r7, r4
 800073a:	2200      	movs	r2, #0
 800073c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800073e:	193b      	adds	r3, r7, r4
 8000740:	2240      	movs	r2, #64	@ 0x40
 8000742:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000744:	193b      	adds	r3, r7, r4
 8000746:	2200      	movs	r2, #0
 8000748:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074a:	193b      	adds	r3, r7, r4
 800074c:	0018      	movs	r0, r3
 800074e:	f000 fde7 	bl	8001320 <HAL_RCC_OscConfig>
 8000752:	1e03      	subs	r3, r0, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000756:	f000 f879 	bl	800084c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075a:	003b      	movs	r3, r7
 800075c:	2207      	movs	r2, #7
 800075e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000760:	003b      	movs	r3, r7
 8000762:	2200      	movs	r2, #0
 8000764:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000766:	003b      	movs	r3, r7
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800076c:	003b      	movs	r3, r7
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000772:	003b      	movs	r3, r7
 8000774:	2100      	movs	r1, #0
 8000776:	0018      	movs	r0, r3
 8000778:	f001 f8ec 	bl	8001954 <HAL_RCC_ClockConfig>
 800077c:	1e03      	subs	r3, r0, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000780:	f000 f864 	bl	800084c <Error_Handler>
  }
}
 8000784:	46c0      	nop			@ (mov r8, r8)
 8000786:	46bd      	mov	sp, r7
 8000788:	b013      	add	sp, #76	@ 0x4c
 800078a:	bd90      	pop	{r4, r7, pc}

0800078c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2){
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a24      	ldr	r2, [pc, #144]	@ (800082c <HAL_UART_RxCpltCallback+0xa0>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d142      	bne.n	8000824 <HAL_UART_RxCpltCallback+0x98>
		if(znak == 'e'){
 800079e:	4b24      	ldr	r3, [pc, #144]	@ (8000830 <HAL_UART_RxCpltCallback+0xa4>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b65      	cmp	r3, #101	@ 0x65
 80007a4:	d111      	bne.n	80007ca <HAL_UART_RxCpltCallback+0x3e>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80007a6:	23a0      	movs	r3, #160	@ 0xa0
 80007a8:	05db      	lsls	r3, r3, #23
 80007aa:	2201      	movs	r2, #1
 80007ac:	2120      	movs	r1, #32
 80007ae:	0018      	movs	r0, r3
 80007b0:	f000 fd4c 	bl	800124c <HAL_GPIO_WritePin>
			dl_kom = sprintf(komunikat, "dioda ON");
 80007b4:	4a1f      	ldr	r2, [pc, #124]	@ (8000834 <HAL_UART_RxCpltCallback+0xa8>)
 80007b6:	4b20      	ldr	r3, [pc, #128]	@ (8000838 <HAL_UART_RxCpltCallback+0xac>)
 80007b8:	0011      	movs	r1, r2
 80007ba:	0018      	movs	r0, r3
 80007bc:	f003 ff0e 	bl	80045dc <siprintf>
 80007c0:	0003      	movs	r3, r0
 80007c2:	b29a      	uxth	r2, r3
 80007c4:	4b1d      	ldr	r3, [pc, #116]	@ (800083c <HAL_UART_RxCpltCallback+0xb0>)
 80007c6:	801a      	strh	r2, [r3, #0]
 80007c8:	e01f      	b.n	800080a <HAL_UART_RxCpltCallback+0x7e>
		}
		else if(znak == 'd'){
 80007ca:	4b19      	ldr	r3, [pc, #100]	@ (8000830 <HAL_UART_RxCpltCallback+0xa4>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b64      	cmp	r3, #100	@ 0x64
 80007d0:	d111      	bne.n	80007f6 <HAL_UART_RxCpltCallback+0x6a>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80007d2:	23a0      	movs	r3, #160	@ 0xa0
 80007d4:	05db      	lsls	r3, r3, #23
 80007d6:	2200      	movs	r2, #0
 80007d8:	2120      	movs	r1, #32
 80007da:	0018      	movs	r0, r3
 80007dc:	f000 fd36 	bl	800124c <HAL_GPIO_WritePin>
			dl_kom = sprintf(komunikat, "dioda OFF");
 80007e0:	4a17      	ldr	r2, [pc, #92]	@ (8000840 <HAL_UART_RxCpltCallback+0xb4>)
 80007e2:	4b15      	ldr	r3, [pc, #84]	@ (8000838 <HAL_UART_RxCpltCallback+0xac>)
 80007e4:	0011      	movs	r1, r2
 80007e6:	0018      	movs	r0, r3
 80007e8:	f003 fef8 	bl	80045dc <siprintf>
 80007ec:	0003      	movs	r3, r0
 80007ee:	b29a      	uxth	r2, r3
 80007f0:	4b12      	ldr	r3, [pc, #72]	@ (800083c <HAL_UART_RxCpltCallback+0xb0>)
 80007f2:	801a      	strh	r2, [r3, #0]
 80007f4:	e009      	b.n	800080a <HAL_UART_RxCpltCallback+0x7e>
		}
		else{
			dl_kom = sprintf(komunikat, "zly znak");
 80007f6:	4a13      	ldr	r2, [pc, #76]	@ (8000844 <HAL_UART_RxCpltCallback+0xb8>)
 80007f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000838 <HAL_UART_RxCpltCallback+0xac>)
 80007fa:	0011      	movs	r1, r2
 80007fc:	0018      	movs	r0, r3
 80007fe:	f003 feed 	bl	80045dc <siprintf>
 8000802:	0003      	movs	r3, r0
 8000804:	b29a      	uxth	r2, r3
 8000806:	4b0d      	ldr	r3, [pc, #52]	@ (800083c <HAL_UART_RxCpltCallback+0xb0>)
 8000808:	801a      	strh	r2, [r3, #0]
		}
		HAL_UART_Transmit_IT(&huart2, komunikat, dl_kom);
 800080a:	4b0c      	ldr	r3, [pc, #48]	@ (800083c <HAL_UART_RxCpltCallback+0xb0>)
 800080c:	881a      	ldrh	r2, [r3, #0]
 800080e:	490a      	ldr	r1, [pc, #40]	@ (8000838 <HAL_UART_RxCpltCallback+0xac>)
 8000810:	4b0d      	ldr	r3, [pc, #52]	@ (8000848 <HAL_UART_RxCpltCallback+0xbc>)
 8000812:	0018      	movs	r0, r3
 8000814:	f001 fc56 	bl	80020c4 <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(&huart2, &znak, 1);
 8000818:	4905      	ldr	r1, [pc, #20]	@ (8000830 <HAL_UART_RxCpltCallback+0xa4>)
 800081a:	4b0b      	ldr	r3, [pc, #44]	@ (8000848 <HAL_UART_RxCpltCallback+0xbc>)
 800081c:	2201      	movs	r2, #1
 800081e:	0018      	movs	r0, r3
 8000820:	f001 fcf8 	bl	8002214 <HAL_UART_Receive_IT>
	}
}
 8000824:	46c0      	nop			@ (mov r8, r8)
 8000826:	46bd      	mov	sp, r7
 8000828:	b002      	add	sp, #8
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40004400 	.word	0x40004400
 8000830:	20000078 	.word	0x20000078
 8000834:	08004f30 	.word	0x08004f30
 8000838:	2000007c 	.word	0x2000007c
 800083c:	20000090 	.word	0x20000090
 8000840:	08004f3c 	.word	0x08004f3c
 8000844:	08004f48 	.word	0x08004f48
 8000848:	20000098 	.word	0x20000098

0800084c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000850:	b672      	cpsid	i
}
 8000852:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000854:	46c0      	nop			@ (mov r8, r8)
 8000856:	e7fd      	b.n	8000854 <Error_Handler+0x8>

08000858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085e:	4b0f      	ldr	r3, [pc, #60]	@ (800089c <HAL_MspInit+0x44>)
 8000860:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000862:	4b0e      	ldr	r3, [pc, #56]	@ (800089c <HAL_MspInit+0x44>)
 8000864:	2101      	movs	r1, #1
 8000866:	430a      	orrs	r2, r1
 8000868:	641a      	str	r2, [r3, #64]	@ 0x40
 800086a:	4b0c      	ldr	r3, [pc, #48]	@ (800089c <HAL_MspInit+0x44>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800086e:	2201      	movs	r2, #1
 8000870:	4013      	ands	r3, r2
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000876:	4b09      	ldr	r3, [pc, #36]	@ (800089c <HAL_MspInit+0x44>)
 8000878:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800087a:	4b08      	ldr	r3, [pc, #32]	@ (800089c <HAL_MspInit+0x44>)
 800087c:	2180      	movs	r1, #128	@ 0x80
 800087e:	0549      	lsls	r1, r1, #21
 8000880:	430a      	orrs	r2, r1
 8000882:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000884:	4b05      	ldr	r3, [pc, #20]	@ (800089c <HAL_MspInit+0x44>)
 8000886:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000888:	2380      	movs	r3, #128	@ 0x80
 800088a:	055b      	lsls	r3, r3, #21
 800088c:	4013      	ands	r3, r2
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000892:	46c0      	nop			@ (mov r8, r8)
 8000894:	46bd      	mov	sp, r7
 8000896:	b002      	add	sp, #8
 8000898:	bd80      	pop	{r7, pc}
 800089a:	46c0      	nop			@ (mov r8, r8)
 800089c:	40021000 	.word	0x40021000

080008a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008a4:	46c0      	nop			@ (mov r8, r8)
 80008a6:	e7fd      	b.n	80008a4 <NMI_Handler+0x4>

080008a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ac:	46c0      	nop			@ (mov r8, r8)
 80008ae:	e7fd      	b.n	80008ac <HardFault_Handler+0x4>

080008b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008b4:	46c0      	nop			@ (mov r8, r8)
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}

080008ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008be:	46c0      	nop			@ (mov r8, r8)
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c8:	f000 f996 	bl	8000bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008cc:	46c0      	nop			@ (mov r8, r8)
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
	...

080008d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008d8:	4b03      	ldr	r3, [pc, #12]	@ (80008e8 <USART2_IRQHandler+0x14>)
 80008da:	0018      	movs	r0, r3
 80008dc:	f001 fcf8 	bl	80022d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008e0:	46c0      	nop			@ (mov r8, r8)
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	46c0      	nop			@ (mov r8, r8)
 80008e8:	20000098 	.word	0x20000098

080008ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008f4:	4a14      	ldr	r2, [pc, #80]	@ (8000948 <_sbrk+0x5c>)
 80008f6:	4b15      	ldr	r3, [pc, #84]	@ (800094c <_sbrk+0x60>)
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000900:	4b13      	ldr	r3, [pc, #76]	@ (8000950 <_sbrk+0x64>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d102      	bne.n	800090e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000908:	4b11      	ldr	r3, [pc, #68]	@ (8000950 <_sbrk+0x64>)
 800090a:	4a12      	ldr	r2, [pc, #72]	@ (8000954 <_sbrk+0x68>)
 800090c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800090e:	4b10      	ldr	r3, [pc, #64]	@ (8000950 <_sbrk+0x64>)
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	18d3      	adds	r3, r2, r3
 8000916:	693a      	ldr	r2, [r7, #16]
 8000918:	429a      	cmp	r2, r3
 800091a:	d207      	bcs.n	800092c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800091c:	f003 fe86 	bl	800462c <__errno>
 8000920:	0003      	movs	r3, r0
 8000922:	220c      	movs	r2, #12
 8000924:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000926:	2301      	movs	r3, #1
 8000928:	425b      	negs	r3, r3
 800092a:	e009      	b.n	8000940 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800092c:	4b08      	ldr	r3, [pc, #32]	@ (8000950 <_sbrk+0x64>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000932:	4b07      	ldr	r3, [pc, #28]	@ (8000950 <_sbrk+0x64>)
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	18d2      	adds	r2, r2, r3
 800093a:	4b05      	ldr	r3, [pc, #20]	@ (8000950 <_sbrk+0x64>)
 800093c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800093e:	68fb      	ldr	r3, [r7, #12]
}
 8000940:	0018      	movs	r0, r3
 8000942:	46bd      	mov	sp, r7
 8000944:	b006      	add	sp, #24
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20009000 	.word	0x20009000
 800094c:	00000400 	.word	0x00000400
 8000950:	20000094 	.word	0x20000094
 8000954:	20000278 	.word	0x20000278

08000958 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800095c:	46c0      	nop			@ (mov r8, r8)
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
	...

08000964 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000968:	4b23      	ldr	r3, [pc, #140]	@ (80009f8 <MX_USART2_UART_Init+0x94>)
 800096a:	4a24      	ldr	r2, [pc, #144]	@ (80009fc <MX_USART2_UART_Init+0x98>)
 800096c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800096e:	4b22      	ldr	r3, [pc, #136]	@ (80009f8 <MX_USART2_UART_Init+0x94>)
 8000970:	22e1      	movs	r2, #225	@ 0xe1
 8000972:	0252      	lsls	r2, r2, #9
 8000974:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000976:	4b20      	ldr	r3, [pc, #128]	@ (80009f8 <MX_USART2_UART_Init+0x94>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800097c:	4b1e      	ldr	r3, [pc, #120]	@ (80009f8 <MX_USART2_UART_Init+0x94>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000982:	4b1d      	ldr	r3, [pc, #116]	@ (80009f8 <MX_USART2_UART_Init+0x94>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000988:	4b1b      	ldr	r3, [pc, #108]	@ (80009f8 <MX_USART2_UART_Init+0x94>)
 800098a:	220c      	movs	r2, #12
 800098c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098e:	4b1a      	ldr	r3, [pc, #104]	@ (80009f8 <MX_USART2_UART_Init+0x94>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000994:	4b18      	ldr	r3, [pc, #96]	@ (80009f8 <MX_USART2_UART_Init+0x94>)
 8000996:	2200      	movs	r2, #0
 8000998:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800099a:	4b17      	ldr	r3, [pc, #92]	@ (80009f8 <MX_USART2_UART_Init+0x94>)
 800099c:	2200      	movs	r2, #0
 800099e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009a0:	4b15      	ldr	r3, [pc, #84]	@ (80009f8 <MX_USART2_UART_Init+0x94>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009a6:	4b14      	ldr	r3, [pc, #80]	@ (80009f8 <MX_USART2_UART_Init+0x94>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ac:	4b12      	ldr	r3, [pc, #72]	@ (80009f8 <MX_USART2_UART_Init+0x94>)
 80009ae:	0018      	movs	r0, r3
 80009b0:	f001 fb32 	bl	8002018 <HAL_UART_Init>
 80009b4:	1e03      	subs	r3, r0, #0
 80009b6:	d001      	beq.n	80009bc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80009b8:	f7ff ff48 	bl	800084c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009bc:	4b0e      	ldr	r3, [pc, #56]	@ (80009f8 <MX_USART2_UART_Init+0x94>)
 80009be:	2100      	movs	r1, #0
 80009c0:	0018      	movs	r0, r3
 80009c2:	f003 fd2b 	bl	800441c <HAL_UARTEx_SetTxFifoThreshold>
 80009c6:	1e03      	subs	r3, r0, #0
 80009c8:	d001      	beq.n	80009ce <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80009ca:	f7ff ff3f 	bl	800084c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ce:	4b0a      	ldr	r3, [pc, #40]	@ (80009f8 <MX_USART2_UART_Init+0x94>)
 80009d0:	2100      	movs	r1, #0
 80009d2:	0018      	movs	r0, r3
 80009d4:	f003 fd62 	bl	800449c <HAL_UARTEx_SetRxFifoThreshold>
 80009d8:	1e03      	subs	r3, r0, #0
 80009da:	d001      	beq.n	80009e0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80009dc:	f7ff ff36 	bl	800084c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80009e0:	4b05      	ldr	r3, [pc, #20]	@ (80009f8 <MX_USART2_UART_Init+0x94>)
 80009e2:	0018      	movs	r0, r3
 80009e4:	f003 fce0 	bl	80043a8 <HAL_UARTEx_DisableFifoMode>
 80009e8:	1e03      	subs	r3, r0, #0
 80009ea:	d001      	beq.n	80009f0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80009ec:	f7ff ff2e 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009f0:	46c0      	nop			@ (mov r8, r8)
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	46c0      	nop			@ (mov r8, r8)
 80009f8:	20000098 	.word	0x20000098
 80009fc:	40004400 	.word	0x40004400

08000a00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a00:	b590      	push	{r4, r7, lr}
 8000a02:	b097      	sub	sp, #92	@ 0x5c
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	2344      	movs	r3, #68	@ 0x44
 8000a0a:	18fb      	adds	r3, r7, r3
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	2314      	movs	r3, #20
 8000a10:	001a      	movs	r2, r3
 8000a12:	2100      	movs	r1, #0
 8000a14:	f003 fe02 	bl	800461c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a18:	2410      	movs	r4, #16
 8000a1a:	193b      	adds	r3, r7, r4
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	2334      	movs	r3, #52	@ 0x34
 8000a20:	001a      	movs	r2, r3
 8000a22:	2100      	movs	r1, #0
 8000a24:	f003 fdfa 	bl	800461c <memset>
  if(uartHandle->Instance==USART2)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a26      	ldr	r2, [pc, #152]	@ (8000ac8 <HAL_UART_MspInit+0xc8>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d146      	bne.n	8000ac0 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a32:	193b      	adds	r3, r7, r4
 8000a34:	2202      	movs	r2, #2
 8000a36:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a38:	193b      	adds	r3, r7, r4
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a3e:	193b      	adds	r3, r7, r4
 8000a40:	0018      	movs	r0, r3
 8000a42:	f001 f931 	bl	8001ca8 <HAL_RCCEx_PeriphCLKConfig>
 8000a46:	1e03      	subs	r3, r0, #0
 8000a48:	d001      	beq.n	8000a4e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a4a:	f7ff feff 	bl	800084c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a4e:	4b1f      	ldr	r3, [pc, #124]	@ (8000acc <HAL_UART_MspInit+0xcc>)
 8000a50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a52:	4b1e      	ldr	r3, [pc, #120]	@ (8000acc <HAL_UART_MspInit+0xcc>)
 8000a54:	2180      	movs	r1, #128	@ 0x80
 8000a56:	0289      	lsls	r1, r1, #10
 8000a58:	430a      	orrs	r2, r1
 8000a5a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000acc <HAL_UART_MspInit+0xcc>)
 8000a5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a60:	2380      	movs	r3, #128	@ 0x80
 8000a62:	029b      	lsls	r3, r3, #10
 8000a64:	4013      	ands	r3, r2
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	4b18      	ldr	r3, [pc, #96]	@ (8000acc <HAL_UART_MspInit+0xcc>)
 8000a6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a6e:	4b17      	ldr	r3, [pc, #92]	@ (8000acc <HAL_UART_MspInit+0xcc>)
 8000a70:	2101      	movs	r1, #1
 8000a72:	430a      	orrs	r2, r1
 8000a74:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a76:	4b15      	ldr	r3, [pc, #84]	@ (8000acc <HAL_UART_MspInit+0xcc>)
 8000a78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000a82:	2144      	movs	r1, #68	@ 0x44
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	220c      	movs	r2, #12
 8000a88:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8a:	187b      	adds	r3, r7, r1
 8000a8c:	2202      	movs	r2, #2
 8000a8e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a90:	187b      	adds	r3, r7, r1
 8000a92:	2201      	movs	r2, #1
 8000a94:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	187b      	adds	r3, r7, r1
 8000a98:	2200      	movs	r2, #0
 8000a9a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000a9c:	187b      	adds	r3, r7, r1
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa2:	187a      	adds	r2, r7, r1
 8000aa4:	23a0      	movs	r3, #160	@ 0xa0
 8000aa6:	05db      	lsls	r3, r3, #23
 8000aa8:	0011      	movs	r1, r2
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f000 fa6a 	bl	8000f84 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	201c      	movs	r0, #28
 8000ab6:	f000 f967 	bl	8000d88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000aba:	201c      	movs	r0, #28
 8000abc:	f000 f979 	bl	8000db2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ac0:	46c0      	nop			@ (mov r8, r8)
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	b017      	add	sp, #92	@ 0x5c
 8000ac6:	bd90      	pop	{r4, r7, pc}
 8000ac8:	40004400 	.word	0x40004400
 8000acc:	40021000 	.word	0x40021000

08000ad0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ad0:	480d      	ldr	r0, [pc, #52]	@ (8000b08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ad2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ad4:	f7ff ff40 	bl	8000958 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ad8:	480c      	ldr	r0, [pc, #48]	@ (8000b0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000ada:	490d      	ldr	r1, [pc, #52]	@ (8000b10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000adc:	4a0d      	ldr	r2, [pc, #52]	@ (8000b14 <LoopForever+0xe>)
  movs r3, #0
 8000ade:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae0:	e002      	b.n	8000ae8 <LoopCopyDataInit>

08000ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ae6:	3304      	adds	r3, #4

08000ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aec:	d3f9      	bcc.n	8000ae2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aee:	4a0a      	ldr	r2, [pc, #40]	@ (8000b18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000af0:	4c0a      	ldr	r4, [pc, #40]	@ (8000b1c <LoopForever+0x16>)
  movs r3, #0
 8000af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af4:	e001      	b.n	8000afa <LoopFillZerobss>

08000af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af8:	3204      	adds	r2, #4

08000afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000afc:	d3fb      	bcc.n	8000af6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000afe:	f003 fd9b 	bl	8004638 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000b02:	f7ff fde5 	bl	80006d0 <main>

08000b06 <LoopForever>:

LoopForever:
  b LoopForever
 8000b06:	e7fe      	b.n	8000b06 <LoopForever>
  ldr   r0, =_estack
 8000b08:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b10:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000b14:	08005020 	.word	0x08005020
  ldr r2, =_sbss
 8000b18:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000b1c:	20000278 	.word	0x20000278

08000b20 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b20:	e7fe      	b.n	8000b20 <ADC1_COMP_IRQHandler>
	...

08000b24 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b2a:	1dfb      	adds	r3, r7, #7
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b30:	4b0b      	ldr	r3, [pc, #44]	@ (8000b60 <HAL_Init+0x3c>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	4b0a      	ldr	r3, [pc, #40]	@ (8000b60 <HAL_Init+0x3c>)
 8000b36:	2180      	movs	r1, #128	@ 0x80
 8000b38:	0049      	lsls	r1, r1, #1
 8000b3a:	430a      	orrs	r2, r1
 8000b3c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f000 f810 	bl	8000b64 <HAL_InitTick>
 8000b44:	1e03      	subs	r3, r0, #0
 8000b46:	d003      	beq.n	8000b50 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000b48:	1dfb      	adds	r3, r7, #7
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	701a      	strb	r2, [r3, #0]
 8000b4e:	e001      	b.n	8000b54 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000b50:	f7ff fe82 	bl	8000858 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b54:	1dfb      	adds	r3, r7, #7
 8000b56:	781b      	ldrb	r3, [r3, #0]
}
 8000b58:	0018      	movs	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	b002      	add	sp, #8
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40022000 	.word	0x40022000

08000b64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b64:	b590      	push	{r4, r7, lr}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b6c:	230f      	movs	r3, #15
 8000b6e:	18fb      	adds	r3, r7, r3
 8000b70:	2200      	movs	r2, #0
 8000b72:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000b74:	4b1d      	ldr	r3, [pc, #116]	@ (8000bec <HAL_InitTick+0x88>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d02b      	beq.n	8000bd4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000b7c:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf0 <HAL_InitTick+0x8c>)
 8000b7e:	681c      	ldr	r4, [r3, #0]
 8000b80:	4b1a      	ldr	r3, [pc, #104]	@ (8000bec <HAL_InitTick+0x88>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	0019      	movs	r1, r3
 8000b86:	23fa      	movs	r3, #250	@ 0xfa
 8000b88:	0098      	lsls	r0, r3, #2
 8000b8a:	f7ff fac5 	bl	8000118 <__udivsi3>
 8000b8e:	0003      	movs	r3, r0
 8000b90:	0019      	movs	r1, r3
 8000b92:	0020      	movs	r0, r4
 8000b94:	f7ff fac0 	bl	8000118 <__udivsi3>
 8000b98:	0003      	movs	r3, r0
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f000 f919 	bl	8000dd2 <HAL_SYSTICK_Config>
 8000ba0:	1e03      	subs	r3, r0, #0
 8000ba2:	d112      	bne.n	8000bca <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2b03      	cmp	r3, #3
 8000ba8:	d80a      	bhi.n	8000bc0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000baa:	6879      	ldr	r1, [r7, #4]
 8000bac:	2301      	movs	r3, #1
 8000bae:	425b      	negs	r3, r3
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f000 f8e8 	bl	8000d88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf4 <HAL_InitTick+0x90>)
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	e00d      	b.n	8000bdc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000bc0:	230f      	movs	r3, #15
 8000bc2:	18fb      	adds	r3, r7, r3
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	701a      	strb	r2, [r3, #0]
 8000bc8:	e008      	b.n	8000bdc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bca:	230f      	movs	r3, #15
 8000bcc:	18fb      	adds	r3, r7, r3
 8000bce:	2201      	movs	r2, #1
 8000bd0:	701a      	strb	r2, [r3, #0]
 8000bd2:	e003      	b.n	8000bdc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bd4:	230f      	movs	r3, #15
 8000bd6:	18fb      	adds	r3, r7, r3
 8000bd8:	2201      	movs	r2, #1
 8000bda:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000bdc:	230f      	movs	r3, #15
 8000bde:	18fb      	adds	r3, r7, r3
 8000be0:	781b      	ldrb	r3, [r3, #0]
}
 8000be2:	0018      	movs	r0, r3
 8000be4:	46bd      	mov	sp, r7
 8000be6:	b005      	add	sp, #20
 8000be8:	bd90      	pop	{r4, r7, pc}
 8000bea:	46c0      	nop			@ (mov r8, r8)
 8000bec:	20000008 	.word	0x20000008
 8000bf0:	20000000 	.word	0x20000000
 8000bf4:	20000004 	.word	0x20000004

08000bf8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bfc:	4b05      	ldr	r3, [pc, #20]	@ (8000c14 <HAL_IncTick+0x1c>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	001a      	movs	r2, r3
 8000c02:	4b05      	ldr	r3, [pc, #20]	@ (8000c18 <HAL_IncTick+0x20>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	18d2      	adds	r2, r2, r3
 8000c08:	4b03      	ldr	r3, [pc, #12]	@ (8000c18 <HAL_IncTick+0x20>)
 8000c0a:	601a      	str	r2, [r3, #0]
}
 8000c0c:	46c0      	nop			@ (mov r8, r8)
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	46c0      	nop			@ (mov r8, r8)
 8000c14:	20000008 	.word	0x20000008
 8000c18:	2000012c 	.word	0x2000012c

08000c1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c20:	4b02      	ldr	r3, [pc, #8]	@ (8000c2c <HAL_GetTick+0x10>)
 8000c22:	681b      	ldr	r3, [r3, #0]
}
 8000c24:	0018      	movs	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	46c0      	nop			@ (mov r8, r8)
 8000c2c:	2000012c 	.word	0x2000012c

08000c30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	0002      	movs	r2, r0
 8000c38:	1dfb      	adds	r3, r7, #7
 8000c3a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c3c:	1dfb      	adds	r3, r7, #7
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c42:	d809      	bhi.n	8000c58 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c44:	1dfb      	adds	r3, r7, #7
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	001a      	movs	r2, r3
 8000c4a:	231f      	movs	r3, #31
 8000c4c:	401a      	ands	r2, r3
 8000c4e:	4b04      	ldr	r3, [pc, #16]	@ (8000c60 <__NVIC_EnableIRQ+0x30>)
 8000c50:	2101      	movs	r1, #1
 8000c52:	4091      	lsls	r1, r2
 8000c54:	000a      	movs	r2, r1
 8000c56:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000c58:	46c0      	nop			@ (mov r8, r8)
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	b002      	add	sp, #8
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	e000e100 	.word	0xe000e100

08000c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c64:	b590      	push	{r4, r7, lr}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	0002      	movs	r2, r0
 8000c6c:	6039      	str	r1, [r7, #0]
 8000c6e:	1dfb      	adds	r3, r7, #7
 8000c70:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c72:	1dfb      	adds	r3, r7, #7
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c78:	d828      	bhi.n	8000ccc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c7a:	4a2f      	ldr	r2, [pc, #188]	@ (8000d38 <__NVIC_SetPriority+0xd4>)
 8000c7c:	1dfb      	adds	r3, r7, #7
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	b25b      	sxtb	r3, r3
 8000c82:	089b      	lsrs	r3, r3, #2
 8000c84:	33c0      	adds	r3, #192	@ 0xc0
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	589b      	ldr	r3, [r3, r2]
 8000c8a:	1dfa      	adds	r2, r7, #7
 8000c8c:	7812      	ldrb	r2, [r2, #0]
 8000c8e:	0011      	movs	r1, r2
 8000c90:	2203      	movs	r2, #3
 8000c92:	400a      	ands	r2, r1
 8000c94:	00d2      	lsls	r2, r2, #3
 8000c96:	21ff      	movs	r1, #255	@ 0xff
 8000c98:	4091      	lsls	r1, r2
 8000c9a:	000a      	movs	r2, r1
 8000c9c:	43d2      	mvns	r2, r2
 8000c9e:	401a      	ands	r2, r3
 8000ca0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	019b      	lsls	r3, r3, #6
 8000ca6:	22ff      	movs	r2, #255	@ 0xff
 8000ca8:	401a      	ands	r2, r3
 8000caa:	1dfb      	adds	r3, r7, #7
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	0018      	movs	r0, r3
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	4003      	ands	r3, r0
 8000cb4:	00db      	lsls	r3, r3, #3
 8000cb6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cb8:	481f      	ldr	r0, [pc, #124]	@ (8000d38 <__NVIC_SetPriority+0xd4>)
 8000cba:	1dfb      	adds	r3, r7, #7
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	b25b      	sxtb	r3, r3
 8000cc0:	089b      	lsrs	r3, r3, #2
 8000cc2:	430a      	orrs	r2, r1
 8000cc4:	33c0      	adds	r3, #192	@ 0xc0
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000cca:	e031      	b.n	8000d30 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ccc:	4a1b      	ldr	r2, [pc, #108]	@ (8000d3c <__NVIC_SetPriority+0xd8>)
 8000cce:	1dfb      	adds	r3, r7, #7
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	0019      	movs	r1, r3
 8000cd4:	230f      	movs	r3, #15
 8000cd6:	400b      	ands	r3, r1
 8000cd8:	3b08      	subs	r3, #8
 8000cda:	089b      	lsrs	r3, r3, #2
 8000cdc:	3306      	adds	r3, #6
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	18d3      	adds	r3, r2, r3
 8000ce2:	3304      	adds	r3, #4
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	1dfa      	adds	r2, r7, #7
 8000ce8:	7812      	ldrb	r2, [r2, #0]
 8000cea:	0011      	movs	r1, r2
 8000cec:	2203      	movs	r2, #3
 8000cee:	400a      	ands	r2, r1
 8000cf0:	00d2      	lsls	r2, r2, #3
 8000cf2:	21ff      	movs	r1, #255	@ 0xff
 8000cf4:	4091      	lsls	r1, r2
 8000cf6:	000a      	movs	r2, r1
 8000cf8:	43d2      	mvns	r2, r2
 8000cfa:	401a      	ands	r2, r3
 8000cfc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	019b      	lsls	r3, r3, #6
 8000d02:	22ff      	movs	r2, #255	@ 0xff
 8000d04:	401a      	ands	r2, r3
 8000d06:	1dfb      	adds	r3, r7, #7
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	4003      	ands	r3, r0
 8000d10:	00db      	lsls	r3, r3, #3
 8000d12:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d14:	4809      	ldr	r0, [pc, #36]	@ (8000d3c <__NVIC_SetPriority+0xd8>)
 8000d16:	1dfb      	adds	r3, r7, #7
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	001c      	movs	r4, r3
 8000d1c:	230f      	movs	r3, #15
 8000d1e:	4023      	ands	r3, r4
 8000d20:	3b08      	subs	r3, #8
 8000d22:	089b      	lsrs	r3, r3, #2
 8000d24:	430a      	orrs	r2, r1
 8000d26:	3306      	adds	r3, #6
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	18c3      	adds	r3, r0, r3
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	601a      	str	r2, [r3, #0]
}
 8000d30:	46c0      	nop			@ (mov r8, r8)
 8000d32:	46bd      	mov	sp, r7
 8000d34:	b003      	add	sp, #12
 8000d36:	bd90      	pop	{r4, r7, pc}
 8000d38:	e000e100 	.word	0xe000e100
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	1e5a      	subs	r2, r3, #1
 8000d4c:	2380      	movs	r3, #128	@ 0x80
 8000d4e:	045b      	lsls	r3, r3, #17
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d301      	bcc.n	8000d58 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d54:	2301      	movs	r3, #1
 8000d56:	e010      	b.n	8000d7a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d58:	4b0a      	ldr	r3, [pc, #40]	@ (8000d84 <SysTick_Config+0x44>)
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	3a01      	subs	r2, #1
 8000d5e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d60:	2301      	movs	r3, #1
 8000d62:	425b      	negs	r3, r3
 8000d64:	2103      	movs	r1, #3
 8000d66:	0018      	movs	r0, r3
 8000d68:	f7ff ff7c 	bl	8000c64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d6c:	4b05      	ldr	r3, [pc, #20]	@ (8000d84 <SysTick_Config+0x44>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d72:	4b04      	ldr	r3, [pc, #16]	@ (8000d84 <SysTick_Config+0x44>)
 8000d74:	2207      	movs	r2, #7
 8000d76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	b002      	add	sp, #8
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	46c0      	nop			@ (mov r8, r8)
 8000d84:	e000e010 	.word	0xe000e010

08000d88 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60b9      	str	r1, [r7, #8]
 8000d90:	607a      	str	r2, [r7, #4]
 8000d92:	210f      	movs	r1, #15
 8000d94:	187b      	adds	r3, r7, r1
 8000d96:	1c02      	adds	r2, r0, #0
 8000d98:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000d9a:	68ba      	ldr	r2, [r7, #8]
 8000d9c:	187b      	adds	r3, r7, r1
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	b25b      	sxtb	r3, r3
 8000da2:	0011      	movs	r1, r2
 8000da4:	0018      	movs	r0, r3
 8000da6:	f7ff ff5d 	bl	8000c64 <__NVIC_SetPriority>
}
 8000daa:	46c0      	nop			@ (mov r8, r8)
 8000dac:	46bd      	mov	sp, r7
 8000dae:	b004      	add	sp, #16
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	0002      	movs	r2, r0
 8000dba:	1dfb      	adds	r3, r7, #7
 8000dbc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dbe:	1dfb      	adds	r3, r7, #7
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	b25b      	sxtb	r3, r3
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f7ff ff33 	bl	8000c30 <__NVIC_EnableIRQ>
}
 8000dca:	46c0      	nop			@ (mov r8, r8)
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	b002      	add	sp, #8
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f7ff ffaf 	bl	8000d40 <SysTick_Config>
 8000de2:	0003      	movs	r3, r0
}
 8000de4:	0018      	movs	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	b002      	add	sp, #8
 8000dea:	bd80      	pop	{r7, pc}

08000dec <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d101      	bne.n	8000dfe <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e050      	b.n	8000ea0 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2225      	movs	r2, #37	@ 0x25
 8000e02:	5c9b      	ldrb	r3, [r3, r2]
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d008      	beq.n	8000e1c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2204      	movs	r2, #4
 8000e0e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2224      	movs	r2, #36	@ 0x24
 8000e14:	2100      	movs	r1, #0
 8000e16:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	e041      	b.n	8000ea0 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	210e      	movs	r1, #14
 8000e28:	438a      	bics	r2, r1
 8000e2a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e36:	491c      	ldr	r1, [pc, #112]	@ (8000ea8 <HAL_DMA_Abort+0xbc>)
 8000e38:	400a      	ands	r2, r1
 8000e3a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	2101      	movs	r1, #1
 8000e48:	438a      	bics	r2, r1
 8000e4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8000e4c:	4b17      	ldr	r3, [pc, #92]	@ (8000eac <HAL_DMA_Abort+0xc0>)
 8000e4e:	6859      	ldr	r1, [r3, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e54:	221c      	movs	r2, #28
 8000e56:	4013      	ands	r3, r2
 8000e58:	2201      	movs	r2, #1
 8000e5a:	409a      	lsls	r2, r3
 8000e5c:	4b13      	ldr	r3, [pc, #76]	@ (8000eac <HAL_DMA_Abort+0xc0>)
 8000e5e:	430a      	orrs	r2, r1
 8000e60:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000e6a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d00c      	beq.n	8000e8e <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000e7e:	490a      	ldr	r1, [pc, #40]	@ (8000ea8 <HAL_DMA_Abort+0xbc>)
 8000e80:	400a      	ands	r2, r1
 8000e82:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000e8c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2225      	movs	r2, #37	@ 0x25
 8000e92:	2101      	movs	r1, #1
 8000e94:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2224      	movs	r2, #36	@ 0x24
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8000e9e:	2300      	movs	r3, #0
}
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	b002      	add	sp, #8
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	fffffeff 	.word	0xfffffeff
 8000eac:	40020000 	.word	0x40020000

08000eb0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000eb8:	210f      	movs	r1, #15
 8000eba:	187b      	adds	r3, r7, r1
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2225      	movs	r2, #37	@ 0x25
 8000ec4:	5c9b      	ldrb	r3, [r3, r2]
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d006      	beq.n	8000eda <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2204      	movs	r2, #4
 8000ed0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000ed2:	187b      	adds	r3, r7, r1
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	701a      	strb	r2, [r3, #0]
 8000ed8:	e049      	b.n	8000f6e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	210e      	movs	r1, #14
 8000ee6:	438a      	bics	r2, r1
 8000ee8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	438a      	bics	r2, r1
 8000ef8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f04:	491d      	ldr	r1, [pc, #116]	@ (8000f7c <HAL_DMA_Abort_IT+0xcc>)
 8000f06:	400a      	ands	r2, r1
 8000f08:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8000f0a:	4b1d      	ldr	r3, [pc, #116]	@ (8000f80 <HAL_DMA_Abort_IT+0xd0>)
 8000f0c:	6859      	ldr	r1, [r3, #4]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f12:	221c      	movs	r2, #28
 8000f14:	4013      	ands	r3, r2
 8000f16:	2201      	movs	r2, #1
 8000f18:	409a      	lsls	r2, r3
 8000f1a:	4b19      	ldr	r3, [pc, #100]	@ (8000f80 <HAL_DMA_Abort_IT+0xd0>)
 8000f1c:	430a      	orrs	r2, r1
 8000f1e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000f28:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d00c      	beq.n	8000f4c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f3c:	490f      	ldr	r1, [pc, #60]	@ (8000f7c <HAL_DMA_Abort_IT+0xcc>)
 8000f3e:	400a      	ands	r2, r1
 8000f40:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000f4a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2225      	movs	r2, #37	@ 0x25
 8000f50:	2101      	movs	r1, #1
 8000f52:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2224      	movs	r2, #36	@ 0x24
 8000f58:	2100      	movs	r1, #0
 8000f5a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d004      	beq.n	8000f6e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	0010      	movs	r0, r2
 8000f6c:	4798      	blx	r3
    }
  }
  return status;
 8000f6e:	230f      	movs	r3, #15
 8000f70:	18fb      	adds	r3, r7, r3
 8000f72:	781b      	ldrb	r3, [r3, #0]
}
 8000f74:	0018      	movs	r0, r3
 8000f76:	46bd      	mov	sp, r7
 8000f78:	b004      	add	sp, #16
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	fffffeff 	.word	0xfffffeff
 8000f80:	40020000 	.word	0x40020000

08000f84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f92:	e147      	b.n	8001224 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2101      	movs	r1, #1
 8000f9a:	697a      	ldr	r2, [r7, #20]
 8000f9c:	4091      	lsls	r1, r2
 8000f9e:	000a      	movs	r2, r1
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d100      	bne.n	8000fac <HAL_GPIO_Init+0x28>
 8000faa:	e138      	b.n	800121e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d005      	beq.n	8000fc4 <HAL_GPIO_Init+0x40>
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	2203      	movs	r2, #3
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d130      	bne.n	8001026 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	2203      	movs	r2, #3
 8000fd0:	409a      	lsls	r2, r3
 8000fd2:	0013      	movs	r3, r2
 8000fd4:	43da      	mvns	r2, r3
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	68da      	ldr	r2, [r3, #12]
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	409a      	lsls	r2, r3
 8000fe6:	0013      	movs	r3, r2
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	409a      	lsls	r2, r3
 8001000:	0013      	movs	r3, r2
 8001002:	43da      	mvns	r2, r3
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	4013      	ands	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	091b      	lsrs	r3, r3, #4
 8001010:	2201      	movs	r2, #1
 8001012:	401a      	ands	r2, r3
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	409a      	lsls	r2, r3
 8001018:	0013      	movs	r3, r2
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4313      	orrs	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	2203      	movs	r2, #3
 800102c:	4013      	ands	r3, r2
 800102e:	2b03      	cmp	r3, #3
 8001030:	d017      	beq.n	8001062 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	68db      	ldr	r3, [r3, #12]
 8001036:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	2203      	movs	r2, #3
 800103e:	409a      	lsls	r2, r3
 8001040:	0013      	movs	r3, r2
 8001042:	43da      	mvns	r2, r3
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	4013      	ands	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	689a      	ldr	r2, [r3, #8]
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	409a      	lsls	r2, r3
 8001054:	0013      	movs	r3, r2
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2203      	movs	r2, #3
 8001068:	4013      	ands	r3, r2
 800106a:	2b02      	cmp	r3, #2
 800106c:	d123      	bne.n	80010b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	08da      	lsrs	r2, r3, #3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	3208      	adds	r2, #8
 8001076:	0092      	lsls	r2, r2, #2
 8001078:	58d3      	ldr	r3, [r2, r3]
 800107a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	2207      	movs	r2, #7
 8001080:	4013      	ands	r3, r2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	220f      	movs	r2, #15
 8001086:	409a      	lsls	r2, r3
 8001088:	0013      	movs	r3, r2
 800108a:	43da      	mvns	r2, r3
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	4013      	ands	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	691a      	ldr	r2, [r3, #16]
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	2107      	movs	r1, #7
 800109a:	400b      	ands	r3, r1
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	409a      	lsls	r2, r3
 80010a0:	0013      	movs	r3, r2
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	08da      	lsrs	r2, r3, #3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3208      	adds	r2, #8
 80010b0:	0092      	lsls	r2, r2, #2
 80010b2:	6939      	ldr	r1, [r7, #16]
 80010b4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	2203      	movs	r2, #3
 80010c2:	409a      	lsls	r2, r3
 80010c4:	0013      	movs	r3, r2
 80010c6:	43da      	mvns	r2, r3
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	4013      	ands	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	2203      	movs	r2, #3
 80010d4:	401a      	ands	r2, r3
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	409a      	lsls	r2, r3
 80010dc:	0013      	movs	r3, r2
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685a      	ldr	r2, [r3, #4]
 80010ee:	23c0      	movs	r3, #192	@ 0xc0
 80010f0:	029b      	lsls	r3, r3, #10
 80010f2:	4013      	ands	r3, r2
 80010f4:	d100      	bne.n	80010f8 <HAL_GPIO_Init+0x174>
 80010f6:	e092      	b.n	800121e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80010f8:	4a50      	ldr	r2, [pc, #320]	@ (800123c <HAL_GPIO_Init+0x2b8>)
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	089b      	lsrs	r3, r3, #2
 80010fe:	3318      	adds	r3, #24
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	589b      	ldr	r3, [r3, r2]
 8001104:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	2203      	movs	r2, #3
 800110a:	4013      	ands	r3, r2
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	220f      	movs	r2, #15
 8001110:	409a      	lsls	r2, r3
 8001112:	0013      	movs	r3, r2
 8001114:	43da      	mvns	r2, r3
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	4013      	ands	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	23a0      	movs	r3, #160	@ 0xa0
 8001120:	05db      	lsls	r3, r3, #23
 8001122:	429a      	cmp	r2, r3
 8001124:	d013      	beq.n	800114e <HAL_GPIO_Init+0x1ca>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a45      	ldr	r2, [pc, #276]	@ (8001240 <HAL_GPIO_Init+0x2bc>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d00d      	beq.n	800114a <HAL_GPIO_Init+0x1c6>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a44      	ldr	r2, [pc, #272]	@ (8001244 <HAL_GPIO_Init+0x2c0>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d007      	beq.n	8001146 <HAL_GPIO_Init+0x1c2>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a43      	ldr	r2, [pc, #268]	@ (8001248 <HAL_GPIO_Init+0x2c4>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d101      	bne.n	8001142 <HAL_GPIO_Init+0x1be>
 800113e:	2303      	movs	r3, #3
 8001140:	e006      	b.n	8001150 <HAL_GPIO_Init+0x1cc>
 8001142:	2305      	movs	r3, #5
 8001144:	e004      	b.n	8001150 <HAL_GPIO_Init+0x1cc>
 8001146:	2302      	movs	r3, #2
 8001148:	e002      	b.n	8001150 <HAL_GPIO_Init+0x1cc>
 800114a:	2301      	movs	r3, #1
 800114c:	e000      	b.n	8001150 <HAL_GPIO_Init+0x1cc>
 800114e:	2300      	movs	r3, #0
 8001150:	697a      	ldr	r2, [r7, #20]
 8001152:	2103      	movs	r1, #3
 8001154:	400a      	ands	r2, r1
 8001156:	00d2      	lsls	r2, r2, #3
 8001158:	4093      	lsls	r3, r2
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	4313      	orrs	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001160:	4936      	ldr	r1, [pc, #216]	@ (800123c <HAL_GPIO_Init+0x2b8>)
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	089b      	lsrs	r3, r3, #2
 8001166:	3318      	adds	r3, #24
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800116e:	4b33      	ldr	r3, [pc, #204]	@ (800123c <HAL_GPIO_Init+0x2b8>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	43da      	mvns	r2, r3
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	4013      	ands	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685a      	ldr	r2, [r3, #4]
 8001182:	2380      	movs	r3, #128	@ 0x80
 8001184:	035b      	lsls	r3, r3, #13
 8001186:	4013      	ands	r3, r2
 8001188:	d003      	beq.n	8001192 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4313      	orrs	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001192:	4b2a      	ldr	r3, [pc, #168]	@ (800123c <HAL_GPIO_Init+0x2b8>)
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001198:	4b28      	ldr	r3, [pc, #160]	@ (800123c <HAL_GPIO_Init+0x2b8>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	43da      	mvns	r2, r3
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	4013      	ands	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685a      	ldr	r2, [r3, #4]
 80011ac:	2380      	movs	r3, #128	@ 0x80
 80011ae:	039b      	lsls	r3, r3, #14
 80011b0:	4013      	ands	r3, r2
 80011b2:	d003      	beq.n	80011bc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011bc:	4b1f      	ldr	r3, [pc, #124]	@ (800123c <HAL_GPIO_Init+0x2b8>)
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80011c2:	4a1e      	ldr	r2, [pc, #120]	@ (800123c <HAL_GPIO_Init+0x2b8>)
 80011c4:	2384      	movs	r3, #132	@ 0x84
 80011c6:	58d3      	ldr	r3, [r2, r3]
 80011c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	43da      	mvns	r2, r3
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	4013      	ands	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685a      	ldr	r2, [r3, #4]
 80011d8:	2380      	movs	r3, #128	@ 0x80
 80011da:	029b      	lsls	r3, r3, #10
 80011dc:	4013      	ands	r3, r2
 80011de:	d003      	beq.n	80011e8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011e8:	4914      	ldr	r1, [pc, #80]	@ (800123c <HAL_GPIO_Init+0x2b8>)
 80011ea:	2284      	movs	r2, #132	@ 0x84
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80011f0:	4a12      	ldr	r2, [pc, #72]	@ (800123c <HAL_GPIO_Init+0x2b8>)
 80011f2:	2380      	movs	r3, #128	@ 0x80
 80011f4:	58d3      	ldr	r3, [r2, r3]
 80011f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	43da      	mvns	r2, r3
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	4013      	ands	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685a      	ldr	r2, [r3, #4]
 8001206:	2380      	movs	r3, #128	@ 0x80
 8001208:	025b      	lsls	r3, r3, #9
 800120a:	4013      	ands	r3, r2
 800120c:	d003      	beq.n	8001216 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	4313      	orrs	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001216:	4909      	ldr	r1, [pc, #36]	@ (800123c <HAL_GPIO_Init+0x2b8>)
 8001218:	2280      	movs	r2, #128	@ 0x80
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	3301      	adds	r3, #1
 8001222:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	40da      	lsrs	r2, r3
 800122c:	1e13      	subs	r3, r2, #0
 800122e:	d000      	beq.n	8001232 <HAL_GPIO_Init+0x2ae>
 8001230:	e6b0      	b.n	8000f94 <HAL_GPIO_Init+0x10>
  }
}
 8001232:	46c0      	nop			@ (mov r8, r8)
 8001234:	46c0      	nop			@ (mov r8, r8)
 8001236:	46bd      	mov	sp, r7
 8001238:	b006      	add	sp, #24
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40021800 	.word	0x40021800
 8001240:	50000400 	.word	0x50000400
 8001244:	50000800 	.word	0x50000800
 8001248:	50000c00 	.word	0x50000c00

0800124c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	0008      	movs	r0, r1
 8001256:	0011      	movs	r1, r2
 8001258:	1cbb      	adds	r3, r7, #2
 800125a:	1c02      	adds	r2, r0, #0
 800125c:	801a      	strh	r2, [r3, #0]
 800125e:	1c7b      	adds	r3, r7, #1
 8001260:	1c0a      	adds	r2, r1, #0
 8001262:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001264:	1c7b      	adds	r3, r7, #1
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d004      	beq.n	8001276 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800126c:	1cbb      	adds	r3, r7, #2
 800126e:	881a      	ldrh	r2, [r3, #0]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001274:	e003      	b.n	800127e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001276:	1cbb      	adds	r3, r7, #2
 8001278:	881a      	ldrh	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800127e:	46c0      	nop			@ (mov r8, r8)
 8001280:	46bd      	mov	sp, r7
 8001282:	b002      	add	sp, #8
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001290:	4b19      	ldr	r3, [pc, #100]	@ (80012f8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a19      	ldr	r2, [pc, #100]	@ (80012fc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001296:	4013      	ands	r3, r2
 8001298:	0019      	movs	r1, r3
 800129a:	4b17      	ldr	r3, [pc, #92]	@ (80012f8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	430a      	orrs	r2, r1
 80012a0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	2380      	movs	r3, #128	@ 0x80
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d11f      	bne.n	80012ec <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80012ac:	4b14      	ldr	r3, [pc, #80]	@ (8001300 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	0013      	movs	r3, r2
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	189b      	adds	r3, r3, r2
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	4912      	ldr	r1, [pc, #72]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80012ba:	0018      	movs	r0, r3
 80012bc:	f7fe ff2c 	bl	8000118 <__udivsi3>
 80012c0:	0003      	movs	r3, r0
 80012c2:	3301      	adds	r3, #1
 80012c4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012c6:	e008      	b.n	80012da <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	3b01      	subs	r3, #1
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	e001      	b.n	80012da <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e009      	b.n	80012ee <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012da:	4b07      	ldr	r3, [pc, #28]	@ (80012f8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80012dc:	695a      	ldr	r2, [r3, #20]
 80012de:	2380      	movs	r3, #128	@ 0x80
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	401a      	ands	r2, r3
 80012e4:	2380      	movs	r3, #128	@ 0x80
 80012e6:	00db      	lsls	r3, r3, #3
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d0ed      	beq.n	80012c8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	0018      	movs	r0, r3
 80012f0:	46bd      	mov	sp, r7
 80012f2:	b004      	add	sp, #16
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	46c0      	nop			@ (mov r8, r8)
 80012f8:	40007000 	.word	0x40007000
 80012fc:	fffff9ff 	.word	0xfffff9ff
 8001300:	20000000 	.word	0x20000000
 8001304:	000f4240 	.word	0x000f4240

08001308 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800130c:	4b03      	ldr	r3, [pc, #12]	@ (800131c <LL_RCC_GetAPB1Prescaler+0x14>)
 800130e:	689a      	ldr	r2, [r3, #8]
 8001310:	23e0      	movs	r3, #224	@ 0xe0
 8001312:	01db      	lsls	r3, r3, #7
 8001314:	4013      	ands	r3, r2
}
 8001316:	0018      	movs	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40021000 	.word	0x40021000

08001320 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b088      	sub	sp, #32
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d101      	bne.n	8001332 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e2fe      	b.n	8001930 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2201      	movs	r2, #1
 8001338:	4013      	ands	r3, r2
 800133a:	d100      	bne.n	800133e <HAL_RCC_OscConfig+0x1e>
 800133c:	e07c      	b.n	8001438 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800133e:	4bc3      	ldr	r3, [pc, #780]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	2238      	movs	r2, #56	@ 0x38
 8001344:	4013      	ands	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001348:	4bc0      	ldr	r3, [pc, #768]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	2203      	movs	r2, #3
 800134e:	4013      	ands	r3, r2
 8001350:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	2b10      	cmp	r3, #16
 8001356:	d102      	bne.n	800135e <HAL_RCC_OscConfig+0x3e>
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	2b03      	cmp	r3, #3
 800135c:	d002      	beq.n	8001364 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	2b08      	cmp	r3, #8
 8001362:	d10b      	bne.n	800137c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001364:	4bb9      	ldr	r3, [pc, #740]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	2380      	movs	r3, #128	@ 0x80
 800136a:	029b      	lsls	r3, r3, #10
 800136c:	4013      	ands	r3, r2
 800136e:	d062      	beq.n	8001436 <HAL_RCC_OscConfig+0x116>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d15e      	bne.n	8001436 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e2d9      	b.n	8001930 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685a      	ldr	r2, [r3, #4]
 8001380:	2380      	movs	r3, #128	@ 0x80
 8001382:	025b      	lsls	r3, r3, #9
 8001384:	429a      	cmp	r2, r3
 8001386:	d107      	bne.n	8001398 <HAL_RCC_OscConfig+0x78>
 8001388:	4bb0      	ldr	r3, [pc, #704]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	4baf      	ldr	r3, [pc, #700]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 800138e:	2180      	movs	r1, #128	@ 0x80
 8001390:	0249      	lsls	r1, r1, #9
 8001392:	430a      	orrs	r2, r1
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	e020      	b.n	80013da <HAL_RCC_OscConfig+0xba>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685a      	ldr	r2, [r3, #4]
 800139c:	23a0      	movs	r3, #160	@ 0xa0
 800139e:	02db      	lsls	r3, r3, #11
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d10e      	bne.n	80013c2 <HAL_RCC_OscConfig+0xa2>
 80013a4:	4ba9      	ldr	r3, [pc, #676]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	4ba8      	ldr	r3, [pc, #672]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 80013aa:	2180      	movs	r1, #128	@ 0x80
 80013ac:	02c9      	lsls	r1, r1, #11
 80013ae:	430a      	orrs	r2, r1
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	4ba6      	ldr	r3, [pc, #664]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	4ba5      	ldr	r3, [pc, #660]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 80013b8:	2180      	movs	r1, #128	@ 0x80
 80013ba:	0249      	lsls	r1, r1, #9
 80013bc:	430a      	orrs	r2, r1
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	e00b      	b.n	80013da <HAL_RCC_OscConfig+0xba>
 80013c2:	4ba2      	ldr	r3, [pc, #648]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	4ba1      	ldr	r3, [pc, #644]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 80013c8:	49a1      	ldr	r1, [pc, #644]	@ (8001650 <HAL_RCC_OscConfig+0x330>)
 80013ca:	400a      	ands	r2, r1
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	4b9f      	ldr	r3, [pc, #636]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	4b9e      	ldr	r3, [pc, #632]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 80013d4:	499f      	ldr	r1, [pc, #636]	@ (8001654 <HAL_RCC_OscConfig+0x334>)
 80013d6:	400a      	ands	r2, r1
 80013d8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d014      	beq.n	800140c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e2:	f7ff fc1b 	bl	8000c1c <HAL_GetTick>
 80013e6:	0003      	movs	r3, r0
 80013e8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013ea:	e008      	b.n	80013fe <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013ec:	f7ff fc16 	bl	8000c1c <HAL_GetTick>
 80013f0:	0002      	movs	r2, r0
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b64      	cmp	r3, #100	@ 0x64
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e298      	b.n	8001930 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013fe:	4b93      	ldr	r3, [pc, #588]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	2380      	movs	r3, #128	@ 0x80
 8001404:	029b      	lsls	r3, r3, #10
 8001406:	4013      	ands	r3, r2
 8001408:	d0f0      	beq.n	80013ec <HAL_RCC_OscConfig+0xcc>
 800140a:	e015      	b.n	8001438 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800140c:	f7ff fc06 	bl	8000c1c <HAL_GetTick>
 8001410:	0003      	movs	r3, r0
 8001412:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001414:	e008      	b.n	8001428 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001416:	f7ff fc01 	bl	8000c1c <HAL_GetTick>
 800141a:	0002      	movs	r2, r0
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b64      	cmp	r3, #100	@ 0x64
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e283      	b.n	8001930 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001428:	4b88      	ldr	r3, [pc, #544]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	2380      	movs	r3, #128	@ 0x80
 800142e:	029b      	lsls	r3, r3, #10
 8001430:	4013      	ands	r3, r2
 8001432:	d1f0      	bne.n	8001416 <HAL_RCC_OscConfig+0xf6>
 8001434:	e000      	b.n	8001438 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001436:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2202      	movs	r2, #2
 800143e:	4013      	ands	r3, r2
 8001440:	d100      	bne.n	8001444 <HAL_RCC_OscConfig+0x124>
 8001442:	e099      	b.n	8001578 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001444:	4b81      	ldr	r3, [pc, #516]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	2238      	movs	r2, #56	@ 0x38
 800144a:	4013      	ands	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800144e:	4b7f      	ldr	r3, [pc, #508]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 8001450:	68db      	ldr	r3, [r3, #12]
 8001452:	2203      	movs	r2, #3
 8001454:	4013      	ands	r3, r2
 8001456:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	2b10      	cmp	r3, #16
 800145c:	d102      	bne.n	8001464 <HAL_RCC_OscConfig+0x144>
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	2b02      	cmp	r3, #2
 8001462:	d002      	beq.n	800146a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d135      	bne.n	80014d6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800146a:	4b78      	ldr	r3, [pc, #480]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	2380      	movs	r3, #128	@ 0x80
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	4013      	ands	r3, r2
 8001474:	d005      	beq.n	8001482 <HAL_RCC_OscConfig+0x162>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e256      	b.n	8001930 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001482:	4b72      	ldr	r3, [pc, #456]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	4a74      	ldr	r2, [pc, #464]	@ (8001658 <HAL_RCC_OscConfig+0x338>)
 8001488:	4013      	ands	r3, r2
 800148a:	0019      	movs	r1, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	695b      	ldr	r3, [r3, #20]
 8001490:	021a      	lsls	r2, r3, #8
 8001492:	4b6e      	ldr	r3, [pc, #440]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 8001494:	430a      	orrs	r2, r1
 8001496:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d112      	bne.n	80014c4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800149e:	4b6b      	ldr	r3, [pc, #428]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a6e      	ldr	r2, [pc, #440]	@ (800165c <HAL_RCC_OscConfig+0x33c>)
 80014a4:	4013      	ands	r3, r2
 80014a6:	0019      	movs	r1, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	691a      	ldr	r2, [r3, #16]
 80014ac:	4b67      	ldr	r3, [pc, #412]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 80014ae:	430a      	orrs	r2, r1
 80014b0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80014b2:	4b66      	ldr	r3, [pc, #408]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	0adb      	lsrs	r3, r3, #11
 80014b8:	2207      	movs	r2, #7
 80014ba:	4013      	ands	r3, r2
 80014bc:	4a68      	ldr	r2, [pc, #416]	@ (8001660 <HAL_RCC_OscConfig+0x340>)
 80014be:	40da      	lsrs	r2, r3
 80014c0:	4b68      	ldr	r3, [pc, #416]	@ (8001664 <HAL_RCC_OscConfig+0x344>)
 80014c2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80014c4:	4b68      	ldr	r3, [pc, #416]	@ (8001668 <HAL_RCC_OscConfig+0x348>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	0018      	movs	r0, r3
 80014ca:	f7ff fb4b 	bl	8000b64 <HAL_InitTick>
 80014ce:	1e03      	subs	r3, r0, #0
 80014d0:	d051      	beq.n	8001576 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e22c      	b.n	8001930 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d030      	beq.n	8001540 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80014de:	4b5b      	ldr	r3, [pc, #364]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a5e      	ldr	r2, [pc, #376]	@ (800165c <HAL_RCC_OscConfig+0x33c>)
 80014e4:	4013      	ands	r3, r2
 80014e6:	0019      	movs	r1, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	691a      	ldr	r2, [r3, #16]
 80014ec:	4b57      	ldr	r3, [pc, #348]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 80014ee:	430a      	orrs	r2, r1
 80014f0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80014f2:	4b56      	ldr	r3, [pc, #344]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	4b55      	ldr	r3, [pc, #340]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 80014f8:	2180      	movs	r1, #128	@ 0x80
 80014fa:	0049      	lsls	r1, r1, #1
 80014fc:	430a      	orrs	r2, r1
 80014fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001500:	f7ff fb8c 	bl	8000c1c <HAL_GetTick>
 8001504:	0003      	movs	r3, r0
 8001506:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001508:	e008      	b.n	800151c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800150a:	f7ff fb87 	bl	8000c1c <HAL_GetTick>
 800150e:	0002      	movs	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e209      	b.n	8001930 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800151c:	4b4b      	ldr	r3, [pc, #300]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	2380      	movs	r3, #128	@ 0x80
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	4013      	ands	r3, r2
 8001526:	d0f0      	beq.n	800150a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001528:	4b48      	ldr	r3, [pc, #288]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	4a4a      	ldr	r2, [pc, #296]	@ (8001658 <HAL_RCC_OscConfig+0x338>)
 800152e:	4013      	ands	r3, r2
 8001530:	0019      	movs	r1, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	695b      	ldr	r3, [r3, #20]
 8001536:	021a      	lsls	r2, r3, #8
 8001538:	4b44      	ldr	r3, [pc, #272]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 800153a:	430a      	orrs	r2, r1
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	e01b      	b.n	8001578 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001540:	4b42      	ldr	r3, [pc, #264]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	4b41      	ldr	r3, [pc, #260]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 8001546:	4949      	ldr	r1, [pc, #292]	@ (800166c <HAL_RCC_OscConfig+0x34c>)
 8001548:	400a      	ands	r2, r1
 800154a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800154c:	f7ff fb66 	bl	8000c1c <HAL_GetTick>
 8001550:	0003      	movs	r3, r0
 8001552:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001554:	e008      	b.n	8001568 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001556:	f7ff fb61 	bl	8000c1c <HAL_GetTick>
 800155a:	0002      	movs	r2, r0
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d901      	bls.n	8001568 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e1e3      	b.n	8001930 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001568:	4b38      	ldr	r3, [pc, #224]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	2380      	movs	r3, #128	@ 0x80
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	4013      	ands	r3, r2
 8001572:	d1f0      	bne.n	8001556 <HAL_RCC_OscConfig+0x236>
 8001574:	e000      	b.n	8001578 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001576:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2208      	movs	r2, #8
 800157e:	4013      	ands	r3, r2
 8001580:	d047      	beq.n	8001612 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001582:	4b32      	ldr	r3, [pc, #200]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	2238      	movs	r2, #56	@ 0x38
 8001588:	4013      	ands	r3, r2
 800158a:	2b18      	cmp	r3, #24
 800158c:	d10a      	bne.n	80015a4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800158e:	4b2f      	ldr	r3, [pc, #188]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 8001590:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001592:	2202      	movs	r2, #2
 8001594:	4013      	ands	r3, r2
 8001596:	d03c      	beq.n	8001612 <HAL_RCC_OscConfig+0x2f2>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d138      	bne.n	8001612 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e1c5      	b.n	8001930 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d019      	beq.n	80015e0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80015ac:	4b27      	ldr	r3, [pc, #156]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 80015ae:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80015b0:	4b26      	ldr	r3, [pc, #152]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 80015b2:	2101      	movs	r1, #1
 80015b4:	430a      	orrs	r2, r1
 80015b6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b8:	f7ff fb30 	bl	8000c1c <HAL_GetTick>
 80015bc:	0003      	movs	r3, r0
 80015be:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015c0:	e008      	b.n	80015d4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015c2:	f7ff fb2b 	bl	8000c1c <HAL_GetTick>
 80015c6:	0002      	movs	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e1ad      	b.n	8001930 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015d4:	4b1d      	ldr	r3, [pc, #116]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 80015d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015d8:	2202      	movs	r2, #2
 80015da:	4013      	ands	r3, r2
 80015dc:	d0f1      	beq.n	80015c2 <HAL_RCC_OscConfig+0x2a2>
 80015de:	e018      	b.n	8001612 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80015e0:	4b1a      	ldr	r3, [pc, #104]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 80015e2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80015e4:	4b19      	ldr	r3, [pc, #100]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 80015e6:	2101      	movs	r1, #1
 80015e8:	438a      	bics	r2, r1
 80015ea:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ec:	f7ff fb16 	bl	8000c1c <HAL_GetTick>
 80015f0:	0003      	movs	r3, r0
 80015f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015f4:	e008      	b.n	8001608 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015f6:	f7ff fb11 	bl	8000c1c <HAL_GetTick>
 80015fa:	0002      	movs	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e193      	b.n	8001930 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001608:	4b10      	ldr	r3, [pc, #64]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 800160a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800160c:	2202      	movs	r2, #2
 800160e:	4013      	ands	r3, r2
 8001610:	d1f1      	bne.n	80015f6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2204      	movs	r2, #4
 8001618:	4013      	ands	r3, r2
 800161a:	d100      	bne.n	800161e <HAL_RCC_OscConfig+0x2fe>
 800161c:	e0c6      	b.n	80017ac <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800161e:	231f      	movs	r3, #31
 8001620:	18fb      	adds	r3, r7, r3
 8001622:	2200      	movs	r2, #0
 8001624:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001626:	4b09      	ldr	r3, [pc, #36]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	2238      	movs	r2, #56	@ 0x38
 800162c:	4013      	ands	r3, r2
 800162e:	2b20      	cmp	r3, #32
 8001630:	d11e      	bne.n	8001670 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001632:	4b06      	ldr	r3, [pc, #24]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 8001634:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001636:	2202      	movs	r2, #2
 8001638:	4013      	ands	r3, r2
 800163a:	d100      	bne.n	800163e <HAL_RCC_OscConfig+0x31e>
 800163c:	e0b6      	b.n	80017ac <HAL_RCC_OscConfig+0x48c>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d000      	beq.n	8001648 <HAL_RCC_OscConfig+0x328>
 8001646:	e0b1      	b.n	80017ac <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e171      	b.n	8001930 <HAL_RCC_OscConfig+0x610>
 800164c:	40021000 	.word	0x40021000
 8001650:	fffeffff 	.word	0xfffeffff
 8001654:	fffbffff 	.word	0xfffbffff
 8001658:	ffff80ff 	.word	0xffff80ff
 800165c:	ffffc7ff 	.word	0xffffc7ff
 8001660:	00f42400 	.word	0x00f42400
 8001664:	20000000 	.word	0x20000000
 8001668:	20000004 	.word	0x20000004
 800166c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001670:	4bb1      	ldr	r3, [pc, #708]	@ (8001938 <HAL_RCC_OscConfig+0x618>)
 8001672:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001674:	2380      	movs	r3, #128	@ 0x80
 8001676:	055b      	lsls	r3, r3, #21
 8001678:	4013      	ands	r3, r2
 800167a:	d101      	bne.n	8001680 <HAL_RCC_OscConfig+0x360>
 800167c:	2301      	movs	r3, #1
 800167e:	e000      	b.n	8001682 <HAL_RCC_OscConfig+0x362>
 8001680:	2300      	movs	r3, #0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d011      	beq.n	80016aa <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001686:	4bac      	ldr	r3, [pc, #688]	@ (8001938 <HAL_RCC_OscConfig+0x618>)
 8001688:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800168a:	4bab      	ldr	r3, [pc, #684]	@ (8001938 <HAL_RCC_OscConfig+0x618>)
 800168c:	2180      	movs	r1, #128	@ 0x80
 800168e:	0549      	lsls	r1, r1, #21
 8001690:	430a      	orrs	r2, r1
 8001692:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001694:	4ba8      	ldr	r3, [pc, #672]	@ (8001938 <HAL_RCC_OscConfig+0x618>)
 8001696:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001698:	2380      	movs	r3, #128	@ 0x80
 800169a:	055b      	lsls	r3, r3, #21
 800169c:	4013      	ands	r3, r2
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80016a2:	231f      	movs	r3, #31
 80016a4:	18fb      	adds	r3, r7, r3
 80016a6:	2201      	movs	r2, #1
 80016a8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016aa:	4ba4      	ldr	r3, [pc, #656]	@ (800193c <HAL_RCC_OscConfig+0x61c>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	2380      	movs	r3, #128	@ 0x80
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	4013      	ands	r3, r2
 80016b4:	d11a      	bne.n	80016ec <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016b6:	4ba1      	ldr	r3, [pc, #644]	@ (800193c <HAL_RCC_OscConfig+0x61c>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	4ba0      	ldr	r3, [pc, #640]	@ (800193c <HAL_RCC_OscConfig+0x61c>)
 80016bc:	2180      	movs	r1, #128	@ 0x80
 80016be:	0049      	lsls	r1, r1, #1
 80016c0:	430a      	orrs	r2, r1
 80016c2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80016c4:	f7ff faaa 	bl	8000c1c <HAL_GetTick>
 80016c8:	0003      	movs	r3, r0
 80016ca:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ce:	f7ff faa5 	bl	8000c1c <HAL_GetTick>
 80016d2:	0002      	movs	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e127      	b.n	8001930 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016e0:	4b96      	ldr	r3, [pc, #600]	@ (800193c <HAL_RCC_OscConfig+0x61c>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	2380      	movs	r3, #128	@ 0x80
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	4013      	ands	r3, r2
 80016ea:	d0f0      	beq.n	80016ce <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d106      	bne.n	8001702 <HAL_RCC_OscConfig+0x3e2>
 80016f4:	4b90      	ldr	r3, [pc, #576]	@ (8001938 <HAL_RCC_OscConfig+0x618>)
 80016f6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80016f8:	4b8f      	ldr	r3, [pc, #572]	@ (8001938 <HAL_RCC_OscConfig+0x618>)
 80016fa:	2101      	movs	r1, #1
 80016fc:	430a      	orrs	r2, r1
 80016fe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001700:	e01c      	b.n	800173c <HAL_RCC_OscConfig+0x41c>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	2b05      	cmp	r3, #5
 8001708:	d10c      	bne.n	8001724 <HAL_RCC_OscConfig+0x404>
 800170a:	4b8b      	ldr	r3, [pc, #556]	@ (8001938 <HAL_RCC_OscConfig+0x618>)
 800170c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800170e:	4b8a      	ldr	r3, [pc, #552]	@ (8001938 <HAL_RCC_OscConfig+0x618>)
 8001710:	2104      	movs	r1, #4
 8001712:	430a      	orrs	r2, r1
 8001714:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001716:	4b88      	ldr	r3, [pc, #544]	@ (8001938 <HAL_RCC_OscConfig+0x618>)
 8001718:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800171a:	4b87      	ldr	r3, [pc, #540]	@ (8001938 <HAL_RCC_OscConfig+0x618>)
 800171c:	2101      	movs	r1, #1
 800171e:	430a      	orrs	r2, r1
 8001720:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001722:	e00b      	b.n	800173c <HAL_RCC_OscConfig+0x41c>
 8001724:	4b84      	ldr	r3, [pc, #528]	@ (8001938 <HAL_RCC_OscConfig+0x618>)
 8001726:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001728:	4b83      	ldr	r3, [pc, #524]	@ (8001938 <HAL_RCC_OscConfig+0x618>)
 800172a:	2101      	movs	r1, #1
 800172c:	438a      	bics	r2, r1
 800172e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001730:	4b81      	ldr	r3, [pc, #516]	@ (8001938 <HAL_RCC_OscConfig+0x618>)
 8001732:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001734:	4b80      	ldr	r3, [pc, #512]	@ (8001938 <HAL_RCC_OscConfig+0x618>)
 8001736:	2104      	movs	r1, #4
 8001738:	438a      	bics	r2, r1
 800173a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d014      	beq.n	800176e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001744:	f7ff fa6a 	bl	8000c1c <HAL_GetTick>
 8001748:	0003      	movs	r3, r0
 800174a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800174c:	e009      	b.n	8001762 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800174e:	f7ff fa65 	bl	8000c1c <HAL_GetTick>
 8001752:	0002      	movs	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	4a79      	ldr	r2, [pc, #484]	@ (8001940 <HAL_RCC_OscConfig+0x620>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e0e6      	b.n	8001930 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001762:	4b75      	ldr	r3, [pc, #468]	@ (8001938 <HAL_RCC_OscConfig+0x618>)
 8001764:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001766:	2202      	movs	r2, #2
 8001768:	4013      	ands	r3, r2
 800176a:	d0f0      	beq.n	800174e <HAL_RCC_OscConfig+0x42e>
 800176c:	e013      	b.n	8001796 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800176e:	f7ff fa55 	bl	8000c1c <HAL_GetTick>
 8001772:	0003      	movs	r3, r0
 8001774:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001776:	e009      	b.n	800178c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001778:	f7ff fa50 	bl	8000c1c <HAL_GetTick>
 800177c:	0002      	movs	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	4a6f      	ldr	r2, [pc, #444]	@ (8001940 <HAL_RCC_OscConfig+0x620>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e0d1      	b.n	8001930 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800178c:	4b6a      	ldr	r3, [pc, #424]	@ (8001938 <HAL_RCC_OscConfig+0x618>)
 800178e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001790:	2202      	movs	r2, #2
 8001792:	4013      	ands	r3, r2
 8001794:	d1f0      	bne.n	8001778 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001796:	231f      	movs	r3, #31
 8001798:	18fb      	adds	r3, r7, r3
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d105      	bne.n	80017ac <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80017a0:	4b65      	ldr	r3, [pc, #404]	@ (8001938 <HAL_RCC_OscConfig+0x618>)
 80017a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80017a4:	4b64      	ldr	r3, [pc, #400]	@ (8001938 <HAL_RCC_OscConfig+0x618>)
 80017a6:	4967      	ldr	r1, [pc, #412]	@ (8001944 <HAL_RCC_OscConfig+0x624>)
 80017a8:	400a      	ands	r2, r1
 80017aa:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	69db      	ldr	r3, [r3, #28]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d100      	bne.n	80017b6 <HAL_RCC_OscConfig+0x496>
 80017b4:	e0bb      	b.n	800192e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017b6:	4b60      	ldr	r3, [pc, #384]	@ (8001938 <HAL_RCC_OscConfig+0x618>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	2238      	movs	r2, #56	@ 0x38
 80017bc:	4013      	ands	r3, r2
 80017be:	2b10      	cmp	r3, #16
 80017c0:	d100      	bne.n	80017c4 <HAL_RCC_OscConfig+0x4a4>
 80017c2:	e07b      	b.n	80018bc <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	69db      	ldr	r3, [r3, #28]
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d156      	bne.n	800187a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017cc:	4b5a      	ldr	r3, [pc, #360]	@ (8001938 <HAL_RCC_OscConfig+0x618>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	4b59      	ldr	r3, [pc, #356]	@ (8001938 <HAL_RCC_OscConfig+0x618>)
 80017d2:	495d      	ldr	r1, [pc, #372]	@ (8001948 <HAL_RCC_OscConfig+0x628>)
 80017d4:	400a      	ands	r2, r1
 80017d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d8:	f7ff fa20 	bl	8000c1c <HAL_GetTick>
 80017dc:	0003      	movs	r3, r0
 80017de:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017e0:	e008      	b.n	80017f4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017e2:	f7ff fa1b 	bl	8000c1c <HAL_GetTick>
 80017e6:	0002      	movs	r2, r0
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e09d      	b.n	8001930 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017f4:	4b50      	ldr	r3, [pc, #320]	@ (8001938 <HAL_RCC_OscConfig+0x618>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	2380      	movs	r3, #128	@ 0x80
 80017fa:	049b      	lsls	r3, r3, #18
 80017fc:	4013      	ands	r3, r2
 80017fe:	d1f0      	bne.n	80017e2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001800:	4b4d      	ldr	r3, [pc, #308]	@ (8001938 <HAL_RCC_OscConfig+0x618>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	4a51      	ldr	r2, [pc, #324]	@ (800194c <HAL_RCC_OscConfig+0x62c>)
 8001806:	4013      	ands	r3, r2
 8001808:	0019      	movs	r1, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a1a      	ldr	r2, [r3, #32]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001812:	431a      	orrs	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001818:	021b      	lsls	r3, r3, #8
 800181a:	431a      	orrs	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001820:	431a      	orrs	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001826:	431a      	orrs	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800182c:	431a      	orrs	r2, r3
 800182e:	4b42      	ldr	r3, [pc, #264]	@ (8001938 <HAL_RCC_OscConfig+0x618>)
 8001830:	430a      	orrs	r2, r1
 8001832:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001834:	4b40      	ldr	r3, [pc, #256]	@ (8001938 <HAL_RCC_OscConfig+0x618>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4b3f      	ldr	r3, [pc, #252]	@ (8001938 <HAL_RCC_OscConfig+0x618>)
 800183a:	2180      	movs	r1, #128	@ 0x80
 800183c:	0449      	lsls	r1, r1, #17
 800183e:	430a      	orrs	r2, r1
 8001840:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001842:	4b3d      	ldr	r3, [pc, #244]	@ (8001938 <HAL_RCC_OscConfig+0x618>)
 8001844:	68da      	ldr	r2, [r3, #12]
 8001846:	4b3c      	ldr	r3, [pc, #240]	@ (8001938 <HAL_RCC_OscConfig+0x618>)
 8001848:	2180      	movs	r1, #128	@ 0x80
 800184a:	0549      	lsls	r1, r1, #21
 800184c:	430a      	orrs	r2, r1
 800184e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001850:	f7ff f9e4 	bl	8000c1c <HAL_GetTick>
 8001854:	0003      	movs	r3, r0
 8001856:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800185a:	f7ff f9df 	bl	8000c1c <HAL_GetTick>
 800185e:	0002      	movs	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e061      	b.n	8001930 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800186c:	4b32      	ldr	r3, [pc, #200]	@ (8001938 <HAL_RCC_OscConfig+0x618>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	2380      	movs	r3, #128	@ 0x80
 8001872:	049b      	lsls	r3, r3, #18
 8001874:	4013      	ands	r3, r2
 8001876:	d0f0      	beq.n	800185a <HAL_RCC_OscConfig+0x53a>
 8001878:	e059      	b.n	800192e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800187a:	4b2f      	ldr	r3, [pc, #188]	@ (8001938 <HAL_RCC_OscConfig+0x618>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	4b2e      	ldr	r3, [pc, #184]	@ (8001938 <HAL_RCC_OscConfig+0x618>)
 8001880:	4931      	ldr	r1, [pc, #196]	@ (8001948 <HAL_RCC_OscConfig+0x628>)
 8001882:	400a      	ands	r2, r1
 8001884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001886:	f7ff f9c9 	bl	8000c1c <HAL_GetTick>
 800188a:	0003      	movs	r3, r0
 800188c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001890:	f7ff f9c4 	bl	8000c1c <HAL_GetTick>
 8001894:	0002      	movs	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b02      	cmp	r3, #2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e046      	b.n	8001930 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018a2:	4b25      	ldr	r3, [pc, #148]	@ (8001938 <HAL_RCC_OscConfig+0x618>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	2380      	movs	r3, #128	@ 0x80
 80018a8:	049b      	lsls	r3, r3, #18
 80018aa:	4013      	ands	r3, r2
 80018ac:	d1f0      	bne.n	8001890 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80018ae:	4b22      	ldr	r3, [pc, #136]	@ (8001938 <HAL_RCC_OscConfig+0x618>)
 80018b0:	68da      	ldr	r2, [r3, #12]
 80018b2:	4b21      	ldr	r3, [pc, #132]	@ (8001938 <HAL_RCC_OscConfig+0x618>)
 80018b4:	4926      	ldr	r1, [pc, #152]	@ (8001950 <HAL_RCC_OscConfig+0x630>)
 80018b6:	400a      	ands	r2, r1
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	e038      	b.n	800192e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	69db      	ldr	r3, [r3, #28]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d101      	bne.n	80018c8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e033      	b.n	8001930 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80018c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001938 <HAL_RCC_OscConfig+0x618>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	2203      	movs	r2, #3
 80018d2:	401a      	ands	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d126      	bne.n	800192a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	2270      	movs	r2, #112	@ 0x70
 80018e0:	401a      	ands	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d11f      	bne.n	800192a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018ea:	697a      	ldr	r2, [r7, #20]
 80018ec:	23fe      	movs	r3, #254	@ 0xfe
 80018ee:	01db      	lsls	r3, r3, #7
 80018f0:	401a      	ands	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018f6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d116      	bne.n	800192a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018fc:	697a      	ldr	r2, [r7, #20]
 80018fe:	23f8      	movs	r3, #248	@ 0xf8
 8001900:	039b      	lsls	r3, r3, #14
 8001902:	401a      	ands	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001908:	429a      	cmp	r2, r3
 800190a:	d10e      	bne.n	800192a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800190c:	697a      	ldr	r2, [r7, #20]
 800190e:	23e0      	movs	r3, #224	@ 0xe0
 8001910:	051b      	lsls	r3, r3, #20
 8001912:	401a      	ands	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001918:	429a      	cmp	r2, r3
 800191a:	d106      	bne.n	800192a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	0f5b      	lsrs	r3, r3, #29
 8001920:	075a      	lsls	r2, r3, #29
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001926:	429a      	cmp	r2, r3
 8001928:	d001      	beq.n	800192e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e000      	b.n	8001930 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800192e:	2300      	movs	r3, #0
}
 8001930:	0018      	movs	r0, r3
 8001932:	46bd      	mov	sp, r7
 8001934:	b008      	add	sp, #32
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40021000 	.word	0x40021000
 800193c:	40007000 	.word	0x40007000
 8001940:	00001388 	.word	0x00001388
 8001944:	efffffff 	.word	0xefffffff
 8001948:	feffffff 	.word	0xfeffffff
 800194c:	11c1808c 	.word	0x11c1808c
 8001950:	eefefffc 	.word	0xeefefffc

08001954 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e0e9      	b.n	8001b3c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001968:	4b76      	ldr	r3, [pc, #472]	@ (8001b44 <HAL_RCC_ClockConfig+0x1f0>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2207      	movs	r2, #7
 800196e:	4013      	ands	r3, r2
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	429a      	cmp	r2, r3
 8001974:	d91e      	bls.n	80019b4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001976:	4b73      	ldr	r3, [pc, #460]	@ (8001b44 <HAL_RCC_ClockConfig+0x1f0>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2207      	movs	r2, #7
 800197c:	4393      	bics	r3, r2
 800197e:	0019      	movs	r1, r3
 8001980:	4b70      	ldr	r3, [pc, #448]	@ (8001b44 <HAL_RCC_ClockConfig+0x1f0>)
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	430a      	orrs	r2, r1
 8001986:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001988:	f7ff f948 	bl	8000c1c <HAL_GetTick>
 800198c:	0003      	movs	r3, r0
 800198e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001990:	e009      	b.n	80019a6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001992:	f7ff f943 	bl	8000c1c <HAL_GetTick>
 8001996:	0002      	movs	r2, r0
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	4a6a      	ldr	r2, [pc, #424]	@ (8001b48 <HAL_RCC_ClockConfig+0x1f4>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e0ca      	b.n	8001b3c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019a6:	4b67      	ldr	r3, [pc, #412]	@ (8001b44 <HAL_RCC_ClockConfig+0x1f0>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2207      	movs	r2, #7
 80019ac:	4013      	ands	r3, r2
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d1ee      	bne.n	8001992 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2202      	movs	r2, #2
 80019ba:	4013      	ands	r3, r2
 80019bc:	d015      	beq.n	80019ea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2204      	movs	r2, #4
 80019c4:	4013      	ands	r3, r2
 80019c6:	d006      	beq.n	80019d6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80019c8:	4b60      	ldr	r3, [pc, #384]	@ (8001b4c <HAL_RCC_ClockConfig+0x1f8>)
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	4b5f      	ldr	r3, [pc, #380]	@ (8001b4c <HAL_RCC_ClockConfig+0x1f8>)
 80019ce:	21e0      	movs	r1, #224	@ 0xe0
 80019d0:	01c9      	lsls	r1, r1, #7
 80019d2:	430a      	orrs	r2, r1
 80019d4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019d6:	4b5d      	ldr	r3, [pc, #372]	@ (8001b4c <HAL_RCC_ClockConfig+0x1f8>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	4a5d      	ldr	r2, [pc, #372]	@ (8001b50 <HAL_RCC_ClockConfig+0x1fc>)
 80019dc:	4013      	ands	r3, r2
 80019de:	0019      	movs	r1, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689a      	ldr	r2, [r3, #8]
 80019e4:	4b59      	ldr	r3, [pc, #356]	@ (8001b4c <HAL_RCC_ClockConfig+0x1f8>)
 80019e6:	430a      	orrs	r2, r1
 80019e8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2201      	movs	r2, #1
 80019f0:	4013      	ands	r3, r2
 80019f2:	d057      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d107      	bne.n	8001a0c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019fc:	4b53      	ldr	r3, [pc, #332]	@ (8001b4c <HAL_RCC_ClockConfig+0x1f8>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	2380      	movs	r3, #128	@ 0x80
 8001a02:	029b      	lsls	r3, r3, #10
 8001a04:	4013      	ands	r3, r2
 8001a06:	d12b      	bne.n	8001a60 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e097      	b.n	8001b3c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d107      	bne.n	8001a24 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a14:	4b4d      	ldr	r3, [pc, #308]	@ (8001b4c <HAL_RCC_ClockConfig+0x1f8>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	2380      	movs	r3, #128	@ 0x80
 8001a1a:	049b      	lsls	r3, r3, #18
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	d11f      	bne.n	8001a60 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e08b      	b.n	8001b3c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d107      	bne.n	8001a3c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a2c:	4b47      	ldr	r3, [pc, #284]	@ (8001b4c <HAL_RCC_ClockConfig+0x1f8>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	2380      	movs	r3, #128	@ 0x80
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	4013      	ands	r3, r2
 8001a36:	d113      	bne.n	8001a60 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e07f      	b.n	8001b3c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	2b03      	cmp	r3, #3
 8001a42:	d106      	bne.n	8001a52 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a44:	4b41      	ldr	r3, [pc, #260]	@ (8001b4c <HAL_RCC_ClockConfig+0x1f8>)
 8001a46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a48:	2202      	movs	r2, #2
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d108      	bne.n	8001a60 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e074      	b.n	8001b3c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a52:	4b3e      	ldr	r3, [pc, #248]	@ (8001b4c <HAL_RCC_ClockConfig+0x1f8>)
 8001a54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a56:	2202      	movs	r2, #2
 8001a58:	4013      	ands	r3, r2
 8001a5a:	d101      	bne.n	8001a60 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e06d      	b.n	8001b3c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a60:	4b3a      	ldr	r3, [pc, #232]	@ (8001b4c <HAL_RCC_ClockConfig+0x1f8>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	2207      	movs	r2, #7
 8001a66:	4393      	bics	r3, r2
 8001a68:	0019      	movs	r1, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	4b37      	ldr	r3, [pc, #220]	@ (8001b4c <HAL_RCC_ClockConfig+0x1f8>)
 8001a70:	430a      	orrs	r2, r1
 8001a72:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a74:	f7ff f8d2 	bl	8000c1c <HAL_GetTick>
 8001a78:	0003      	movs	r3, r0
 8001a7a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a7c:	e009      	b.n	8001a92 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a7e:	f7ff f8cd 	bl	8000c1c <HAL_GetTick>
 8001a82:	0002      	movs	r2, r0
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	4a2f      	ldr	r2, [pc, #188]	@ (8001b48 <HAL_RCC_ClockConfig+0x1f4>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e054      	b.n	8001b3c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a92:	4b2e      	ldr	r3, [pc, #184]	@ (8001b4c <HAL_RCC_ClockConfig+0x1f8>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	2238      	movs	r2, #56	@ 0x38
 8001a98:	401a      	ands	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d1ec      	bne.n	8001a7e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001aa4:	4b27      	ldr	r3, [pc, #156]	@ (8001b44 <HAL_RCC_ClockConfig+0x1f0>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2207      	movs	r2, #7
 8001aaa:	4013      	ands	r3, r2
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d21e      	bcs.n	8001af0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab2:	4b24      	ldr	r3, [pc, #144]	@ (8001b44 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2207      	movs	r2, #7
 8001ab8:	4393      	bics	r3, r2
 8001aba:	0019      	movs	r1, r3
 8001abc:	4b21      	ldr	r3, [pc, #132]	@ (8001b44 <HAL_RCC_ClockConfig+0x1f0>)
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ac4:	f7ff f8aa 	bl	8000c1c <HAL_GetTick>
 8001ac8:	0003      	movs	r3, r0
 8001aca:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001acc:	e009      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ace:	f7ff f8a5 	bl	8000c1c <HAL_GetTick>
 8001ad2:	0002      	movs	r2, r0
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	4a1b      	ldr	r2, [pc, #108]	@ (8001b48 <HAL_RCC_ClockConfig+0x1f4>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e02c      	b.n	8001b3c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ae2:	4b18      	ldr	r3, [pc, #96]	@ (8001b44 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2207      	movs	r2, #7
 8001ae8:	4013      	ands	r3, r2
 8001aea:	683a      	ldr	r2, [r7, #0]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d1ee      	bne.n	8001ace <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2204      	movs	r2, #4
 8001af6:	4013      	ands	r3, r2
 8001af8:	d009      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001afa:	4b14      	ldr	r3, [pc, #80]	@ (8001b4c <HAL_RCC_ClockConfig+0x1f8>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	4a15      	ldr	r2, [pc, #84]	@ (8001b54 <HAL_RCC_ClockConfig+0x200>)
 8001b00:	4013      	ands	r3, r2
 8001b02:	0019      	movs	r1, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68da      	ldr	r2, [r3, #12]
 8001b08:	4b10      	ldr	r3, [pc, #64]	@ (8001b4c <HAL_RCC_ClockConfig+0x1f8>)
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001b0e:	f000 f829 	bl	8001b64 <HAL_RCC_GetSysClockFreq>
 8001b12:	0001      	movs	r1, r0
 8001b14:	4b0d      	ldr	r3, [pc, #52]	@ (8001b4c <HAL_RCC_ClockConfig+0x1f8>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	0a1b      	lsrs	r3, r3, #8
 8001b1a:	220f      	movs	r2, #15
 8001b1c:	401a      	ands	r2, r3
 8001b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b58 <HAL_RCC_ClockConfig+0x204>)
 8001b20:	0092      	lsls	r2, r2, #2
 8001b22:	58d3      	ldr	r3, [r2, r3]
 8001b24:	221f      	movs	r2, #31
 8001b26:	4013      	ands	r3, r2
 8001b28:	000a      	movs	r2, r1
 8001b2a:	40da      	lsrs	r2, r3
 8001b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b5c <HAL_RCC_ClockConfig+0x208>)
 8001b2e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b30:	4b0b      	ldr	r3, [pc, #44]	@ (8001b60 <HAL_RCC_ClockConfig+0x20c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	0018      	movs	r0, r3
 8001b36:	f7ff f815 	bl	8000b64 <HAL_InitTick>
 8001b3a:	0003      	movs	r3, r0
}
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	b004      	add	sp, #16
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40022000 	.word	0x40022000
 8001b48:	00001388 	.word	0x00001388
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	fffff0ff 	.word	0xfffff0ff
 8001b54:	ffff8fff 	.word	0xffff8fff
 8001b58:	08004f54 	.word	0x08004f54
 8001b5c:	20000000 	.word	0x20000000
 8001b60:	20000004 	.word	0x20000004

08001b64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b6a:	4b3c      	ldr	r3, [pc, #240]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	2238      	movs	r2, #56	@ 0x38
 8001b70:	4013      	ands	r3, r2
 8001b72:	d10f      	bne.n	8001b94 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001b74:	4b39      	ldr	r3, [pc, #228]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	0adb      	lsrs	r3, r3, #11
 8001b7a:	2207      	movs	r2, #7
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	2201      	movs	r2, #1
 8001b80:	409a      	lsls	r2, r3
 8001b82:	0013      	movs	r3, r2
 8001b84:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001b86:	6839      	ldr	r1, [r7, #0]
 8001b88:	4835      	ldr	r0, [pc, #212]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b8a:	f7fe fac5 	bl	8000118 <__udivsi3>
 8001b8e:	0003      	movs	r3, r0
 8001b90:	613b      	str	r3, [r7, #16]
 8001b92:	e05d      	b.n	8001c50 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b94:	4b31      	ldr	r3, [pc, #196]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	2238      	movs	r2, #56	@ 0x38
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	2b08      	cmp	r3, #8
 8001b9e:	d102      	bne.n	8001ba6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ba0:	4b30      	ldr	r3, [pc, #192]	@ (8001c64 <HAL_RCC_GetSysClockFreq+0x100>)
 8001ba2:	613b      	str	r3, [r7, #16]
 8001ba4:	e054      	b.n	8001c50 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ba6:	4b2d      	ldr	r3, [pc, #180]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	2238      	movs	r2, #56	@ 0x38
 8001bac:	4013      	ands	r3, r2
 8001bae:	2b10      	cmp	r3, #16
 8001bb0:	d138      	bne.n	8001c24 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001bb2:	4b2a      	ldr	r3, [pc, #168]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	2203      	movs	r2, #3
 8001bb8:	4013      	ands	r3, r2
 8001bba:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bbc:	4b27      	ldr	r3, [pc, #156]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	091b      	lsrs	r3, r3, #4
 8001bc2:	2207      	movs	r2, #7
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2b03      	cmp	r3, #3
 8001bce:	d10d      	bne.n	8001bec <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bd0:	68b9      	ldr	r1, [r7, #8]
 8001bd2:	4824      	ldr	r0, [pc, #144]	@ (8001c64 <HAL_RCC_GetSysClockFreq+0x100>)
 8001bd4:	f7fe faa0 	bl	8000118 <__udivsi3>
 8001bd8:	0003      	movs	r3, r0
 8001bda:	0019      	movs	r1, r3
 8001bdc:	4b1f      	ldr	r3, [pc, #124]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	0a1b      	lsrs	r3, r3, #8
 8001be2:	227f      	movs	r2, #127	@ 0x7f
 8001be4:	4013      	ands	r3, r2
 8001be6:	434b      	muls	r3, r1
 8001be8:	617b      	str	r3, [r7, #20]
        break;
 8001bea:	e00d      	b.n	8001c08 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001bec:	68b9      	ldr	r1, [r7, #8]
 8001bee:	481c      	ldr	r0, [pc, #112]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001bf0:	f7fe fa92 	bl	8000118 <__udivsi3>
 8001bf4:	0003      	movs	r3, r0
 8001bf6:	0019      	movs	r1, r3
 8001bf8:	4b18      	ldr	r3, [pc, #96]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	0a1b      	lsrs	r3, r3, #8
 8001bfe:	227f      	movs	r2, #127	@ 0x7f
 8001c00:	4013      	ands	r3, r2
 8001c02:	434b      	muls	r3, r1
 8001c04:	617b      	str	r3, [r7, #20]
        break;
 8001c06:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001c08:	4b14      	ldr	r3, [pc, #80]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	0f5b      	lsrs	r3, r3, #29
 8001c0e:	2207      	movs	r2, #7
 8001c10:	4013      	ands	r3, r2
 8001c12:	3301      	adds	r3, #1
 8001c14:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	6978      	ldr	r0, [r7, #20]
 8001c1a:	f7fe fa7d 	bl	8000118 <__udivsi3>
 8001c1e:	0003      	movs	r3, r0
 8001c20:	613b      	str	r3, [r7, #16]
 8001c22:	e015      	b.n	8001c50 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001c24:	4b0d      	ldr	r3, [pc, #52]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	2238      	movs	r2, #56	@ 0x38
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	2b20      	cmp	r3, #32
 8001c2e:	d103      	bne.n	8001c38 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001c30:	2380      	movs	r3, #128	@ 0x80
 8001c32:	021b      	lsls	r3, r3, #8
 8001c34:	613b      	str	r3, [r7, #16]
 8001c36:	e00b      	b.n	8001c50 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001c38:	4b08      	ldr	r3, [pc, #32]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	2238      	movs	r2, #56	@ 0x38
 8001c3e:	4013      	ands	r3, r2
 8001c40:	2b18      	cmp	r3, #24
 8001c42:	d103      	bne.n	8001c4c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001c44:	23fa      	movs	r3, #250	@ 0xfa
 8001c46:	01db      	lsls	r3, r3, #7
 8001c48:	613b      	str	r3, [r7, #16]
 8001c4a:	e001      	b.n	8001c50 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001c50:	693b      	ldr	r3, [r7, #16]
}
 8001c52:	0018      	movs	r0, r3
 8001c54:	46bd      	mov	sp, r7
 8001c56:	b006      	add	sp, #24
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	46c0      	nop			@ (mov r8, r8)
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	00f42400 	.word	0x00f42400
 8001c64:	007a1200 	.word	0x007a1200

08001c68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c6c:	4b02      	ldr	r3, [pc, #8]	@ (8001c78 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
}
 8001c70:	0018      	movs	r0, r3
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	46c0      	nop			@ (mov r8, r8)
 8001c78:	20000000 	.word	0x20000000

08001c7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c7c:	b5b0      	push	{r4, r5, r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001c80:	f7ff fff2 	bl	8001c68 <HAL_RCC_GetHCLKFreq>
 8001c84:	0004      	movs	r4, r0
 8001c86:	f7ff fb3f 	bl	8001308 <LL_RCC_GetAPB1Prescaler>
 8001c8a:	0003      	movs	r3, r0
 8001c8c:	0b1a      	lsrs	r2, r3, #12
 8001c8e:	4b05      	ldr	r3, [pc, #20]	@ (8001ca4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c90:	0092      	lsls	r2, r2, #2
 8001c92:	58d3      	ldr	r3, [r2, r3]
 8001c94:	221f      	movs	r2, #31
 8001c96:	4013      	ands	r3, r2
 8001c98:	40dc      	lsrs	r4, r3
 8001c9a:	0023      	movs	r3, r4
}
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bdb0      	pop	{r4, r5, r7, pc}
 8001ca2:	46c0      	nop			@ (mov r8, r8)
 8001ca4:	08004f94 	.word	0x08004f94

08001ca8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001cb0:	2313      	movs	r3, #19
 8001cb2:	18fb      	adds	r3, r7, r3
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001cb8:	2312      	movs	r3, #18
 8001cba:	18fb      	adds	r3, r7, r3
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	2380      	movs	r3, #128	@ 0x80
 8001cc6:	029b      	lsls	r3, r3, #10
 8001cc8:	4013      	ands	r3, r2
 8001cca:	d100      	bne.n	8001cce <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001ccc:	e0a3      	b.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cce:	2011      	movs	r0, #17
 8001cd0:	183b      	adds	r3, r7, r0
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cd6:	4bc3      	ldr	r3, [pc, #780]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cd8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001cda:	2380      	movs	r3, #128	@ 0x80
 8001cdc:	055b      	lsls	r3, r3, #21
 8001cde:	4013      	ands	r3, r2
 8001ce0:	d110      	bne.n	8001d04 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ce2:	4bc0      	ldr	r3, [pc, #768]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ce4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ce6:	4bbf      	ldr	r3, [pc, #764]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ce8:	2180      	movs	r1, #128	@ 0x80
 8001cea:	0549      	lsls	r1, r1, #21
 8001cec:	430a      	orrs	r2, r1
 8001cee:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001cf0:	4bbc      	ldr	r3, [pc, #752]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cf2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001cf4:	2380      	movs	r3, #128	@ 0x80
 8001cf6:	055b      	lsls	r3, r3, #21
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cfe:	183b      	adds	r3, r7, r0
 8001d00:	2201      	movs	r2, #1
 8001d02:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d04:	4bb8      	ldr	r3, [pc, #736]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	4bb7      	ldr	r3, [pc, #732]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001d0a:	2180      	movs	r1, #128	@ 0x80
 8001d0c:	0049      	lsls	r1, r1, #1
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d12:	f7fe ff83 	bl	8000c1c <HAL_GetTick>
 8001d16:	0003      	movs	r3, r0
 8001d18:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d1a:	e00b      	b.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d1c:	f7fe ff7e 	bl	8000c1c <HAL_GetTick>
 8001d20:	0002      	movs	r2, r0
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d904      	bls.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001d2a:	2313      	movs	r3, #19
 8001d2c:	18fb      	adds	r3, r7, r3
 8001d2e:	2203      	movs	r2, #3
 8001d30:	701a      	strb	r2, [r3, #0]
        break;
 8001d32:	e005      	b.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d34:	4bac      	ldr	r3, [pc, #688]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	2380      	movs	r3, #128	@ 0x80
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d0ed      	beq.n	8001d1c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001d40:	2313      	movs	r3, #19
 8001d42:	18fb      	adds	r3, r7, r3
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d154      	bne.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001d4a:	4ba6      	ldr	r3, [pc, #664]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d4c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d4e:	23c0      	movs	r3, #192	@ 0xc0
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	4013      	ands	r3, r2
 8001d54:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d019      	beq.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d60:	697a      	ldr	r2, [r7, #20]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d014      	beq.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001d66:	4b9f      	ldr	r3, [pc, #636]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d6a:	4aa0      	ldr	r2, [pc, #640]	@ (8001fec <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001d70:	4b9c      	ldr	r3, [pc, #624]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d72:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d74:	4b9b      	ldr	r3, [pc, #620]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d76:	2180      	movs	r1, #128	@ 0x80
 8001d78:	0249      	lsls	r1, r1, #9
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001d7e:	4b99      	ldr	r3, [pc, #612]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d80:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d82:	4b98      	ldr	r3, [pc, #608]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d84:	499a      	ldr	r1, [pc, #616]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8001d86:	400a      	ands	r2, r1
 8001d88:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001d8a:	4b96      	ldr	r3, [pc, #600]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d8c:	697a      	ldr	r2, [r7, #20]
 8001d8e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	2201      	movs	r2, #1
 8001d94:	4013      	ands	r3, r2
 8001d96:	d016      	beq.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d98:	f7fe ff40 	bl	8000c1c <HAL_GetTick>
 8001d9c:	0003      	movs	r3, r0
 8001d9e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001da0:	e00c      	b.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001da2:	f7fe ff3b 	bl	8000c1c <HAL_GetTick>
 8001da6:	0002      	movs	r2, r0
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	4a91      	ldr	r2, [pc, #580]	@ (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d904      	bls.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001db2:	2313      	movs	r3, #19
 8001db4:	18fb      	adds	r3, r7, r3
 8001db6:	2203      	movs	r2, #3
 8001db8:	701a      	strb	r2, [r3, #0]
            break;
 8001dba:	e004      	b.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dbc:	4b89      	ldr	r3, [pc, #548]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dc0:	2202      	movs	r2, #2
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	d0ed      	beq.n	8001da2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001dc6:	2313      	movs	r3, #19
 8001dc8:	18fb      	adds	r3, r7, r3
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d10a      	bne.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001dd0:	4b84      	ldr	r3, [pc, #528]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dd4:	4a85      	ldr	r2, [pc, #532]	@ (8001fec <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	0019      	movs	r1, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001dde:	4b81      	ldr	r3, [pc, #516]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001de0:	430a      	orrs	r2, r1
 8001de2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001de4:	e00c      	b.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001de6:	2312      	movs	r3, #18
 8001de8:	18fb      	adds	r3, r7, r3
 8001dea:	2213      	movs	r2, #19
 8001dec:	18ba      	adds	r2, r7, r2
 8001dee:	7812      	ldrb	r2, [r2, #0]
 8001df0:	701a      	strb	r2, [r3, #0]
 8001df2:	e005      	b.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001df4:	2312      	movs	r3, #18
 8001df6:	18fb      	adds	r3, r7, r3
 8001df8:	2213      	movs	r2, #19
 8001dfa:	18ba      	adds	r2, r7, r2
 8001dfc:	7812      	ldrb	r2, [r2, #0]
 8001dfe:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e00:	2311      	movs	r3, #17
 8001e02:	18fb      	adds	r3, r7, r3
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d105      	bne.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e0a:	4b76      	ldr	r3, [pc, #472]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e0e:	4b75      	ldr	r3, [pc, #468]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e10:	4979      	ldr	r1, [pc, #484]	@ (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8001e12:	400a      	ands	r2, r1
 8001e14:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	d009      	beq.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e20:	4b70      	ldr	r3, [pc, #448]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e24:	2203      	movs	r2, #3
 8001e26:	4393      	bics	r3, r2
 8001e28:	0019      	movs	r1, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	4b6d      	ldr	r3, [pc, #436]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e30:	430a      	orrs	r2, r1
 8001e32:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2202      	movs	r2, #2
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	d009      	beq.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e3e:	4b69      	ldr	r3, [pc, #420]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e42:	220c      	movs	r2, #12
 8001e44:	4393      	bics	r3, r2
 8001e46:	0019      	movs	r1, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	4b65      	ldr	r3, [pc, #404]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2210      	movs	r2, #16
 8001e58:	4013      	ands	r3, r2
 8001e5a:	d009      	beq.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e5c:	4b61      	ldr	r3, [pc, #388]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e60:	4a66      	ldr	r2, [pc, #408]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8001e62:	4013      	ands	r3, r2
 8001e64:	0019      	movs	r1, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68da      	ldr	r2, [r3, #12]
 8001e6a:	4b5e      	ldr	r3, [pc, #376]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	2380      	movs	r3, #128	@ 0x80
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4013      	ands	r3, r2
 8001e7a:	d009      	beq.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e7c:	4b59      	ldr	r3, [pc, #356]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e80:	4a5f      	ldr	r2, [pc, #380]	@ (8002000 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8001e82:	4013      	ands	r3, r2
 8001e84:	0019      	movs	r1, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	699a      	ldr	r2, [r3, #24]
 8001e8a:	4b56      	ldr	r3, [pc, #344]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	2380      	movs	r3, #128	@ 0x80
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	4013      	ands	r3, r2
 8001e9a:	d009      	beq.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001e9c:	4b51      	ldr	r3, [pc, #324]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ea0:	4a58      	ldr	r2, [pc, #352]	@ (8002004 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	0019      	movs	r1, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	69da      	ldr	r2, [r3, #28]
 8001eaa:	4b4e      	ldr	r3, [pc, #312]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001eac:	430a      	orrs	r2, r1
 8001eae:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2220      	movs	r2, #32
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d009      	beq.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001eba:	4b4a      	ldr	r3, [pc, #296]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ebe:	4a52      	ldr	r2, [pc, #328]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	0019      	movs	r1, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	691a      	ldr	r2, [r3, #16]
 8001ec8:	4b46      	ldr	r3, [pc, #280]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	2380      	movs	r3, #128	@ 0x80
 8001ed4:	01db      	lsls	r3, r3, #7
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	d015      	beq.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001eda:	4b42      	ldr	r3, [pc, #264]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001edc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	0899      	lsrs	r1, r3, #2
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a1a      	ldr	r2, [r3, #32]
 8001ee6:	4b3f      	ldr	r3, [pc, #252]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a1a      	ldr	r2, [r3, #32]
 8001ef0:	2380      	movs	r3, #128	@ 0x80
 8001ef2:	05db      	lsls	r3, r3, #23
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d106      	bne.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001ef8:	4b3a      	ldr	r3, [pc, #232]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001efa:	68da      	ldr	r2, [r3, #12]
 8001efc:	4b39      	ldr	r3, [pc, #228]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001efe:	2180      	movs	r1, #128	@ 0x80
 8001f00:	0249      	lsls	r1, r1, #9
 8001f02:	430a      	orrs	r2, r1
 8001f04:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	2380      	movs	r3, #128	@ 0x80
 8001f0c:	031b      	lsls	r3, r3, #12
 8001f0e:	4013      	ands	r3, r2
 8001f10:	d009      	beq.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001f12:	4b34      	ldr	r3, [pc, #208]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f16:	2240      	movs	r2, #64	@ 0x40
 8001f18:	4393      	bics	r3, r2
 8001f1a:	0019      	movs	r1, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f20:	4b30      	ldr	r3, [pc, #192]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f22:	430a      	orrs	r2, r1
 8001f24:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	2380      	movs	r3, #128	@ 0x80
 8001f2c:	039b      	lsls	r3, r3, #14
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d016      	beq.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001f32:	4b2c      	ldr	r3, [pc, #176]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f36:	4a35      	ldr	r2, [pc, #212]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8001f38:	4013      	ands	r3, r2
 8001f3a:	0019      	movs	r1, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f40:	4b28      	ldr	r3, [pc, #160]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f42:	430a      	orrs	r2, r1
 8001f44:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f4a:	2380      	movs	r3, #128	@ 0x80
 8001f4c:	03db      	lsls	r3, r3, #15
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d106      	bne.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001f52:	4b24      	ldr	r3, [pc, #144]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f54:	68da      	ldr	r2, [r3, #12]
 8001f56:	4b23      	ldr	r3, [pc, #140]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f58:	2180      	movs	r1, #128	@ 0x80
 8001f5a:	0449      	lsls	r1, r1, #17
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	2380      	movs	r3, #128	@ 0x80
 8001f66:	03db      	lsls	r3, r3, #15
 8001f68:	4013      	ands	r3, r2
 8001f6a:	d016      	beq.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001f6c:	4b1d      	ldr	r3, [pc, #116]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f70:	4a27      	ldr	r2, [pc, #156]	@ (8002010 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8001f72:	4013      	ands	r3, r2
 8001f74:	0019      	movs	r1, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f7a:	4b1a      	ldr	r3, [pc, #104]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f84:	2380      	movs	r3, #128	@ 0x80
 8001f86:	045b      	lsls	r3, r3, #17
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d106      	bne.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001f8c:	4b15      	ldr	r3, [pc, #84]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f8e:	68da      	ldr	r2, [r3, #12]
 8001f90:	4b14      	ldr	r3, [pc, #80]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f92:	2180      	movs	r1, #128	@ 0x80
 8001f94:	0449      	lsls	r1, r1, #17
 8001f96:	430a      	orrs	r2, r1
 8001f98:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	2380      	movs	r3, #128	@ 0x80
 8001fa0:	011b      	lsls	r3, r3, #4
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	d016      	beq.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001fa6:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001faa:	4a1a      	ldr	r2, [pc, #104]	@ (8002014 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8001fac:	4013      	ands	r3, r2
 8001fae:	0019      	movs	r1, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	695a      	ldr	r2, [r3, #20]
 8001fb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	695a      	ldr	r2, [r3, #20]
 8001fbe:	2380      	movs	r3, #128	@ 0x80
 8001fc0:	01db      	lsls	r3, r3, #7
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d106      	bne.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001fc6:	4b07      	ldr	r3, [pc, #28]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fc8:	68da      	ldr	r2, [r3, #12]
 8001fca:	4b06      	ldr	r3, [pc, #24]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fcc:	2180      	movs	r1, #128	@ 0x80
 8001fce:	0249      	lsls	r1, r1, #9
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001fd4:	2312      	movs	r3, #18
 8001fd6:	18fb      	adds	r3, r7, r3
 8001fd8:	781b      	ldrb	r3, [r3, #0]
}
 8001fda:	0018      	movs	r0, r3
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	b006      	add	sp, #24
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	46c0      	nop			@ (mov r8, r8)
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	40007000 	.word	0x40007000
 8001fec:	fffffcff 	.word	0xfffffcff
 8001ff0:	fffeffff 	.word	0xfffeffff
 8001ff4:	00001388 	.word	0x00001388
 8001ff8:	efffffff 	.word	0xefffffff
 8001ffc:	fffff3ff 	.word	0xfffff3ff
 8002000:	fff3ffff 	.word	0xfff3ffff
 8002004:	ffcfffff 	.word	0xffcfffff
 8002008:	ffffcfff 	.word	0xffffcfff
 800200c:	ffbfffff 	.word	0xffbfffff
 8002010:	feffffff 	.word	0xfeffffff
 8002014:	ffff3fff 	.word	0xffff3fff

08002018 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e046      	b.n	80020b8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2288      	movs	r2, #136	@ 0x88
 800202e:	589b      	ldr	r3, [r3, r2]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d107      	bne.n	8002044 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2284      	movs	r2, #132	@ 0x84
 8002038:	2100      	movs	r1, #0
 800203a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	0018      	movs	r0, r3
 8002040:	f7fe fcde 	bl	8000a00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2288      	movs	r2, #136	@ 0x88
 8002048:	2124      	movs	r1, #36	@ 0x24
 800204a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2101      	movs	r1, #1
 8002058:	438a      	bics	r2, r1
 800205a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002060:	2b00      	cmp	r3, #0
 8002062:	d003      	beq.n	800206c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	0018      	movs	r0, r3
 8002068:	f000 ff32 	bl	8002ed0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	0018      	movs	r0, r3
 8002070:	f000 fc70 	bl	8002954 <UART_SetConfig>
 8002074:	0003      	movs	r3, r0
 8002076:	2b01      	cmp	r3, #1
 8002078:	d101      	bne.n	800207e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e01c      	b.n	80020b8 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	490d      	ldr	r1, [pc, #52]	@ (80020c0 <HAL_UART_Init+0xa8>)
 800208a:	400a      	ands	r2, r1
 800208c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	212a      	movs	r1, #42	@ 0x2a
 800209a:	438a      	bics	r2, r1
 800209c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2101      	movs	r1, #1
 80020aa:	430a      	orrs	r2, r1
 80020ac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	0018      	movs	r0, r3
 80020b2:	f000 ffc1 	bl	8003038 <UART_CheckIdleState>
 80020b6:	0003      	movs	r3, r0
}
 80020b8:	0018      	movs	r0, r3
 80020ba:	46bd      	mov	sp, r7
 80020bc:	b002      	add	sp, #8
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	ffffb7ff 	.word	0xffffb7ff

080020c4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b08c      	sub	sp, #48	@ 0x30
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	1dbb      	adds	r3, r7, #6
 80020d0:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2288      	movs	r2, #136	@ 0x88
 80020d6:	589b      	ldr	r3, [r3, r2]
 80020d8:	2b20      	cmp	r3, #32
 80020da:	d000      	beq.n	80020de <HAL_UART_Transmit_IT+0x1a>
 80020dc:	e08d      	b.n	80021fa <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d003      	beq.n	80020ec <HAL_UART_Transmit_IT+0x28>
 80020e4:	1dbb      	adds	r3, r7, #6
 80020e6:	881b      	ldrh	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d101      	bne.n	80020f0 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e085      	b.n	80021fc <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	2380      	movs	r3, #128	@ 0x80
 80020f6:	015b      	lsls	r3, r3, #5
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d109      	bne.n	8002110 <HAL_UART_Transmit_IT+0x4c>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	691b      	ldr	r3, [r3, #16]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d105      	bne.n	8002110 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	2201      	movs	r2, #1
 8002108:	4013      	ands	r3, r2
 800210a:	d001      	beq.n	8002110 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e075      	b.n	80021fc <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	68ba      	ldr	r2, [r7, #8]
 8002114:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	1dba      	adds	r2, r7, #6
 800211a:	2154      	movs	r1, #84	@ 0x54
 800211c:	8812      	ldrh	r2, [r2, #0]
 800211e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	1dba      	adds	r2, r7, #6
 8002124:	2156      	movs	r1, #86	@ 0x56
 8002126:	8812      	ldrh	r2, [r2, #0]
 8002128:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2200      	movs	r2, #0
 800212e:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2290      	movs	r2, #144	@ 0x90
 8002134:	2100      	movs	r1, #0
 8002136:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2288      	movs	r2, #136	@ 0x88
 800213c:	2121      	movs	r1, #33	@ 0x21
 800213e:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002144:	2380      	movs	r3, #128	@ 0x80
 8002146:	059b      	lsls	r3, r3, #22
 8002148:	429a      	cmp	r2, r3
 800214a:	d12a      	bne.n	80021a2 <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	2380      	movs	r3, #128	@ 0x80
 8002152:	015b      	lsls	r3, r3, #5
 8002154:	429a      	cmp	r2, r3
 8002156:	d107      	bne.n	8002168 <HAL_UART_Transmit_IT+0xa4>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	691b      	ldr	r3, [r3, #16]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d103      	bne.n	8002168 <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4a28      	ldr	r2, [pc, #160]	@ (8002204 <HAL_UART_Transmit_IT+0x140>)
 8002164:	679a      	str	r2, [r3, #120]	@ 0x78
 8002166:	e002      	b.n	800216e <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	4a27      	ldr	r2, [pc, #156]	@ (8002208 <HAL_UART_Transmit_IT+0x144>)
 800216c:	679a      	str	r2, [r3, #120]	@ 0x78
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800216e:	f3ef 8310 	mrs	r3, PRIMASK
 8002172:	61fb      	str	r3, [r7, #28]
  return(result);
 8002174:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002176:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002178:	2301      	movs	r3, #1
 800217a:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800217c:	6a3b      	ldr	r3, [r7, #32]
 800217e:	f383 8810 	msr	PRIMASK, r3
}
 8002182:	46c0      	nop			@ (mov r8, r8)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	689a      	ldr	r2, [r3, #8]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2180      	movs	r1, #128	@ 0x80
 8002190:	0409      	lsls	r1, r1, #16
 8002192:	430a      	orrs	r2, r1
 8002194:	609a      	str	r2, [r3, #8]
 8002196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002198:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800219a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219c:	f383 8810 	msr	PRIMASK, r3
}
 80021a0:	e029      	b.n	80021f6 <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	689a      	ldr	r2, [r3, #8]
 80021a6:	2380      	movs	r3, #128	@ 0x80
 80021a8:	015b      	lsls	r3, r3, #5
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d107      	bne.n	80021be <HAL_UART_Transmit_IT+0xfa>
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d103      	bne.n	80021be <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	4a14      	ldr	r2, [pc, #80]	@ (800220c <HAL_UART_Transmit_IT+0x148>)
 80021ba:	679a      	str	r2, [r3, #120]	@ 0x78
 80021bc:	e002      	b.n	80021c4 <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	4a13      	ldr	r2, [pc, #76]	@ (8002210 <HAL_UART_Transmit_IT+0x14c>)
 80021c2:	679a      	str	r2, [r3, #120]	@ 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021c4:	f3ef 8310 	mrs	r3, PRIMASK
 80021c8:	613b      	str	r3, [r7, #16]
  return(result);
 80021ca:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80021cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021ce:	2301      	movs	r3, #1
 80021d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	f383 8810 	msr	PRIMASK, r3
}
 80021d8:	46c0      	nop			@ (mov r8, r8)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2180      	movs	r1, #128	@ 0x80
 80021e6:	430a      	orrs	r2, r1
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021ec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	f383 8810 	msr	PRIMASK, r3
}
 80021f4:	46c0      	nop			@ (mov r8, r8)
    }

    return HAL_OK;
 80021f6:	2300      	movs	r3, #0
 80021f8:	e000      	b.n	80021fc <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 80021fa:	2302      	movs	r3, #2
  }
}
 80021fc:	0018      	movs	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	b00c      	add	sp, #48	@ 0x30
 8002202:	bd80      	pop	{r7, pc}
 8002204:	0800380d 	.word	0x0800380d
 8002208:	08003721 	.word	0x08003721
 800220c:	08003663 	.word	0x08003663
 8002210:	080035af 	.word	0x080035af

08002214 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b088      	sub	sp, #32
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	1dbb      	adds	r3, r7, #6
 8002220:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	228c      	movs	r2, #140	@ 0x8c
 8002226:	589b      	ldr	r3, [r3, r2]
 8002228:	2b20      	cmp	r3, #32
 800222a:	d14a      	bne.n	80022c2 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d003      	beq.n	800223a <HAL_UART_Receive_IT+0x26>
 8002232:	1dbb      	adds	r3, r7, #6
 8002234:	881b      	ldrh	r3, [r3, #0]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e042      	b.n	80022c4 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	689a      	ldr	r2, [r3, #8]
 8002242:	2380      	movs	r3, #128	@ 0x80
 8002244:	015b      	lsls	r3, r3, #5
 8002246:	429a      	cmp	r2, r3
 8002248:	d109      	bne.n	800225e <HAL_UART_Receive_IT+0x4a>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d105      	bne.n	800225e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	2201      	movs	r2, #1
 8002256:	4013      	ands	r3, r2
 8002258:	d001      	beq.n	800225e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e032      	b.n	80022c4 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2200      	movs	r2, #0
 8002262:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a18      	ldr	r2, [pc, #96]	@ (80022cc <HAL_UART_Receive_IT+0xb8>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d020      	beq.n	80022b0 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	2380      	movs	r3, #128	@ 0x80
 8002276:	041b      	lsls	r3, r3, #16
 8002278:	4013      	ands	r3, r2
 800227a:	d019      	beq.n	80022b0 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800227c:	f3ef 8310 	mrs	r3, PRIMASK
 8002280:	613b      	str	r3, [r7, #16]
  return(result);
 8002282:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002284:	61fb      	str	r3, [r7, #28]
 8002286:	2301      	movs	r3, #1
 8002288:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	f383 8810 	msr	PRIMASK, r3
}
 8002290:	46c0      	nop			@ (mov r8, r8)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2180      	movs	r1, #128	@ 0x80
 800229e:	04c9      	lsls	r1, r1, #19
 80022a0:	430a      	orrs	r2, r1
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	f383 8810 	msr	PRIMASK, r3
}
 80022ae:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80022b0:	1dbb      	adds	r3, r7, #6
 80022b2:	881a      	ldrh	r2, [r3, #0]
 80022b4:	68b9      	ldr	r1, [r7, #8]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	0018      	movs	r0, r3
 80022ba:	f000 ffd7 	bl	800326c <UART_Start_Receive_IT>
 80022be:	0003      	movs	r3, r0
 80022c0:	e000      	b.n	80022c4 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80022c2:	2302      	movs	r3, #2
  }
}
 80022c4:	0018      	movs	r0, r3
 80022c6:	46bd      	mov	sp, r7
 80022c8:	b008      	add	sp, #32
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40008000 	.word	0x40008000

080022d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80022d0:	b5b0      	push	{r4, r5, r7, lr}
 80022d2:	b0aa      	sub	sp, #168	@ 0xa8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	22a4      	movs	r2, #164	@ 0xa4
 80022e0:	18b9      	adds	r1, r7, r2
 80022e2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	20a0      	movs	r0, #160	@ 0xa0
 80022ec:	1839      	adds	r1, r7, r0
 80022ee:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	249c      	movs	r4, #156	@ 0x9c
 80022f8:	1939      	adds	r1, r7, r4
 80022fa:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80022fc:	0011      	movs	r1, r2
 80022fe:	18bb      	adds	r3, r7, r2
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4aa2      	ldr	r2, [pc, #648]	@ (800258c <HAL_UART_IRQHandler+0x2bc>)
 8002304:	4013      	ands	r3, r2
 8002306:	2298      	movs	r2, #152	@ 0x98
 8002308:	18bd      	adds	r5, r7, r2
 800230a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800230c:	18bb      	adds	r3, r7, r2
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d11a      	bne.n	800234a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002314:	187b      	adds	r3, r7, r1
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2220      	movs	r2, #32
 800231a:	4013      	ands	r3, r2
 800231c:	d015      	beq.n	800234a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800231e:	183b      	adds	r3, r7, r0
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2220      	movs	r2, #32
 8002324:	4013      	ands	r3, r2
 8002326:	d105      	bne.n	8002334 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002328:	193b      	adds	r3, r7, r4
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	2380      	movs	r3, #128	@ 0x80
 800232e:	055b      	lsls	r3, r3, #21
 8002330:	4013      	ands	r3, r2
 8002332:	d00a      	beq.n	800234a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002338:	2b00      	cmp	r3, #0
 800233a:	d100      	bne.n	800233e <HAL_UART_IRQHandler+0x6e>
 800233c:	e2dc      	b.n	80028f8 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	0010      	movs	r0, r2
 8002346:	4798      	blx	r3
      }
      return;
 8002348:	e2d6      	b.n	80028f8 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800234a:	2398      	movs	r3, #152	@ 0x98
 800234c:	18fb      	adds	r3, r7, r3
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d100      	bne.n	8002356 <HAL_UART_IRQHandler+0x86>
 8002354:	e122      	b.n	800259c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002356:	239c      	movs	r3, #156	@ 0x9c
 8002358:	18fb      	adds	r3, r7, r3
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a8c      	ldr	r2, [pc, #560]	@ (8002590 <HAL_UART_IRQHandler+0x2c0>)
 800235e:	4013      	ands	r3, r2
 8002360:	d106      	bne.n	8002370 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002362:	23a0      	movs	r3, #160	@ 0xa0
 8002364:	18fb      	adds	r3, r7, r3
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a8a      	ldr	r2, [pc, #552]	@ (8002594 <HAL_UART_IRQHandler+0x2c4>)
 800236a:	4013      	ands	r3, r2
 800236c:	d100      	bne.n	8002370 <HAL_UART_IRQHandler+0xa0>
 800236e:	e115      	b.n	800259c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002370:	23a4      	movs	r3, #164	@ 0xa4
 8002372:	18fb      	adds	r3, r7, r3
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2201      	movs	r2, #1
 8002378:	4013      	ands	r3, r2
 800237a:	d012      	beq.n	80023a2 <HAL_UART_IRQHandler+0xd2>
 800237c:	23a0      	movs	r3, #160	@ 0xa0
 800237e:	18fb      	adds	r3, r7, r3
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	2380      	movs	r3, #128	@ 0x80
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	4013      	ands	r3, r2
 8002388:	d00b      	beq.n	80023a2 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2201      	movs	r2, #1
 8002390:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2290      	movs	r2, #144	@ 0x90
 8002396:	589b      	ldr	r3, [r3, r2]
 8002398:	2201      	movs	r2, #1
 800239a:	431a      	orrs	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2190      	movs	r1, #144	@ 0x90
 80023a0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80023a2:	23a4      	movs	r3, #164	@ 0xa4
 80023a4:	18fb      	adds	r3, r7, r3
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2202      	movs	r2, #2
 80023aa:	4013      	ands	r3, r2
 80023ac:	d011      	beq.n	80023d2 <HAL_UART_IRQHandler+0x102>
 80023ae:	239c      	movs	r3, #156	@ 0x9c
 80023b0:	18fb      	adds	r3, r7, r3
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2201      	movs	r2, #1
 80023b6:	4013      	ands	r3, r2
 80023b8:	d00b      	beq.n	80023d2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2202      	movs	r2, #2
 80023c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2290      	movs	r2, #144	@ 0x90
 80023c6:	589b      	ldr	r3, [r3, r2]
 80023c8:	2204      	movs	r2, #4
 80023ca:	431a      	orrs	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2190      	movs	r1, #144	@ 0x90
 80023d0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80023d2:	23a4      	movs	r3, #164	@ 0xa4
 80023d4:	18fb      	adds	r3, r7, r3
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2204      	movs	r2, #4
 80023da:	4013      	ands	r3, r2
 80023dc:	d011      	beq.n	8002402 <HAL_UART_IRQHandler+0x132>
 80023de:	239c      	movs	r3, #156	@ 0x9c
 80023e0:	18fb      	adds	r3, r7, r3
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2201      	movs	r2, #1
 80023e6:	4013      	ands	r3, r2
 80023e8:	d00b      	beq.n	8002402 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2204      	movs	r2, #4
 80023f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2290      	movs	r2, #144	@ 0x90
 80023f6:	589b      	ldr	r3, [r3, r2]
 80023f8:	2202      	movs	r2, #2
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2190      	movs	r1, #144	@ 0x90
 8002400:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002402:	23a4      	movs	r3, #164	@ 0xa4
 8002404:	18fb      	adds	r3, r7, r3
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2208      	movs	r2, #8
 800240a:	4013      	ands	r3, r2
 800240c:	d017      	beq.n	800243e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800240e:	23a0      	movs	r3, #160	@ 0xa0
 8002410:	18fb      	adds	r3, r7, r3
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2220      	movs	r2, #32
 8002416:	4013      	ands	r3, r2
 8002418:	d105      	bne.n	8002426 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800241a:	239c      	movs	r3, #156	@ 0x9c
 800241c:	18fb      	adds	r3, r7, r3
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a5b      	ldr	r2, [pc, #364]	@ (8002590 <HAL_UART_IRQHandler+0x2c0>)
 8002422:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002424:	d00b      	beq.n	800243e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2208      	movs	r2, #8
 800242c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2290      	movs	r2, #144	@ 0x90
 8002432:	589b      	ldr	r3, [r3, r2]
 8002434:	2208      	movs	r2, #8
 8002436:	431a      	orrs	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2190      	movs	r1, #144	@ 0x90
 800243c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800243e:	23a4      	movs	r3, #164	@ 0xa4
 8002440:	18fb      	adds	r3, r7, r3
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	2380      	movs	r3, #128	@ 0x80
 8002446:	011b      	lsls	r3, r3, #4
 8002448:	4013      	ands	r3, r2
 800244a:	d013      	beq.n	8002474 <HAL_UART_IRQHandler+0x1a4>
 800244c:	23a0      	movs	r3, #160	@ 0xa0
 800244e:	18fb      	adds	r3, r7, r3
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	2380      	movs	r3, #128	@ 0x80
 8002454:	04db      	lsls	r3, r3, #19
 8002456:	4013      	ands	r3, r2
 8002458:	d00c      	beq.n	8002474 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2280      	movs	r2, #128	@ 0x80
 8002460:	0112      	lsls	r2, r2, #4
 8002462:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2290      	movs	r2, #144	@ 0x90
 8002468:	589b      	ldr	r3, [r3, r2]
 800246a:	2220      	movs	r2, #32
 800246c:	431a      	orrs	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2190      	movs	r1, #144	@ 0x90
 8002472:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2290      	movs	r2, #144	@ 0x90
 8002478:	589b      	ldr	r3, [r3, r2]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d100      	bne.n	8002480 <HAL_UART_IRQHandler+0x1b0>
 800247e:	e23d      	b.n	80028fc <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002480:	23a4      	movs	r3, #164	@ 0xa4
 8002482:	18fb      	adds	r3, r7, r3
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2220      	movs	r2, #32
 8002488:	4013      	ands	r3, r2
 800248a:	d015      	beq.n	80024b8 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800248c:	23a0      	movs	r3, #160	@ 0xa0
 800248e:	18fb      	adds	r3, r7, r3
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2220      	movs	r2, #32
 8002494:	4013      	ands	r3, r2
 8002496:	d106      	bne.n	80024a6 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002498:	239c      	movs	r3, #156	@ 0x9c
 800249a:	18fb      	adds	r3, r7, r3
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	2380      	movs	r3, #128	@ 0x80
 80024a0:	055b      	lsls	r3, r3, #21
 80024a2:	4013      	ands	r3, r2
 80024a4:	d008      	beq.n	80024b8 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d004      	beq.n	80024b8 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	0010      	movs	r0, r2
 80024b6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2290      	movs	r2, #144	@ 0x90
 80024bc:	589b      	ldr	r3, [r3, r2]
 80024be:	2194      	movs	r1, #148	@ 0x94
 80024c0:	187a      	adds	r2, r7, r1
 80024c2:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	2240      	movs	r2, #64	@ 0x40
 80024cc:	4013      	ands	r3, r2
 80024ce:	2b40      	cmp	r3, #64	@ 0x40
 80024d0:	d004      	beq.n	80024dc <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80024d2:	187b      	adds	r3, r7, r1
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2228      	movs	r2, #40	@ 0x28
 80024d8:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80024da:	d04c      	beq.n	8002576 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	0018      	movs	r0, r3
 80024e0:	f000 ffe8 	bl	80034b4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	2240      	movs	r2, #64	@ 0x40
 80024ec:	4013      	ands	r3, r2
 80024ee:	2b40      	cmp	r3, #64	@ 0x40
 80024f0:	d13c      	bne.n	800256c <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024f2:	f3ef 8310 	mrs	r3, PRIMASK
 80024f6:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80024f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024fa:	2090      	movs	r0, #144	@ 0x90
 80024fc:	183a      	adds	r2, r7, r0
 80024fe:	6013      	str	r3, [r2, #0]
 8002500:	2301      	movs	r3, #1
 8002502:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002504:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002506:	f383 8810 	msr	PRIMASK, r3
}
 800250a:	46c0      	nop			@ (mov r8, r8)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	689a      	ldr	r2, [r3, #8]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2140      	movs	r1, #64	@ 0x40
 8002518:	438a      	bics	r2, r1
 800251a:	609a      	str	r2, [r3, #8]
 800251c:	183b      	adds	r3, r7, r0
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002522:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002524:	f383 8810 	msr	PRIMASK, r3
}
 8002528:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2280      	movs	r2, #128	@ 0x80
 800252e:	589b      	ldr	r3, [r3, r2]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d016      	beq.n	8002562 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2280      	movs	r2, #128	@ 0x80
 8002538:	589b      	ldr	r3, [r3, r2]
 800253a:	4a17      	ldr	r2, [pc, #92]	@ (8002598 <HAL_UART_IRQHandler+0x2c8>)
 800253c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2280      	movs	r2, #128	@ 0x80
 8002542:	589b      	ldr	r3, [r3, r2]
 8002544:	0018      	movs	r0, r3
 8002546:	f7fe fcb3 	bl	8000eb0 <HAL_DMA_Abort_IT>
 800254a:	1e03      	subs	r3, r0, #0
 800254c:	d01c      	beq.n	8002588 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2280      	movs	r2, #128	@ 0x80
 8002552:	589b      	ldr	r3, [r3, r2]
 8002554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	2180      	movs	r1, #128	@ 0x80
 800255a:	5852      	ldr	r2, [r2, r1]
 800255c:	0010      	movs	r0, r2
 800255e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002560:	e012      	b.n	8002588 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	0018      	movs	r0, r3
 8002566:	f000 f9e1 	bl	800292c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800256a:	e00d      	b.n	8002588 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	0018      	movs	r0, r3
 8002570:	f000 f9dc 	bl	800292c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002574:	e008      	b.n	8002588 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	0018      	movs	r0, r3
 800257a:	f000 f9d7 	bl	800292c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2290      	movs	r2, #144	@ 0x90
 8002582:	2100      	movs	r1, #0
 8002584:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002586:	e1b9      	b.n	80028fc <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002588:	46c0      	nop			@ (mov r8, r8)
    return;
 800258a:	e1b7      	b.n	80028fc <HAL_UART_IRQHandler+0x62c>
 800258c:	0000080f 	.word	0x0000080f
 8002590:	10000001 	.word	0x10000001
 8002594:	04000120 	.word	0x04000120
 8002598:	08003581 	.word	0x08003581

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d000      	beq.n	80025a6 <HAL_UART_IRQHandler+0x2d6>
 80025a4:	e13e      	b.n	8002824 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80025a6:	23a4      	movs	r3, #164	@ 0xa4
 80025a8:	18fb      	adds	r3, r7, r3
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2210      	movs	r2, #16
 80025ae:	4013      	ands	r3, r2
 80025b0:	d100      	bne.n	80025b4 <HAL_UART_IRQHandler+0x2e4>
 80025b2:	e137      	b.n	8002824 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80025b4:	23a0      	movs	r3, #160	@ 0xa0
 80025b6:	18fb      	adds	r3, r7, r3
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2210      	movs	r2, #16
 80025bc:	4013      	ands	r3, r2
 80025be:	d100      	bne.n	80025c2 <HAL_UART_IRQHandler+0x2f2>
 80025c0:	e130      	b.n	8002824 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2210      	movs	r2, #16
 80025c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	2240      	movs	r2, #64	@ 0x40
 80025d2:	4013      	ands	r3, r2
 80025d4:	2b40      	cmp	r3, #64	@ 0x40
 80025d6:	d000      	beq.n	80025da <HAL_UART_IRQHandler+0x30a>
 80025d8:	e0a4      	b.n	8002724 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2280      	movs	r2, #128	@ 0x80
 80025de:	589b      	ldr	r3, [r3, r2]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	685a      	ldr	r2, [r3, #4]
 80025e4:	217e      	movs	r1, #126	@ 0x7e
 80025e6:	187b      	adds	r3, r7, r1
 80025e8:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80025ea:	187b      	adds	r3, r7, r1
 80025ec:	881b      	ldrh	r3, [r3, #0]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d100      	bne.n	80025f4 <HAL_UART_IRQHandler+0x324>
 80025f2:	e185      	b.n	8002900 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	225c      	movs	r2, #92	@ 0x5c
 80025f8:	5a9b      	ldrh	r3, [r3, r2]
 80025fa:	187a      	adds	r2, r7, r1
 80025fc:	8812      	ldrh	r2, [r2, #0]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d300      	bcc.n	8002604 <HAL_UART_IRQHandler+0x334>
 8002602:	e17d      	b.n	8002900 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	187a      	adds	r2, r7, r1
 8002608:	215e      	movs	r1, #94	@ 0x5e
 800260a:	8812      	ldrh	r2, [r2, #0]
 800260c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2280      	movs	r2, #128	@ 0x80
 8002612:	589b      	ldr	r3, [r3, r2]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2220      	movs	r2, #32
 800261a:	4013      	ands	r3, r2
 800261c:	d170      	bne.n	8002700 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800261e:	f3ef 8310 	mrs	r3, PRIMASK
 8002622:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8002624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002626:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002628:	2301      	movs	r3, #1
 800262a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800262c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800262e:	f383 8810 	msr	PRIMASK, r3
}
 8002632:	46c0      	nop			@ (mov r8, r8)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	49b4      	ldr	r1, [pc, #720]	@ (8002910 <HAL_UART_IRQHandler+0x640>)
 8002640:	400a      	ands	r2, r1
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002646:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800264a:	f383 8810 	msr	PRIMASK, r3
}
 800264e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002650:	f3ef 8310 	mrs	r3, PRIMASK
 8002654:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8002656:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002658:	677b      	str	r3, [r7, #116]	@ 0x74
 800265a:	2301      	movs	r3, #1
 800265c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800265e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002660:	f383 8810 	msr	PRIMASK, r3
}
 8002664:	46c0      	nop			@ (mov r8, r8)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	689a      	ldr	r2, [r3, #8]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2101      	movs	r1, #1
 8002672:	438a      	bics	r2, r1
 8002674:	609a      	str	r2, [r3, #8]
 8002676:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002678:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800267a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800267c:	f383 8810 	msr	PRIMASK, r3
}
 8002680:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002682:	f3ef 8310 	mrs	r3, PRIMASK
 8002686:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8002688:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800268a:	673b      	str	r3, [r7, #112]	@ 0x70
 800268c:	2301      	movs	r3, #1
 800268e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002690:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002692:	f383 8810 	msr	PRIMASK, r3
}
 8002696:	46c0      	nop			@ (mov r8, r8)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	689a      	ldr	r2, [r3, #8]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2140      	movs	r1, #64	@ 0x40
 80026a4:	438a      	bics	r2, r1
 80026a6:	609a      	str	r2, [r3, #8]
 80026a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80026aa:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026ae:	f383 8810 	msr	PRIMASK, r3
}
 80026b2:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	228c      	movs	r2, #140	@ 0x8c
 80026b8:	2120      	movs	r1, #32
 80026ba:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026c2:	f3ef 8310 	mrs	r3, PRIMASK
 80026c6:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80026c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80026cc:	2301      	movs	r3, #1
 80026ce:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026d2:	f383 8810 	msr	PRIMASK, r3
}
 80026d6:	46c0      	nop			@ (mov r8, r8)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2110      	movs	r1, #16
 80026e4:	438a      	bics	r2, r1
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026ee:	f383 8810 	msr	PRIMASK, r3
}
 80026f2:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2280      	movs	r2, #128	@ 0x80
 80026f8:	589b      	ldr	r3, [r3, r2]
 80026fa:	0018      	movs	r0, r3
 80026fc:	f7fe fb76 	bl	8000dec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2202      	movs	r2, #2
 8002704:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	225c      	movs	r2, #92	@ 0x5c
 800270a:	5a9a      	ldrh	r2, [r3, r2]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	215e      	movs	r1, #94	@ 0x5e
 8002710:	5a5b      	ldrh	r3, [r3, r1]
 8002712:	b29b      	uxth	r3, r3
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	b29a      	uxth	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	0011      	movs	r1, r2
 800271c:	0018      	movs	r0, r3
 800271e:	f000 f90d 	bl	800293c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002722:	e0ed      	b.n	8002900 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	225c      	movs	r2, #92	@ 0x5c
 8002728:	5a99      	ldrh	r1, [r3, r2]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	225e      	movs	r2, #94	@ 0x5e
 800272e:	5a9b      	ldrh	r3, [r3, r2]
 8002730:	b29a      	uxth	r2, r3
 8002732:	208e      	movs	r0, #142	@ 0x8e
 8002734:	183b      	adds	r3, r7, r0
 8002736:	1a8a      	subs	r2, r1, r2
 8002738:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	225e      	movs	r2, #94	@ 0x5e
 800273e:	5a9b      	ldrh	r3, [r3, r2]
 8002740:	b29b      	uxth	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d100      	bne.n	8002748 <HAL_UART_IRQHandler+0x478>
 8002746:	e0dd      	b.n	8002904 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8002748:	183b      	adds	r3, r7, r0
 800274a:	881b      	ldrh	r3, [r3, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d100      	bne.n	8002752 <HAL_UART_IRQHandler+0x482>
 8002750:	e0d8      	b.n	8002904 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002752:	f3ef 8310 	mrs	r3, PRIMASK
 8002756:	60fb      	str	r3, [r7, #12]
  return(result);
 8002758:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800275a:	2488      	movs	r4, #136	@ 0x88
 800275c:	193a      	adds	r2, r7, r4
 800275e:	6013      	str	r3, [r2, #0]
 8002760:	2301      	movs	r3, #1
 8002762:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	f383 8810 	msr	PRIMASK, r3
}
 800276a:	46c0      	nop			@ (mov r8, r8)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4967      	ldr	r1, [pc, #412]	@ (8002914 <HAL_UART_IRQHandler+0x644>)
 8002778:	400a      	ands	r2, r1
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	193b      	adds	r3, r7, r4
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	f383 8810 	msr	PRIMASK, r3
}
 8002788:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800278a:	f3ef 8310 	mrs	r3, PRIMASK
 800278e:	61bb      	str	r3, [r7, #24]
  return(result);
 8002790:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002792:	2484      	movs	r4, #132	@ 0x84
 8002794:	193a      	adds	r2, r7, r4
 8002796:	6013      	str	r3, [r2, #0]
 8002798:	2301      	movs	r3, #1
 800279a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	f383 8810 	msr	PRIMASK, r3
}
 80027a2:	46c0      	nop			@ (mov r8, r8)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689a      	ldr	r2, [r3, #8]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	495a      	ldr	r1, [pc, #360]	@ (8002918 <HAL_UART_IRQHandler+0x648>)
 80027b0:	400a      	ands	r2, r1
 80027b2:	609a      	str	r2, [r3, #8]
 80027b4:	193b      	adds	r3, r7, r4
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027ba:	6a3b      	ldr	r3, [r7, #32]
 80027bc:	f383 8810 	msr	PRIMASK, r3
}
 80027c0:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	228c      	movs	r2, #140	@ 0x8c
 80027c6:	2120      	movs	r1, #32
 80027c8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027d6:	f3ef 8310 	mrs	r3, PRIMASK
 80027da:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80027dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027de:	2480      	movs	r4, #128	@ 0x80
 80027e0:	193a      	adds	r2, r7, r4
 80027e2:	6013      	str	r3, [r2, #0]
 80027e4:	2301      	movs	r3, #1
 80027e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ea:	f383 8810 	msr	PRIMASK, r3
}
 80027ee:	46c0      	nop			@ (mov r8, r8)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2110      	movs	r1, #16
 80027fc:	438a      	bics	r2, r1
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	193b      	adds	r3, r7, r4
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002808:	f383 8810 	msr	PRIMASK, r3
}
 800280c:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2202      	movs	r2, #2
 8002812:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002814:	183b      	adds	r3, r7, r0
 8002816:	881a      	ldrh	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	0011      	movs	r1, r2
 800281c:	0018      	movs	r0, r3
 800281e:	f000 f88d 	bl	800293c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002822:	e06f      	b.n	8002904 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002824:	23a4      	movs	r3, #164	@ 0xa4
 8002826:	18fb      	adds	r3, r7, r3
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	2380      	movs	r3, #128	@ 0x80
 800282c:	035b      	lsls	r3, r3, #13
 800282e:	4013      	ands	r3, r2
 8002830:	d010      	beq.n	8002854 <HAL_UART_IRQHandler+0x584>
 8002832:	239c      	movs	r3, #156	@ 0x9c
 8002834:	18fb      	adds	r3, r7, r3
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	2380      	movs	r3, #128	@ 0x80
 800283a:	03db      	lsls	r3, r3, #15
 800283c:	4013      	ands	r3, r2
 800283e:	d009      	beq.n	8002854 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2280      	movs	r2, #128	@ 0x80
 8002846:	0352      	lsls	r2, r2, #13
 8002848:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	0018      	movs	r0, r3
 800284e:	f001 fd93 	bl	8004378 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002852:	e05a      	b.n	800290a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002854:	23a4      	movs	r3, #164	@ 0xa4
 8002856:	18fb      	adds	r3, r7, r3
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2280      	movs	r2, #128	@ 0x80
 800285c:	4013      	ands	r3, r2
 800285e:	d016      	beq.n	800288e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002860:	23a0      	movs	r3, #160	@ 0xa0
 8002862:	18fb      	adds	r3, r7, r3
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2280      	movs	r2, #128	@ 0x80
 8002868:	4013      	ands	r3, r2
 800286a:	d106      	bne.n	800287a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800286c:	239c      	movs	r3, #156	@ 0x9c
 800286e:	18fb      	adds	r3, r7, r3
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	2380      	movs	r3, #128	@ 0x80
 8002874:	041b      	lsls	r3, r3, #16
 8002876:	4013      	ands	r3, r2
 8002878:	d009      	beq.n	800288e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800287e:	2b00      	cmp	r3, #0
 8002880:	d042      	beq.n	8002908 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	0010      	movs	r0, r2
 800288a:	4798      	blx	r3
    }
    return;
 800288c:	e03c      	b.n	8002908 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800288e:	23a4      	movs	r3, #164	@ 0xa4
 8002890:	18fb      	adds	r3, r7, r3
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2240      	movs	r2, #64	@ 0x40
 8002896:	4013      	ands	r3, r2
 8002898:	d00a      	beq.n	80028b0 <HAL_UART_IRQHandler+0x5e0>
 800289a:	23a0      	movs	r3, #160	@ 0xa0
 800289c:	18fb      	adds	r3, r7, r3
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2240      	movs	r2, #64	@ 0x40
 80028a2:	4013      	ands	r3, r2
 80028a4:	d004      	beq.n	80028b0 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	0018      	movs	r0, r3
 80028aa:	f001 f829 	bl	8003900 <UART_EndTransmit_IT>
    return;
 80028ae:	e02c      	b.n	800290a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80028b0:	23a4      	movs	r3, #164	@ 0xa4
 80028b2:	18fb      	adds	r3, r7, r3
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	2380      	movs	r3, #128	@ 0x80
 80028b8:	041b      	lsls	r3, r3, #16
 80028ba:	4013      	ands	r3, r2
 80028bc:	d00b      	beq.n	80028d6 <HAL_UART_IRQHandler+0x606>
 80028be:	23a0      	movs	r3, #160	@ 0xa0
 80028c0:	18fb      	adds	r3, r7, r3
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	2380      	movs	r3, #128	@ 0x80
 80028c6:	05db      	lsls	r3, r3, #23
 80028c8:	4013      	ands	r3, r2
 80028ca:	d004      	beq.n	80028d6 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	0018      	movs	r0, r3
 80028d0:	f001 fd62 	bl	8004398 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80028d4:	e019      	b.n	800290a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80028d6:	23a4      	movs	r3, #164	@ 0xa4
 80028d8:	18fb      	adds	r3, r7, r3
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	2380      	movs	r3, #128	@ 0x80
 80028de:	045b      	lsls	r3, r3, #17
 80028e0:	4013      	ands	r3, r2
 80028e2:	d012      	beq.n	800290a <HAL_UART_IRQHandler+0x63a>
 80028e4:	23a0      	movs	r3, #160	@ 0xa0
 80028e6:	18fb      	adds	r3, r7, r3
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	da0d      	bge.n	800290a <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	0018      	movs	r0, r3
 80028f2:	f001 fd49 	bl	8004388 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80028f6:	e008      	b.n	800290a <HAL_UART_IRQHandler+0x63a>
      return;
 80028f8:	46c0      	nop			@ (mov r8, r8)
 80028fa:	e006      	b.n	800290a <HAL_UART_IRQHandler+0x63a>
    return;
 80028fc:	46c0      	nop			@ (mov r8, r8)
 80028fe:	e004      	b.n	800290a <HAL_UART_IRQHandler+0x63a>
      return;
 8002900:	46c0      	nop			@ (mov r8, r8)
 8002902:	e002      	b.n	800290a <HAL_UART_IRQHandler+0x63a>
      return;
 8002904:	46c0      	nop			@ (mov r8, r8)
 8002906:	e000      	b.n	800290a <HAL_UART_IRQHandler+0x63a>
    return;
 8002908:	46c0      	nop			@ (mov r8, r8)
  }
}
 800290a:	46bd      	mov	sp, r7
 800290c:	b02a      	add	sp, #168	@ 0xa8
 800290e:	bdb0      	pop	{r4, r5, r7, pc}
 8002910:	fffffeff 	.word	0xfffffeff
 8002914:	fffffedf 	.word	0xfffffedf
 8002918:	effffffe 	.word	0xeffffffe

0800291c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002924:	46c0      	nop			@ (mov r8, r8)
 8002926:	46bd      	mov	sp, r7
 8002928:	b002      	add	sp, #8
 800292a:	bd80      	pop	{r7, pc}

0800292c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002934:	46c0      	nop			@ (mov r8, r8)
 8002936:	46bd      	mov	sp, r7
 8002938:	b002      	add	sp, #8
 800293a:	bd80      	pop	{r7, pc}

0800293c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	000a      	movs	r2, r1
 8002946:	1cbb      	adds	r3, r7, #2
 8002948:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800294a:	46c0      	nop			@ (mov r8, r8)
 800294c:	46bd      	mov	sp, r7
 800294e:	b002      	add	sp, #8
 8002950:	bd80      	pop	{r7, pc}
	...

08002954 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002954:	b5b0      	push	{r4, r5, r7, lr}
 8002956:	b090      	sub	sp, #64	@ 0x40
 8002958:	af00      	add	r7, sp, #0
 800295a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800295c:	231a      	movs	r3, #26
 800295e:	2220      	movs	r2, #32
 8002960:	189b      	adds	r3, r3, r2
 8002962:	19db      	adds	r3, r3, r7
 8002964:	2200      	movs	r2, #0
 8002966:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	431a      	orrs	r2, r3
 8002972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	431a      	orrs	r2, r3
 8002978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297a:	69db      	ldr	r3, [r3, #28]
 800297c:	4313      	orrs	r3, r2
 800297e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4aaf      	ldr	r2, [pc, #700]	@ (8002c44 <UART_SetConfig+0x2f0>)
 8002988:	4013      	ands	r3, r2
 800298a:	0019      	movs	r1, r3
 800298c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002992:	430b      	orrs	r3, r1
 8002994:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	4aaa      	ldr	r2, [pc, #680]	@ (8002c48 <UART_SetConfig+0x2f4>)
 800299e:	4013      	ands	r3, r2
 80029a0:	0018      	movs	r0, r3
 80029a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a4:	68d9      	ldr	r1, [r3, #12]
 80029a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	0003      	movs	r3, r0
 80029ac:	430b      	orrs	r3, r1
 80029ae:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80029b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80029b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4aa4      	ldr	r2, [pc, #656]	@ (8002c4c <UART_SetConfig+0x2f8>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d004      	beq.n	80029ca <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80029c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80029c6:	4313      	orrs	r3, r2
 80029c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80029ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	4a9f      	ldr	r2, [pc, #636]	@ (8002c50 <UART_SetConfig+0x2fc>)
 80029d2:	4013      	ands	r3, r2
 80029d4:	0019      	movs	r1, r3
 80029d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029dc:	430b      	orrs	r3, r1
 80029de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80029e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029e6:	220f      	movs	r2, #15
 80029e8:	4393      	bics	r3, r2
 80029ea:	0018      	movs	r0, r3
 80029ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ee:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80029f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	0003      	movs	r3, r0
 80029f6:	430b      	orrs	r3, r1
 80029f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a95      	ldr	r2, [pc, #596]	@ (8002c54 <UART_SetConfig+0x300>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d131      	bne.n	8002a68 <UART_SetConfig+0x114>
 8002a04:	4b94      	ldr	r3, [pc, #592]	@ (8002c58 <UART_SetConfig+0x304>)
 8002a06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a08:	2203      	movs	r2, #3
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	2b03      	cmp	r3, #3
 8002a0e:	d01d      	beq.n	8002a4c <UART_SetConfig+0xf8>
 8002a10:	d823      	bhi.n	8002a5a <UART_SetConfig+0x106>
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d00c      	beq.n	8002a30 <UART_SetConfig+0xdc>
 8002a16:	d820      	bhi.n	8002a5a <UART_SetConfig+0x106>
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d002      	beq.n	8002a22 <UART_SetConfig+0xce>
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d00e      	beq.n	8002a3e <UART_SetConfig+0xea>
 8002a20:	e01b      	b.n	8002a5a <UART_SetConfig+0x106>
 8002a22:	231b      	movs	r3, #27
 8002a24:	2220      	movs	r2, #32
 8002a26:	189b      	adds	r3, r3, r2
 8002a28:	19db      	adds	r3, r3, r7
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	701a      	strb	r2, [r3, #0]
 8002a2e:	e0b4      	b.n	8002b9a <UART_SetConfig+0x246>
 8002a30:	231b      	movs	r3, #27
 8002a32:	2220      	movs	r2, #32
 8002a34:	189b      	adds	r3, r3, r2
 8002a36:	19db      	adds	r3, r3, r7
 8002a38:	2202      	movs	r2, #2
 8002a3a:	701a      	strb	r2, [r3, #0]
 8002a3c:	e0ad      	b.n	8002b9a <UART_SetConfig+0x246>
 8002a3e:	231b      	movs	r3, #27
 8002a40:	2220      	movs	r2, #32
 8002a42:	189b      	adds	r3, r3, r2
 8002a44:	19db      	adds	r3, r3, r7
 8002a46:	2204      	movs	r2, #4
 8002a48:	701a      	strb	r2, [r3, #0]
 8002a4a:	e0a6      	b.n	8002b9a <UART_SetConfig+0x246>
 8002a4c:	231b      	movs	r3, #27
 8002a4e:	2220      	movs	r2, #32
 8002a50:	189b      	adds	r3, r3, r2
 8002a52:	19db      	adds	r3, r3, r7
 8002a54:	2208      	movs	r2, #8
 8002a56:	701a      	strb	r2, [r3, #0]
 8002a58:	e09f      	b.n	8002b9a <UART_SetConfig+0x246>
 8002a5a:	231b      	movs	r3, #27
 8002a5c:	2220      	movs	r2, #32
 8002a5e:	189b      	adds	r3, r3, r2
 8002a60:	19db      	adds	r3, r3, r7
 8002a62:	2210      	movs	r2, #16
 8002a64:	701a      	strb	r2, [r3, #0]
 8002a66:	e098      	b.n	8002b9a <UART_SetConfig+0x246>
 8002a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a7b      	ldr	r2, [pc, #492]	@ (8002c5c <UART_SetConfig+0x308>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d131      	bne.n	8002ad6 <UART_SetConfig+0x182>
 8002a72:	4b79      	ldr	r3, [pc, #484]	@ (8002c58 <UART_SetConfig+0x304>)
 8002a74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a76:	220c      	movs	r2, #12
 8002a78:	4013      	ands	r3, r2
 8002a7a:	2b0c      	cmp	r3, #12
 8002a7c:	d01d      	beq.n	8002aba <UART_SetConfig+0x166>
 8002a7e:	d823      	bhi.n	8002ac8 <UART_SetConfig+0x174>
 8002a80:	2b08      	cmp	r3, #8
 8002a82:	d00c      	beq.n	8002a9e <UART_SetConfig+0x14a>
 8002a84:	d820      	bhi.n	8002ac8 <UART_SetConfig+0x174>
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d002      	beq.n	8002a90 <UART_SetConfig+0x13c>
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d00e      	beq.n	8002aac <UART_SetConfig+0x158>
 8002a8e:	e01b      	b.n	8002ac8 <UART_SetConfig+0x174>
 8002a90:	231b      	movs	r3, #27
 8002a92:	2220      	movs	r2, #32
 8002a94:	189b      	adds	r3, r3, r2
 8002a96:	19db      	adds	r3, r3, r7
 8002a98:	2200      	movs	r2, #0
 8002a9a:	701a      	strb	r2, [r3, #0]
 8002a9c:	e07d      	b.n	8002b9a <UART_SetConfig+0x246>
 8002a9e:	231b      	movs	r3, #27
 8002aa0:	2220      	movs	r2, #32
 8002aa2:	189b      	adds	r3, r3, r2
 8002aa4:	19db      	adds	r3, r3, r7
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	701a      	strb	r2, [r3, #0]
 8002aaa:	e076      	b.n	8002b9a <UART_SetConfig+0x246>
 8002aac:	231b      	movs	r3, #27
 8002aae:	2220      	movs	r2, #32
 8002ab0:	189b      	adds	r3, r3, r2
 8002ab2:	19db      	adds	r3, r3, r7
 8002ab4:	2204      	movs	r2, #4
 8002ab6:	701a      	strb	r2, [r3, #0]
 8002ab8:	e06f      	b.n	8002b9a <UART_SetConfig+0x246>
 8002aba:	231b      	movs	r3, #27
 8002abc:	2220      	movs	r2, #32
 8002abe:	189b      	adds	r3, r3, r2
 8002ac0:	19db      	adds	r3, r3, r7
 8002ac2:	2208      	movs	r2, #8
 8002ac4:	701a      	strb	r2, [r3, #0]
 8002ac6:	e068      	b.n	8002b9a <UART_SetConfig+0x246>
 8002ac8:	231b      	movs	r3, #27
 8002aca:	2220      	movs	r2, #32
 8002acc:	189b      	adds	r3, r3, r2
 8002ace:	19db      	adds	r3, r3, r7
 8002ad0:	2210      	movs	r2, #16
 8002ad2:	701a      	strb	r2, [r3, #0]
 8002ad4:	e061      	b.n	8002b9a <UART_SetConfig+0x246>
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a61      	ldr	r2, [pc, #388]	@ (8002c60 <UART_SetConfig+0x30c>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d106      	bne.n	8002aee <UART_SetConfig+0x19a>
 8002ae0:	231b      	movs	r3, #27
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	189b      	adds	r3, r3, r2
 8002ae6:	19db      	adds	r3, r3, r7
 8002ae8:	2200      	movs	r2, #0
 8002aea:	701a      	strb	r2, [r3, #0]
 8002aec:	e055      	b.n	8002b9a <UART_SetConfig+0x246>
 8002aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a5c      	ldr	r2, [pc, #368]	@ (8002c64 <UART_SetConfig+0x310>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d106      	bne.n	8002b06 <UART_SetConfig+0x1b2>
 8002af8:	231b      	movs	r3, #27
 8002afa:	2220      	movs	r2, #32
 8002afc:	189b      	adds	r3, r3, r2
 8002afe:	19db      	adds	r3, r3, r7
 8002b00:	2200      	movs	r2, #0
 8002b02:	701a      	strb	r2, [r3, #0]
 8002b04:	e049      	b.n	8002b9a <UART_SetConfig+0x246>
 8002b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a50      	ldr	r2, [pc, #320]	@ (8002c4c <UART_SetConfig+0x2f8>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d13e      	bne.n	8002b8e <UART_SetConfig+0x23a>
 8002b10:	4b51      	ldr	r3, [pc, #324]	@ (8002c58 <UART_SetConfig+0x304>)
 8002b12:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002b14:	23c0      	movs	r3, #192	@ 0xc0
 8002b16:	011b      	lsls	r3, r3, #4
 8002b18:	4013      	ands	r3, r2
 8002b1a:	22c0      	movs	r2, #192	@ 0xc0
 8002b1c:	0112      	lsls	r2, r2, #4
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d027      	beq.n	8002b72 <UART_SetConfig+0x21e>
 8002b22:	22c0      	movs	r2, #192	@ 0xc0
 8002b24:	0112      	lsls	r2, r2, #4
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d82a      	bhi.n	8002b80 <UART_SetConfig+0x22c>
 8002b2a:	2280      	movs	r2, #128	@ 0x80
 8002b2c:	0112      	lsls	r2, r2, #4
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d011      	beq.n	8002b56 <UART_SetConfig+0x202>
 8002b32:	2280      	movs	r2, #128	@ 0x80
 8002b34:	0112      	lsls	r2, r2, #4
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d822      	bhi.n	8002b80 <UART_SetConfig+0x22c>
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d004      	beq.n	8002b48 <UART_SetConfig+0x1f4>
 8002b3e:	2280      	movs	r2, #128	@ 0x80
 8002b40:	00d2      	lsls	r2, r2, #3
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d00e      	beq.n	8002b64 <UART_SetConfig+0x210>
 8002b46:	e01b      	b.n	8002b80 <UART_SetConfig+0x22c>
 8002b48:	231b      	movs	r3, #27
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	189b      	adds	r3, r3, r2
 8002b4e:	19db      	adds	r3, r3, r7
 8002b50:	2200      	movs	r2, #0
 8002b52:	701a      	strb	r2, [r3, #0]
 8002b54:	e021      	b.n	8002b9a <UART_SetConfig+0x246>
 8002b56:	231b      	movs	r3, #27
 8002b58:	2220      	movs	r2, #32
 8002b5a:	189b      	adds	r3, r3, r2
 8002b5c:	19db      	adds	r3, r3, r7
 8002b5e:	2202      	movs	r2, #2
 8002b60:	701a      	strb	r2, [r3, #0]
 8002b62:	e01a      	b.n	8002b9a <UART_SetConfig+0x246>
 8002b64:	231b      	movs	r3, #27
 8002b66:	2220      	movs	r2, #32
 8002b68:	189b      	adds	r3, r3, r2
 8002b6a:	19db      	adds	r3, r3, r7
 8002b6c:	2204      	movs	r2, #4
 8002b6e:	701a      	strb	r2, [r3, #0]
 8002b70:	e013      	b.n	8002b9a <UART_SetConfig+0x246>
 8002b72:	231b      	movs	r3, #27
 8002b74:	2220      	movs	r2, #32
 8002b76:	189b      	adds	r3, r3, r2
 8002b78:	19db      	adds	r3, r3, r7
 8002b7a:	2208      	movs	r2, #8
 8002b7c:	701a      	strb	r2, [r3, #0]
 8002b7e:	e00c      	b.n	8002b9a <UART_SetConfig+0x246>
 8002b80:	231b      	movs	r3, #27
 8002b82:	2220      	movs	r2, #32
 8002b84:	189b      	adds	r3, r3, r2
 8002b86:	19db      	adds	r3, r3, r7
 8002b88:	2210      	movs	r2, #16
 8002b8a:	701a      	strb	r2, [r3, #0]
 8002b8c:	e005      	b.n	8002b9a <UART_SetConfig+0x246>
 8002b8e:	231b      	movs	r3, #27
 8002b90:	2220      	movs	r2, #32
 8002b92:	189b      	adds	r3, r3, r2
 8002b94:	19db      	adds	r3, r3, r7
 8002b96:	2210      	movs	r2, #16
 8002b98:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a2b      	ldr	r2, [pc, #172]	@ (8002c4c <UART_SetConfig+0x2f8>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d000      	beq.n	8002ba6 <UART_SetConfig+0x252>
 8002ba4:	e0a9      	b.n	8002cfa <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002ba6:	231b      	movs	r3, #27
 8002ba8:	2220      	movs	r2, #32
 8002baa:	189b      	adds	r3, r3, r2
 8002bac:	19db      	adds	r3, r3, r7
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	d015      	beq.n	8002be0 <UART_SetConfig+0x28c>
 8002bb4:	dc18      	bgt.n	8002be8 <UART_SetConfig+0x294>
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	d00d      	beq.n	8002bd6 <UART_SetConfig+0x282>
 8002bba:	dc15      	bgt.n	8002be8 <UART_SetConfig+0x294>
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d002      	beq.n	8002bc6 <UART_SetConfig+0x272>
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d005      	beq.n	8002bd0 <UART_SetConfig+0x27c>
 8002bc4:	e010      	b.n	8002be8 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bc6:	f7ff f859 	bl	8001c7c <HAL_RCC_GetPCLK1Freq>
 8002bca:	0003      	movs	r3, r0
 8002bcc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002bce:	e014      	b.n	8002bfa <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bd0:	4b25      	ldr	r3, [pc, #148]	@ (8002c68 <UART_SetConfig+0x314>)
 8002bd2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002bd4:	e011      	b.n	8002bfa <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bd6:	f7fe ffc5 	bl	8001b64 <HAL_RCC_GetSysClockFreq>
 8002bda:	0003      	movs	r3, r0
 8002bdc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002bde:	e00c      	b.n	8002bfa <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002be0:	2380      	movs	r3, #128	@ 0x80
 8002be2:	021b      	lsls	r3, r3, #8
 8002be4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002be6:	e008      	b.n	8002bfa <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8002be8:	2300      	movs	r3, #0
 8002bea:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8002bec:	231a      	movs	r3, #26
 8002bee:	2220      	movs	r2, #32
 8002bf0:	189b      	adds	r3, r3, r2
 8002bf2:	19db      	adds	r3, r3, r7
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	701a      	strb	r2, [r3, #0]
        break;
 8002bf8:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002bfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d100      	bne.n	8002c02 <UART_SetConfig+0x2ae>
 8002c00:	e14b      	b.n	8002e9a <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c06:	4b19      	ldr	r3, [pc, #100]	@ (8002c6c <UART_SetConfig+0x318>)
 8002c08:	0052      	lsls	r2, r2, #1
 8002c0a:	5ad3      	ldrh	r3, [r2, r3]
 8002c0c:	0019      	movs	r1, r3
 8002c0e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002c10:	f7fd fa82 	bl	8000118 <__udivsi3>
 8002c14:	0003      	movs	r3, r0
 8002c16:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1a:	685a      	ldr	r2, [r3, #4]
 8002c1c:	0013      	movs	r3, r2
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	189b      	adds	r3, r3, r2
 8002c22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d305      	bcc.n	8002c34 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002c2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d91d      	bls.n	8002c70 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8002c34:	231a      	movs	r3, #26
 8002c36:	2220      	movs	r2, #32
 8002c38:	189b      	adds	r3, r3, r2
 8002c3a:	19db      	adds	r3, r3, r7
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	701a      	strb	r2, [r3, #0]
 8002c40:	e12b      	b.n	8002e9a <UART_SetConfig+0x546>
 8002c42:	46c0      	nop			@ (mov r8, r8)
 8002c44:	cfff69f3 	.word	0xcfff69f3
 8002c48:	ffffcfff 	.word	0xffffcfff
 8002c4c:	40008000 	.word	0x40008000
 8002c50:	11fff4ff 	.word	0x11fff4ff
 8002c54:	40013800 	.word	0x40013800
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	40004400 	.word	0x40004400
 8002c60:	40004800 	.word	0x40004800
 8002c64:	40004c00 	.word	0x40004c00
 8002c68:	00f42400 	.word	0x00f42400
 8002c6c:	08004fb4 	.word	0x08004fb4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c72:	61bb      	str	r3, [r7, #24]
 8002c74:	2300      	movs	r3, #0
 8002c76:	61fb      	str	r3, [r7, #28]
 8002c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c7c:	4b92      	ldr	r3, [pc, #584]	@ (8002ec8 <UART_SetConfig+0x574>)
 8002c7e:	0052      	lsls	r2, r2, #1
 8002c80:	5ad3      	ldrh	r3, [r2, r3]
 8002c82:	613b      	str	r3, [r7, #16]
 8002c84:	2300      	movs	r3, #0
 8002c86:	617b      	str	r3, [r7, #20]
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	69b8      	ldr	r0, [r7, #24]
 8002c8e:	69f9      	ldr	r1, [r7, #28]
 8002c90:	f7fd fbb8 	bl	8000404 <__aeabi_uldivmod>
 8002c94:	0002      	movs	r2, r0
 8002c96:	000b      	movs	r3, r1
 8002c98:	0e11      	lsrs	r1, r2, #24
 8002c9a:	021d      	lsls	r5, r3, #8
 8002c9c:	430d      	orrs	r5, r1
 8002c9e:	0214      	lsls	r4, r2, #8
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	085b      	lsrs	r3, r3, #1
 8002ca6:	60bb      	str	r3, [r7, #8]
 8002ca8:	2300      	movs	r3, #0
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	68b8      	ldr	r0, [r7, #8]
 8002cae:	68f9      	ldr	r1, [r7, #12]
 8002cb0:	1900      	adds	r0, r0, r4
 8002cb2:	4169      	adcs	r1, r5
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	603b      	str	r3, [r7, #0]
 8002cba:	2300      	movs	r3, #0
 8002cbc:	607b      	str	r3, [r7, #4]
 8002cbe:	683a      	ldr	r2, [r7, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f7fd fb9f 	bl	8000404 <__aeabi_uldivmod>
 8002cc6:	0002      	movs	r2, r0
 8002cc8:	000b      	movs	r3, r1
 8002cca:	0013      	movs	r3, r2
 8002ccc:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002cce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cd0:	23c0      	movs	r3, #192	@ 0xc0
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d309      	bcc.n	8002cec <UART_SetConfig+0x398>
 8002cd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cda:	2380      	movs	r3, #128	@ 0x80
 8002cdc:	035b      	lsls	r3, r3, #13
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d204      	bcs.n	8002cec <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ce8:	60da      	str	r2, [r3, #12]
 8002cea:	e0d6      	b.n	8002e9a <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8002cec:	231a      	movs	r3, #26
 8002cee:	2220      	movs	r2, #32
 8002cf0:	189b      	adds	r3, r3, r2
 8002cf2:	19db      	adds	r3, r3, r7
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	701a      	strb	r2, [r3, #0]
 8002cf8:	e0cf      	b.n	8002e9a <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfc:	69da      	ldr	r2, [r3, #28]
 8002cfe:	2380      	movs	r3, #128	@ 0x80
 8002d00:	021b      	lsls	r3, r3, #8
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d000      	beq.n	8002d08 <UART_SetConfig+0x3b4>
 8002d06:	e070      	b.n	8002dea <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8002d08:	231b      	movs	r3, #27
 8002d0a:	2220      	movs	r2, #32
 8002d0c:	189b      	adds	r3, r3, r2
 8002d0e:	19db      	adds	r3, r3, r7
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	2b08      	cmp	r3, #8
 8002d14:	d015      	beq.n	8002d42 <UART_SetConfig+0x3ee>
 8002d16:	dc18      	bgt.n	8002d4a <UART_SetConfig+0x3f6>
 8002d18:	2b04      	cmp	r3, #4
 8002d1a:	d00d      	beq.n	8002d38 <UART_SetConfig+0x3e4>
 8002d1c:	dc15      	bgt.n	8002d4a <UART_SetConfig+0x3f6>
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d002      	beq.n	8002d28 <UART_SetConfig+0x3d4>
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d005      	beq.n	8002d32 <UART_SetConfig+0x3de>
 8002d26:	e010      	b.n	8002d4a <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d28:	f7fe ffa8 	bl	8001c7c <HAL_RCC_GetPCLK1Freq>
 8002d2c:	0003      	movs	r3, r0
 8002d2e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002d30:	e014      	b.n	8002d5c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d32:	4b66      	ldr	r3, [pc, #408]	@ (8002ecc <UART_SetConfig+0x578>)
 8002d34:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002d36:	e011      	b.n	8002d5c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d38:	f7fe ff14 	bl	8001b64 <HAL_RCC_GetSysClockFreq>
 8002d3c:	0003      	movs	r3, r0
 8002d3e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002d40:	e00c      	b.n	8002d5c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d42:	2380      	movs	r3, #128	@ 0x80
 8002d44:	021b      	lsls	r3, r3, #8
 8002d46:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002d48:	e008      	b.n	8002d5c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8002d4e:	231a      	movs	r3, #26
 8002d50:	2220      	movs	r2, #32
 8002d52:	189b      	adds	r3, r3, r2
 8002d54:	19db      	adds	r3, r3, r7
 8002d56:	2201      	movs	r2, #1
 8002d58:	701a      	strb	r2, [r3, #0]
        break;
 8002d5a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d100      	bne.n	8002d64 <UART_SetConfig+0x410>
 8002d62:	e09a      	b.n	8002e9a <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d68:	4b57      	ldr	r3, [pc, #348]	@ (8002ec8 <UART_SetConfig+0x574>)
 8002d6a:	0052      	lsls	r2, r2, #1
 8002d6c:	5ad3      	ldrh	r3, [r2, r3]
 8002d6e:	0019      	movs	r1, r3
 8002d70:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002d72:	f7fd f9d1 	bl	8000118 <__udivsi3>
 8002d76:	0003      	movs	r3, r0
 8002d78:	005a      	lsls	r2, r3, #1
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	085b      	lsrs	r3, r3, #1
 8002d80:	18d2      	adds	r2, r2, r3
 8002d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	0019      	movs	r1, r3
 8002d88:	0010      	movs	r0, r2
 8002d8a:	f7fd f9c5 	bl	8000118 <__udivsi3>
 8002d8e:	0003      	movs	r3, r0
 8002d90:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d94:	2b0f      	cmp	r3, #15
 8002d96:	d921      	bls.n	8002ddc <UART_SetConfig+0x488>
 8002d98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d9a:	2380      	movs	r3, #128	@ 0x80
 8002d9c:	025b      	lsls	r3, r3, #9
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d21c      	bcs.n	8002ddc <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	200e      	movs	r0, #14
 8002da8:	2420      	movs	r4, #32
 8002daa:	1903      	adds	r3, r0, r4
 8002dac:	19db      	adds	r3, r3, r7
 8002dae:	210f      	movs	r1, #15
 8002db0:	438a      	bics	r2, r1
 8002db2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002db6:	085b      	lsrs	r3, r3, #1
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	2207      	movs	r2, #7
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	b299      	uxth	r1, r3
 8002dc0:	1903      	adds	r3, r0, r4
 8002dc2:	19db      	adds	r3, r3, r7
 8002dc4:	1902      	adds	r2, r0, r4
 8002dc6:	19d2      	adds	r2, r2, r7
 8002dc8:	8812      	ldrh	r2, [r2, #0]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	1902      	adds	r2, r0, r4
 8002dd4:	19d2      	adds	r2, r2, r7
 8002dd6:	8812      	ldrh	r2, [r2, #0]
 8002dd8:	60da      	str	r2, [r3, #12]
 8002dda:	e05e      	b.n	8002e9a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002ddc:	231a      	movs	r3, #26
 8002dde:	2220      	movs	r2, #32
 8002de0:	189b      	adds	r3, r3, r2
 8002de2:	19db      	adds	r3, r3, r7
 8002de4:	2201      	movs	r2, #1
 8002de6:	701a      	strb	r2, [r3, #0]
 8002de8:	e057      	b.n	8002e9a <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002dea:	231b      	movs	r3, #27
 8002dec:	2220      	movs	r2, #32
 8002dee:	189b      	adds	r3, r3, r2
 8002df0:	19db      	adds	r3, r3, r7
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	2b08      	cmp	r3, #8
 8002df6:	d015      	beq.n	8002e24 <UART_SetConfig+0x4d0>
 8002df8:	dc18      	bgt.n	8002e2c <UART_SetConfig+0x4d8>
 8002dfa:	2b04      	cmp	r3, #4
 8002dfc:	d00d      	beq.n	8002e1a <UART_SetConfig+0x4c6>
 8002dfe:	dc15      	bgt.n	8002e2c <UART_SetConfig+0x4d8>
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d002      	beq.n	8002e0a <UART_SetConfig+0x4b6>
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d005      	beq.n	8002e14 <UART_SetConfig+0x4c0>
 8002e08:	e010      	b.n	8002e2c <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e0a:	f7fe ff37 	bl	8001c7c <HAL_RCC_GetPCLK1Freq>
 8002e0e:	0003      	movs	r3, r0
 8002e10:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002e12:	e014      	b.n	8002e3e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e14:	4b2d      	ldr	r3, [pc, #180]	@ (8002ecc <UART_SetConfig+0x578>)
 8002e16:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002e18:	e011      	b.n	8002e3e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e1a:	f7fe fea3 	bl	8001b64 <HAL_RCC_GetSysClockFreq>
 8002e1e:	0003      	movs	r3, r0
 8002e20:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002e22:	e00c      	b.n	8002e3e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e24:	2380      	movs	r3, #128	@ 0x80
 8002e26:	021b      	lsls	r3, r3, #8
 8002e28:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002e2a:	e008      	b.n	8002e3e <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8002e30:	231a      	movs	r3, #26
 8002e32:	2220      	movs	r2, #32
 8002e34:	189b      	adds	r3, r3, r2
 8002e36:	19db      	adds	r3, r3, r7
 8002e38:	2201      	movs	r2, #1
 8002e3a:	701a      	strb	r2, [r3, #0]
        break;
 8002e3c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002e3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d02a      	beq.n	8002e9a <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e46:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e48:	4b1f      	ldr	r3, [pc, #124]	@ (8002ec8 <UART_SetConfig+0x574>)
 8002e4a:	0052      	lsls	r2, r2, #1
 8002e4c:	5ad3      	ldrh	r3, [r2, r3]
 8002e4e:	0019      	movs	r1, r3
 8002e50:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002e52:	f7fd f961 	bl	8000118 <__udivsi3>
 8002e56:	0003      	movs	r3, r0
 8002e58:	001a      	movs	r2, r3
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	085b      	lsrs	r3, r3, #1
 8002e60:	18d2      	adds	r2, r2, r3
 8002e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	0019      	movs	r1, r3
 8002e68:	0010      	movs	r0, r2
 8002e6a:	f7fd f955 	bl	8000118 <__udivsi3>
 8002e6e:	0003      	movs	r3, r0
 8002e70:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e74:	2b0f      	cmp	r3, #15
 8002e76:	d90a      	bls.n	8002e8e <UART_SetConfig+0x53a>
 8002e78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e7a:	2380      	movs	r3, #128	@ 0x80
 8002e7c:	025b      	lsls	r3, r3, #9
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d205      	bcs.n	8002e8e <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	60da      	str	r2, [r3, #12]
 8002e8c:	e005      	b.n	8002e9a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002e8e:	231a      	movs	r3, #26
 8002e90:	2220      	movs	r2, #32
 8002e92:	189b      	adds	r3, r3, r2
 8002e94:	19db      	adds	r3, r3, r7
 8002e96:	2201      	movs	r2, #1
 8002e98:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9c:	226a      	movs	r2, #106	@ 0x6a
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea4:	2268      	movs	r2, #104	@ 0x68
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eac:	2200      	movs	r2, #0
 8002eae:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002eb6:	231a      	movs	r3, #26
 8002eb8:	2220      	movs	r2, #32
 8002eba:	189b      	adds	r3, r3, r2
 8002ebc:	19db      	adds	r3, r3, r7
 8002ebe:	781b      	ldrb	r3, [r3, #0]
}
 8002ec0:	0018      	movs	r0, r3
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	b010      	add	sp, #64	@ 0x40
 8002ec6:	bdb0      	pop	{r4, r5, r7, pc}
 8002ec8:	08004fb4 	.word	0x08004fb4
 8002ecc:	00f42400 	.word	0x00f42400

08002ed0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002edc:	2208      	movs	r2, #8
 8002ede:	4013      	ands	r3, r2
 8002ee0:	d00b      	beq.n	8002efa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	4a4a      	ldr	r2, [pc, #296]	@ (8003014 <UART_AdvFeatureConfig+0x144>)
 8002eea:	4013      	ands	r3, r2
 8002eec:	0019      	movs	r1, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002efe:	2201      	movs	r2, #1
 8002f00:	4013      	ands	r3, r2
 8002f02:	d00b      	beq.n	8002f1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	4a43      	ldr	r2, [pc, #268]	@ (8003018 <UART_AdvFeatureConfig+0x148>)
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	0019      	movs	r1, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f20:	2202      	movs	r2, #2
 8002f22:	4013      	ands	r3, r2
 8002f24:	d00b      	beq.n	8002f3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	4a3b      	ldr	r2, [pc, #236]	@ (800301c <UART_AdvFeatureConfig+0x14c>)
 8002f2e:	4013      	ands	r3, r2
 8002f30:	0019      	movs	r1, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f42:	2204      	movs	r2, #4
 8002f44:	4013      	ands	r3, r2
 8002f46:	d00b      	beq.n	8002f60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	4a34      	ldr	r2, [pc, #208]	@ (8003020 <UART_AdvFeatureConfig+0x150>)
 8002f50:	4013      	ands	r3, r2
 8002f52:	0019      	movs	r1, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f64:	2210      	movs	r2, #16
 8002f66:	4013      	ands	r3, r2
 8002f68:	d00b      	beq.n	8002f82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	4a2c      	ldr	r2, [pc, #176]	@ (8003024 <UART_AdvFeatureConfig+0x154>)
 8002f72:	4013      	ands	r3, r2
 8002f74:	0019      	movs	r1, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f86:	2220      	movs	r2, #32
 8002f88:	4013      	ands	r3, r2
 8002f8a:	d00b      	beq.n	8002fa4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	4a25      	ldr	r2, [pc, #148]	@ (8003028 <UART_AdvFeatureConfig+0x158>)
 8002f94:	4013      	ands	r3, r2
 8002f96:	0019      	movs	r1, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fa8:	2240      	movs	r2, #64	@ 0x40
 8002faa:	4013      	ands	r3, r2
 8002fac:	d01d      	beq.n	8002fea <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	4a1d      	ldr	r2, [pc, #116]	@ (800302c <UART_AdvFeatureConfig+0x15c>)
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	0019      	movs	r1, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002fca:	2380      	movs	r3, #128	@ 0x80
 8002fcc:	035b      	lsls	r3, r3, #13
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d10b      	bne.n	8002fea <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	4a15      	ldr	r2, [pc, #84]	@ (8003030 <UART_AdvFeatureConfig+0x160>)
 8002fda:	4013      	ands	r3, r2
 8002fdc:	0019      	movs	r1, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fee:	2280      	movs	r2, #128	@ 0x80
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	d00b      	beq.n	800300c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	4a0e      	ldr	r2, [pc, #56]	@ (8003034 <UART_AdvFeatureConfig+0x164>)
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	0019      	movs	r1, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	430a      	orrs	r2, r1
 800300a:	605a      	str	r2, [r3, #4]
  }
}
 800300c:	46c0      	nop			@ (mov r8, r8)
 800300e:	46bd      	mov	sp, r7
 8003010:	b002      	add	sp, #8
 8003012:	bd80      	pop	{r7, pc}
 8003014:	ffff7fff 	.word	0xffff7fff
 8003018:	fffdffff 	.word	0xfffdffff
 800301c:	fffeffff 	.word	0xfffeffff
 8003020:	fffbffff 	.word	0xfffbffff
 8003024:	ffffefff 	.word	0xffffefff
 8003028:	ffffdfff 	.word	0xffffdfff
 800302c:	ffefffff 	.word	0xffefffff
 8003030:	ff9fffff 	.word	0xff9fffff
 8003034:	fff7ffff 	.word	0xfff7ffff

08003038 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b092      	sub	sp, #72	@ 0x48
 800303c:	af02      	add	r7, sp, #8
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2290      	movs	r2, #144	@ 0x90
 8003044:	2100      	movs	r1, #0
 8003046:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003048:	f7fd fde8 	bl	8000c1c <HAL_GetTick>
 800304c:	0003      	movs	r3, r0
 800304e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2208      	movs	r2, #8
 8003058:	4013      	ands	r3, r2
 800305a:	2b08      	cmp	r3, #8
 800305c:	d12d      	bne.n	80030ba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800305e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003060:	2280      	movs	r2, #128	@ 0x80
 8003062:	0391      	lsls	r1, r2, #14
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	4a47      	ldr	r2, [pc, #284]	@ (8003184 <UART_CheckIdleState+0x14c>)
 8003068:	9200      	str	r2, [sp, #0]
 800306a:	2200      	movs	r2, #0
 800306c:	f000 f88e 	bl	800318c <UART_WaitOnFlagUntilTimeout>
 8003070:	1e03      	subs	r3, r0, #0
 8003072:	d022      	beq.n	80030ba <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003074:	f3ef 8310 	mrs	r3, PRIMASK
 8003078:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800307a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800307c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800307e:	2301      	movs	r3, #1
 8003080:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003084:	f383 8810 	msr	PRIMASK, r3
}
 8003088:	46c0      	nop			@ (mov r8, r8)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2180      	movs	r1, #128	@ 0x80
 8003096:	438a      	bics	r2, r1
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800309c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800309e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030a0:	f383 8810 	msr	PRIMASK, r3
}
 80030a4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2288      	movs	r2, #136	@ 0x88
 80030aa:	2120      	movs	r1, #32
 80030ac:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2284      	movs	r2, #132	@ 0x84
 80030b2:	2100      	movs	r1, #0
 80030b4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e060      	b.n	800317c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2204      	movs	r2, #4
 80030c2:	4013      	ands	r3, r2
 80030c4:	2b04      	cmp	r3, #4
 80030c6:	d146      	bne.n	8003156 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030ca:	2280      	movs	r2, #128	@ 0x80
 80030cc:	03d1      	lsls	r1, r2, #15
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	4a2c      	ldr	r2, [pc, #176]	@ (8003184 <UART_CheckIdleState+0x14c>)
 80030d2:	9200      	str	r2, [sp, #0]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f000 f859 	bl	800318c <UART_WaitOnFlagUntilTimeout>
 80030da:	1e03      	subs	r3, r0, #0
 80030dc:	d03b      	beq.n	8003156 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030de:	f3ef 8310 	mrs	r3, PRIMASK
 80030e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80030e4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80030e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80030e8:	2301      	movs	r3, #1
 80030ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	f383 8810 	msr	PRIMASK, r3
}
 80030f2:	46c0      	nop			@ (mov r8, r8)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4922      	ldr	r1, [pc, #136]	@ (8003188 <UART_CheckIdleState+0x150>)
 8003100:	400a      	ands	r2, r1
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003106:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	f383 8810 	msr	PRIMASK, r3
}
 800310e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003110:	f3ef 8310 	mrs	r3, PRIMASK
 8003114:	61bb      	str	r3, [r7, #24]
  return(result);
 8003116:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003118:	633b      	str	r3, [r7, #48]	@ 0x30
 800311a:	2301      	movs	r3, #1
 800311c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	f383 8810 	msr	PRIMASK, r3
}
 8003124:	46c0      	nop			@ (mov r8, r8)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2101      	movs	r1, #1
 8003132:	438a      	bics	r2, r1
 8003134:	609a      	str	r2, [r3, #8]
 8003136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003138:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800313a:	6a3b      	ldr	r3, [r7, #32]
 800313c:	f383 8810 	msr	PRIMASK, r3
}
 8003140:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	228c      	movs	r2, #140	@ 0x8c
 8003146:	2120      	movs	r1, #32
 8003148:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2284      	movs	r2, #132	@ 0x84
 800314e:	2100      	movs	r1, #0
 8003150:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e012      	b.n	800317c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2288      	movs	r2, #136	@ 0x88
 800315a:	2120      	movs	r1, #32
 800315c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	228c      	movs	r2, #140	@ 0x8c
 8003162:	2120      	movs	r1, #32
 8003164:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2284      	movs	r2, #132	@ 0x84
 8003176:	2100      	movs	r1, #0
 8003178:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800317a:	2300      	movs	r3, #0
}
 800317c:	0018      	movs	r0, r3
 800317e:	46bd      	mov	sp, r7
 8003180:	b010      	add	sp, #64	@ 0x40
 8003182:	bd80      	pop	{r7, pc}
 8003184:	01ffffff 	.word	0x01ffffff
 8003188:	fffffedf 	.word	0xfffffedf

0800318c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	603b      	str	r3, [r7, #0]
 8003198:	1dfb      	adds	r3, r7, #7
 800319a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800319c:	e051      	b.n	8003242 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	3301      	adds	r3, #1
 80031a2:	d04e      	beq.n	8003242 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031a4:	f7fd fd3a 	bl	8000c1c <HAL_GetTick>
 80031a8:	0002      	movs	r2, r0
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d302      	bcc.n	80031ba <UART_WaitOnFlagUntilTimeout+0x2e>
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e051      	b.n	8003262 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2204      	movs	r2, #4
 80031c6:	4013      	ands	r3, r2
 80031c8:	d03b      	beq.n	8003242 <UART_WaitOnFlagUntilTimeout+0xb6>
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	2b80      	cmp	r3, #128	@ 0x80
 80031ce:	d038      	beq.n	8003242 <UART_WaitOnFlagUntilTimeout+0xb6>
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	2b40      	cmp	r3, #64	@ 0x40
 80031d4:	d035      	beq.n	8003242 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	69db      	ldr	r3, [r3, #28]
 80031dc:	2208      	movs	r2, #8
 80031de:	4013      	ands	r3, r2
 80031e0:	2b08      	cmp	r3, #8
 80031e2:	d111      	bne.n	8003208 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2208      	movs	r2, #8
 80031ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	0018      	movs	r0, r3
 80031f0:	f000 f960 	bl	80034b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2290      	movs	r2, #144	@ 0x90
 80031f8:	2108      	movs	r1, #8
 80031fa:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2284      	movs	r2, #132	@ 0x84
 8003200:	2100      	movs	r1, #0
 8003202:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e02c      	b.n	8003262 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	69da      	ldr	r2, [r3, #28]
 800320e:	2380      	movs	r3, #128	@ 0x80
 8003210:	011b      	lsls	r3, r3, #4
 8003212:	401a      	ands	r2, r3
 8003214:	2380      	movs	r3, #128	@ 0x80
 8003216:	011b      	lsls	r3, r3, #4
 8003218:	429a      	cmp	r2, r3
 800321a:	d112      	bne.n	8003242 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2280      	movs	r2, #128	@ 0x80
 8003222:	0112      	lsls	r2, r2, #4
 8003224:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	0018      	movs	r0, r3
 800322a:	f000 f943 	bl	80034b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2290      	movs	r2, #144	@ 0x90
 8003232:	2120      	movs	r1, #32
 8003234:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2284      	movs	r2, #132	@ 0x84
 800323a:	2100      	movs	r1, #0
 800323c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e00f      	b.n	8003262 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	69db      	ldr	r3, [r3, #28]
 8003248:	68ba      	ldr	r2, [r7, #8]
 800324a:	4013      	ands	r3, r2
 800324c:	68ba      	ldr	r2, [r7, #8]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	425a      	negs	r2, r3
 8003252:	4153      	adcs	r3, r2
 8003254:	b2db      	uxtb	r3, r3
 8003256:	001a      	movs	r2, r3
 8003258:	1dfb      	adds	r3, r7, #7
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	429a      	cmp	r2, r3
 800325e:	d09e      	beq.n	800319e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	0018      	movs	r0, r3
 8003264:	46bd      	mov	sp, r7
 8003266:	b004      	add	sp, #16
 8003268:	bd80      	pop	{r7, pc}
	...

0800326c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b098      	sub	sp, #96	@ 0x60
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	1dbb      	adds	r3, r7, #6
 8003278:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	68ba      	ldr	r2, [r7, #8]
 800327e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	1dba      	adds	r2, r7, #6
 8003284:	215c      	movs	r1, #92	@ 0x5c
 8003286:	8812      	ldrh	r2, [r2, #0]
 8003288:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	1dba      	adds	r2, r7, #6
 800328e:	215e      	movs	r1, #94	@ 0x5e
 8003290:	8812      	ldrh	r2, [r2, #0]
 8003292:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	689a      	ldr	r2, [r3, #8]
 800329e:	2380      	movs	r3, #128	@ 0x80
 80032a0:	015b      	lsls	r3, r3, #5
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d10d      	bne.n	80032c2 <UART_Start_Receive_IT+0x56>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d104      	bne.n	80032b8 <UART_Start_Receive_IT+0x4c>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2260      	movs	r2, #96	@ 0x60
 80032b2:	497b      	ldr	r1, [pc, #492]	@ (80034a0 <UART_Start_Receive_IT+0x234>)
 80032b4:	5299      	strh	r1, [r3, r2]
 80032b6:	e02e      	b.n	8003316 <UART_Start_Receive_IT+0xaa>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2260      	movs	r2, #96	@ 0x60
 80032bc:	21ff      	movs	r1, #255	@ 0xff
 80032be:	5299      	strh	r1, [r3, r2]
 80032c0:	e029      	b.n	8003316 <UART_Start_Receive_IT+0xaa>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d10d      	bne.n	80032e6 <UART_Start_Receive_IT+0x7a>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d104      	bne.n	80032dc <UART_Start_Receive_IT+0x70>
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2260      	movs	r2, #96	@ 0x60
 80032d6:	21ff      	movs	r1, #255	@ 0xff
 80032d8:	5299      	strh	r1, [r3, r2]
 80032da:	e01c      	b.n	8003316 <UART_Start_Receive_IT+0xaa>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2260      	movs	r2, #96	@ 0x60
 80032e0:	217f      	movs	r1, #127	@ 0x7f
 80032e2:	5299      	strh	r1, [r3, r2]
 80032e4:	e017      	b.n	8003316 <UART_Start_Receive_IT+0xaa>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	689a      	ldr	r2, [r3, #8]
 80032ea:	2380      	movs	r3, #128	@ 0x80
 80032ec:	055b      	lsls	r3, r3, #21
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d10d      	bne.n	800330e <UART_Start_Receive_IT+0xa2>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d104      	bne.n	8003304 <UART_Start_Receive_IT+0x98>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2260      	movs	r2, #96	@ 0x60
 80032fe:	217f      	movs	r1, #127	@ 0x7f
 8003300:	5299      	strh	r1, [r3, r2]
 8003302:	e008      	b.n	8003316 <UART_Start_Receive_IT+0xaa>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2260      	movs	r2, #96	@ 0x60
 8003308:	213f      	movs	r1, #63	@ 0x3f
 800330a:	5299      	strh	r1, [r3, r2]
 800330c:	e003      	b.n	8003316 <UART_Start_Receive_IT+0xaa>
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2260      	movs	r2, #96	@ 0x60
 8003312:	2100      	movs	r1, #0
 8003314:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2290      	movs	r2, #144	@ 0x90
 800331a:	2100      	movs	r1, #0
 800331c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	228c      	movs	r2, #140	@ 0x8c
 8003322:	2122      	movs	r1, #34	@ 0x22
 8003324:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003326:	f3ef 8310 	mrs	r3, PRIMASK
 800332a:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 800332c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800332e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003330:	2301      	movs	r3, #1
 8003332:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003334:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003336:	f383 8810 	msr	PRIMASK, r3
}
 800333a:	46c0      	nop			@ (mov r8, r8)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	689a      	ldr	r2, [r3, #8]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2101      	movs	r1, #1
 8003348:	430a      	orrs	r2, r1
 800334a:	609a      	str	r2, [r3, #8]
 800334c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800334e:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003350:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003352:	f383 8810 	msr	PRIMASK, r3
}
 8003356:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800335c:	2380      	movs	r3, #128	@ 0x80
 800335e:	059b      	lsls	r3, r3, #22
 8003360:	429a      	cmp	r2, r3
 8003362:	d150      	bne.n	8003406 <UART_Start_Receive_IT+0x19a>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2268      	movs	r2, #104	@ 0x68
 8003368:	5a9b      	ldrh	r3, [r3, r2]
 800336a:	1dba      	adds	r2, r7, #6
 800336c:	8812      	ldrh	r2, [r2, #0]
 800336e:	429a      	cmp	r2, r3
 8003370:	d349      	bcc.n	8003406 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	689a      	ldr	r2, [r3, #8]
 8003376:	2380      	movs	r3, #128	@ 0x80
 8003378:	015b      	lsls	r3, r3, #5
 800337a:	429a      	cmp	r2, r3
 800337c:	d107      	bne.n	800338e <UART_Start_Receive_IT+0x122>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d103      	bne.n	800338e <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	4a46      	ldr	r2, [pc, #280]	@ (80034a4 <UART_Start_Receive_IT+0x238>)
 800338a:	675a      	str	r2, [r3, #116]	@ 0x74
 800338c:	e002      	b.n	8003394 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	4a45      	ldr	r2, [pc, #276]	@ (80034a8 <UART_Start_Receive_IT+0x23c>)
 8003392:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d019      	beq.n	80033d0 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800339c:	f3ef 8310 	mrs	r3, PRIMASK
 80033a0:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 80033a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80033a6:	2301      	movs	r3, #1
 80033a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033ac:	f383 8810 	msr	PRIMASK, r3
}
 80033b0:	46c0      	nop			@ (mov r8, r8)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2180      	movs	r1, #128	@ 0x80
 80033be:	0049      	lsls	r1, r1, #1
 80033c0:	430a      	orrs	r2, r1
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80033c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033ca:	f383 8810 	msr	PRIMASK, r3
}
 80033ce:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033d0:	f3ef 8310 	mrs	r3, PRIMASK
 80033d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80033d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80033d8:	657b      	str	r3, [r7, #84]	@ 0x54
 80033da:	2301      	movs	r3, #1
 80033dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033e0:	f383 8810 	msr	PRIMASK, r3
}
 80033e4:	46c0      	nop			@ (mov r8, r8)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2180      	movs	r1, #128	@ 0x80
 80033f2:	0549      	lsls	r1, r1, #21
 80033f4:	430a      	orrs	r2, r1
 80033f6:	609a      	str	r2, [r3, #8]
 80033f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033fa:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033fe:	f383 8810 	msr	PRIMASK, r3
}
 8003402:	46c0      	nop			@ (mov r8, r8)
 8003404:	e047      	b.n	8003496 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	689a      	ldr	r2, [r3, #8]
 800340a:	2380      	movs	r3, #128	@ 0x80
 800340c:	015b      	lsls	r3, r3, #5
 800340e:	429a      	cmp	r2, r3
 8003410:	d107      	bne.n	8003422 <UART_Start_Receive_IT+0x1b6>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d103      	bne.n	8003422 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	4a23      	ldr	r2, [pc, #140]	@ (80034ac <UART_Start_Receive_IT+0x240>)
 800341e:	675a      	str	r2, [r3, #116]	@ 0x74
 8003420:	e002      	b.n	8003428 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	4a22      	ldr	r2, [pc, #136]	@ (80034b0 <UART_Start_Receive_IT+0x244>)
 8003426:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d019      	beq.n	8003464 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003430:	f3ef 8310 	mrs	r3, PRIMASK
 8003434:	61fb      	str	r3, [r7, #28]
  return(result);
 8003436:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003438:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800343a:	2301      	movs	r3, #1
 800343c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800343e:	6a3b      	ldr	r3, [r7, #32]
 8003440:	f383 8810 	msr	PRIMASK, r3
}
 8003444:	46c0      	nop			@ (mov r8, r8)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2190      	movs	r1, #144	@ 0x90
 8003452:	0049      	lsls	r1, r1, #1
 8003454:	430a      	orrs	r2, r1
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800345a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800345c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800345e:	f383 8810 	msr	PRIMASK, r3
}
 8003462:	e018      	b.n	8003496 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003464:	f3ef 8310 	mrs	r3, PRIMASK
 8003468:	613b      	str	r3, [r7, #16]
  return(result);
 800346a:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800346c:	653b      	str	r3, [r7, #80]	@ 0x50
 800346e:	2301      	movs	r3, #1
 8003470:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	f383 8810 	msr	PRIMASK, r3
}
 8003478:	46c0      	nop			@ (mov r8, r8)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2120      	movs	r1, #32
 8003486:	430a      	orrs	r2, r1
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800348c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	f383 8810 	msr	PRIMASK, r3
}
 8003494:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	0018      	movs	r0, r3
 800349a:	46bd      	mov	sp, r7
 800349c:	b018      	add	sp, #96	@ 0x60
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	000001ff 	.word	0x000001ff
 80034a4:	08004021 	.word	0x08004021
 80034a8:	08003ce1 	.word	0x08003ce1
 80034ac:	08003b1d 	.word	0x08003b1d
 80034b0:	08003959 	.word	0x08003959

080034b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b08e      	sub	sp, #56	@ 0x38
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034bc:	f3ef 8310 	mrs	r3, PRIMASK
 80034c0:	617b      	str	r3, [r7, #20]
  return(result);
 80034c2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80034c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80034c6:	2301      	movs	r3, #1
 80034c8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	f383 8810 	msr	PRIMASK, r3
}
 80034d0:	46c0      	nop			@ (mov r8, r8)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4926      	ldr	r1, [pc, #152]	@ (8003578 <UART_EndRxTransfer+0xc4>)
 80034de:	400a      	ands	r2, r1
 80034e0:	601a      	str	r2, [r3, #0]
 80034e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	f383 8810 	msr	PRIMASK, r3
}
 80034ec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034ee:	f3ef 8310 	mrs	r3, PRIMASK
 80034f2:	623b      	str	r3, [r7, #32]
  return(result);
 80034f4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80034f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80034f8:	2301      	movs	r3, #1
 80034fa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034fe:	f383 8810 	msr	PRIMASK, r3
}
 8003502:	46c0      	nop			@ (mov r8, r8)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	689a      	ldr	r2, [r3, #8]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	491b      	ldr	r1, [pc, #108]	@ (800357c <UART_EndRxTransfer+0xc8>)
 8003510:	400a      	ands	r2, r1
 8003512:	609a      	str	r2, [r3, #8]
 8003514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003516:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800351a:	f383 8810 	msr	PRIMASK, r3
}
 800351e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003524:	2b01      	cmp	r3, #1
 8003526:	d118      	bne.n	800355a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003528:	f3ef 8310 	mrs	r3, PRIMASK
 800352c:	60bb      	str	r3, [r7, #8]
  return(result);
 800352e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003530:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003532:	2301      	movs	r3, #1
 8003534:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f383 8810 	msr	PRIMASK, r3
}
 800353c:	46c0      	nop			@ (mov r8, r8)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2110      	movs	r1, #16
 800354a:	438a      	bics	r2, r1
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003550:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	f383 8810 	msr	PRIMASK, r3
}
 8003558:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	228c      	movs	r2, #140	@ 0x8c
 800355e:	2120      	movs	r1, #32
 8003560:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800356e:	46c0      	nop			@ (mov r8, r8)
 8003570:	46bd      	mov	sp, r7
 8003572:	b00e      	add	sp, #56	@ 0x38
 8003574:	bd80      	pop	{r7, pc}
 8003576:	46c0      	nop			@ (mov r8, r8)
 8003578:	fffffedf 	.word	0xfffffedf
 800357c:	effffffe 	.word	0xeffffffe

08003580 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800358c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	225e      	movs	r2, #94	@ 0x5e
 8003592:	2100      	movs	r1, #0
 8003594:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2256      	movs	r2, #86	@ 0x56
 800359a:	2100      	movs	r1, #0
 800359c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	0018      	movs	r0, r3
 80035a2:	f7ff f9c3 	bl	800292c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035a6:	46c0      	nop			@ (mov r8, r8)
 80035a8:	46bd      	mov	sp, r7
 80035aa:	b004      	add	sp, #16
 80035ac:	bd80      	pop	{r7, pc}

080035ae <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b08a      	sub	sp, #40	@ 0x28
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2288      	movs	r2, #136	@ 0x88
 80035ba:	589b      	ldr	r3, [r3, r2]
 80035bc:	2b21      	cmp	r3, #33	@ 0x21
 80035be:	d14c      	bne.n	800365a <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2256      	movs	r2, #86	@ 0x56
 80035c4:	5a9b      	ldrh	r3, [r3, r2]
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d132      	bne.n	8003632 <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035cc:	f3ef 8310 	mrs	r3, PRIMASK
 80035d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80035d2:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80035d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80035d6:	2301      	movs	r3, #1
 80035d8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f383 8810 	msr	PRIMASK, r3
}
 80035e0:	46c0      	nop			@ (mov r8, r8)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2180      	movs	r1, #128	@ 0x80
 80035ee:	438a      	bics	r2, r1
 80035f0:	601a      	str	r2, [r3, #0]
 80035f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	f383 8810 	msr	PRIMASK, r3
}
 80035fc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003602:	617b      	str	r3, [r7, #20]
  return(result);
 8003604:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003606:	623b      	str	r3, [r7, #32]
 8003608:	2301      	movs	r3, #1
 800360a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	f383 8810 	msr	PRIMASK, r3
}
 8003612:	46c0      	nop			@ (mov r8, r8)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2140      	movs	r1, #64	@ 0x40
 8003620:	430a      	orrs	r2, r1
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	f383 8810 	msr	PRIMASK, r3
}
 800362e:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003630:	e013      	b.n	800365a <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003636:	781a      	ldrb	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003642:	1c5a      	adds	r2, r3, #1
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2256      	movs	r2, #86	@ 0x56
 800364c:	5a9b      	ldrh	r3, [r3, r2]
 800364e:	b29b      	uxth	r3, r3
 8003650:	3b01      	subs	r3, #1
 8003652:	b299      	uxth	r1, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2256      	movs	r2, #86	@ 0x56
 8003658:	5299      	strh	r1, [r3, r2]
}
 800365a:	46c0      	nop			@ (mov r8, r8)
 800365c:	46bd      	mov	sp, r7
 800365e:	b00a      	add	sp, #40	@ 0x28
 8003660:	bd80      	pop	{r7, pc}

08003662 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b08c      	sub	sp, #48	@ 0x30
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2288      	movs	r2, #136	@ 0x88
 800366e:	589b      	ldr	r3, [r3, r2]
 8003670:	2b21      	cmp	r3, #33	@ 0x21
 8003672:	d151      	bne.n	8003718 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2256      	movs	r2, #86	@ 0x56
 8003678:	5a9b      	ldrh	r3, [r3, r2]
 800367a:	b29b      	uxth	r3, r3
 800367c:	2b00      	cmp	r3, #0
 800367e:	d132      	bne.n	80036e6 <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003680:	f3ef 8310 	mrs	r3, PRIMASK
 8003684:	60fb      	str	r3, [r7, #12]
  return(result);
 8003686:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003688:	62bb      	str	r3, [r7, #40]	@ 0x28
 800368a:	2301      	movs	r3, #1
 800368c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	f383 8810 	msr	PRIMASK, r3
}
 8003694:	46c0      	nop			@ (mov r8, r8)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2180      	movs	r1, #128	@ 0x80
 80036a2:	438a      	bics	r2, r1
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	f383 8810 	msr	PRIMASK, r3
}
 80036b0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036b2:	f3ef 8310 	mrs	r3, PRIMASK
 80036b6:	61bb      	str	r3, [r7, #24]
  return(result);
 80036b8:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80036ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80036bc:	2301      	movs	r3, #1
 80036be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	f383 8810 	msr	PRIMASK, r3
}
 80036c6:	46c0      	nop			@ (mov r8, r8)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2140      	movs	r1, #64	@ 0x40
 80036d4:	430a      	orrs	r2, r1
 80036d6:	601a      	str	r2, [r3, #0]
 80036d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036dc:	6a3b      	ldr	r3, [r7, #32]
 80036de:	f383 8810 	msr	PRIMASK, r3
}
 80036e2:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80036e4:	e018      	b.n	8003718 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80036ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ee:	881b      	ldrh	r3, [r3, #0]
 80036f0:	001a      	movs	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	05d2      	lsls	r2, r2, #23
 80036f8:	0dd2      	lsrs	r2, r2, #23
 80036fa:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003700:	1c9a      	adds	r2, r3, #2
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2256      	movs	r2, #86	@ 0x56
 800370a:	5a9b      	ldrh	r3, [r3, r2]
 800370c:	b29b      	uxth	r3, r3
 800370e:	3b01      	subs	r3, #1
 8003710:	b299      	uxth	r1, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2256      	movs	r2, #86	@ 0x56
 8003716:	5299      	strh	r1, [r3, r2]
}
 8003718:	46c0      	nop			@ (mov r8, r8)
 800371a:	46bd      	mov	sp, r7
 800371c:	b00c      	add	sp, #48	@ 0x30
 800371e:	bd80      	pop	{r7, pc}

08003720 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b08c      	sub	sp, #48	@ 0x30
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2288      	movs	r2, #136	@ 0x88
 800372c:	589b      	ldr	r3, [r3, r2]
 800372e:	2b21      	cmp	r3, #33	@ 0x21
 8003730:	d165      	bne.n	80037fe <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003732:	232e      	movs	r3, #46	@ 0x2e
 8003734:	18fb      	adds	r3, r7, r3
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	216a      	movs	r1, #106	@ 0x6a
 800373a:	5a52      	ldrh	r2, [r2, r1]
 800373c:	801a      	strh	r2, [r3, #0]
 800373e:	e059      	b.n	80037f4 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2256      	movs	r2, #86	@ 0x56
 8003744:	5a9b      	ldrh	r3, [r3, r2]
 8003746:	b29b      	uxth	r3, r3
 8003748:	2b00      	cmp	r3, #0
 800374a:	d133      	bne.n	80037b4 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800374c:	f3ef 8310 	mrs	r3, PRIMASK
 8003750:	60fb      	str	r3, [r7, #12]
  return(result);
 8003752:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003754:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003756:	2301      	movs	r3, #1
 8003758:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	f383 8810 	msr	PRIMASK, r3
}
 8003760:	46c0      	nop			@ (mov r8, r8)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	689a      	ldr	r2, [r3, #8]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4926      	ldr	r1, [pc, #152]	@ (8003808 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 800376e:	400a      	ands	r2, r1
 8003770:	609a      	str	r2, [r3, #8]
 8003772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003774:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	f383 8810 	msr	PRIMASK, r3
}
 800377c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800377e:	f3ef 8310 	mrs	r3, PRIMASK
 8003782:	61bb      	str	r3, [r7, #24]
  return(result);
 8003784:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003786:	627b      	str	r3, [r7, #36]	@ 0x24
 8003788:	2301      	movs	r3, #1
 800378a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	f383 8810 	msr	PRIMASK, r3
}
 8003792:	46c0      	nop			@ (mov r8, r8)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2140      	movs	r1, #64	@ 0x40
 80037a0:	430a      	orrs	r2, r1
 80037a2:	601a      	str	r2, [r3, #0]
 80037a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037a8:	6a3b      	ldr	r3, [r7, #32]
 80037aa:	f383 8810 	msr	PRIMASK, r3
}
 80037ae:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 80037b0:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 80037b2:	e024      	b.n	80037fe <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	2280      	movs	r2, #128	@ 0x80
 80037bc:	4013      	ands	r3, r2
 80037be:	d013      	beq.n	80037e8 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037c4:	781a      	ldrb	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037d0:	1c5a      	adds	r2, r3, #1
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2256      	movs	r2, #86	@ 0x56
 80037da:	5a9b      	ldrh	r3, [r3, r2]
 80037dc:	b29b      	uxth	r3, r3
 80037de:	3b01      	subs	r3, #1
 80037e0:	b299      	uxth	r1, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2256      	movs	r2, #86	@ 0x56
 80037e6:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80037e8:	212e      	movs	r1, #46	@ 0x2e
 80037ea:	187b      	adds	r3, r7, r1
 80037ec:	881a      	ldrh	r2, [r3, #0]
 80037ee:	187b      	adds	r3, r7, r1
 80037f0:	3a01      	subs	r2, #1
 80037f2:	801a      	strh	r2, [r3, #0]
 80037f4:	232e      	movs	r3, #46	@ 0x2e
 80037f6:	18fb      	adds	r3, r7, r3
 80037f8:	881b      	ldrh	r3, [r3, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1a0      	bne.n	8003740 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 80037fe:	46c0      	nop			@ (mov r8, r8)
 8003800:	46bd      	mov	sp, r7
 8003802:	b00c      	add	sp, #48	@ 0x30
 8003804:	bd80      	pop	{r7, pc}
 8003806:	46c0      	nop			@ (mov r8, r8)
 8003808:	ff7fffff 	.word	0xff7fffff

0800380c <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b08c      	sub	sp, #48	@ 0x30
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2288      	movs	r2, #136	@ 0x88
 8003818:	589b      	ldr	r3, [r3, r2]
 800381a:	2b21      	cmp	r3, #33	@ 0x21
 800381c:	d16a      	bne.n	80038f4 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800381e:	232e      	movs	r3, #46	@ 0x2e
 8003820:	18fb      	adds	r3, r7, r3
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	216a      	movs	r1, #106	@ 0x6a
 8003826:	5a52      	ldrh	r2, [r2, r1]
 8003828:	801a      	strh	r2, [r3, #0]
 800382a:	e05e      	b.n	80038ea <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2256      	movs	r2, #86	@ 0x56
 8003830:	5a9b      	ldrh	r3, [r3, r2]
 8003832:	b29b      	uxth	r3, r3
 8003834:	2b00      	cmp	r3, #0
 8003836:	d133      	bne.n	80038a0 <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003838:	f3ef 8310 	mrs	r3, PRIMASK
 800383c:	60bb      	str	r3, [r7, #8]
  return(result);
 800383e:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003840:	627b      	str	r3, [r7, #36]	@ 0x24
 8003842:	2301      	movs	r3, #1
 8003844:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f383 8810 	msr	PRIMASK, r3
}
 800384c:	46c0      	nop			@ (mov r8, r8)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689a      	ldr	r2, [r3, #8]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4928      	ldr	r1, [pc, #160]	@ (80038fc <UART_TxISR_16BIT_FIFOEN+0xf0>)
 800385a:	400a      	ands	r2, r1
 800385c:	609a      	str	r2, [r3, #8]
 800385e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003860:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	f383 8810 	msr	PRIMASK, r3
}
 8003868:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800386a:	f3ef 8310 	mrs	r3, PRIMASK
 800386e:	617b      	str	r3, [r7, #20]
  return(result);
 8003870:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003872:	623b      	str	r3, [r7, #32]
 8003874:	2301      	movs	r3, #1
 8003876:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	f383 8810 	msr	PRIMASK, r3
}
 800387e:	46c0      	nop			@ (mov r8, r8)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2140      	movs	r1, #64	@ 0x40
 800388c:	430a      	orrs	r2, r1
 800388e:	601a      	str	r2, [r3, #0]
 8003890:	6a3b      	ldr	r3, [r7, #32]
 8003892:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	f383 8810 	msr	PRIMASK, r3
}
 800389a:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 800389c:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800389e:	e029      	b.n	80038f4 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	2280      	movs	r2, #128	@ 0x80
 80038a8:	4013      	ands	r3, r2
 80038aa:	d018      	beq.n	80038de <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038b0:	62bb      	str	r3, [r7, #40]	@ 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80038b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038b4:	881b      	ldrh	r3, [r3, #0]
 80038b6:	001a      	movs	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	05d2      	lsls	r2, r2, #23
 80038be:	0dd2      	lsrs	r2, r2, #23
 80038c0:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038c6:	1c9a      	adds	r2, r3, #2
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2256      	movs	r2, #86	@ 0x56
 80038d0:	5a9b      	ldrh	r3, [r3, r2]
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	3b01      	subs	r3, #1
 80038d6:	b299      	uxth	r1, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2256      	movs	r2, #86	@ 0x56
 80038dc:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80038de:	212e      	movs	r1, #46	@ 0x2e
 80038e0:	187b      	adds	r3, r7, r1
 80038e2:	881a      	ldrh	r2, [r3, #0]
 80038e4:	187b      	adds	r3, r7, r1
 80038e6:	3a01      	subs	r2, #1
 80038e8:	801a      	strh	r2, [r3, #0]
 80038ea:	232e      	movs	r3, #46	@ 0x2e
 80038ec:	18fb      	adds	r3, r7, r3
 80038ee:	881b      	ldrh	r3, [r3, #0]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d19b      	bne.n	800382c <UART_TxISR_16BIT_FIFOEN+0x20>
}
 80038f4:	46c0      	nop			@ (mov r8, r8)
 80038f6:	46bd      	mov	sp, r7
 80038f8:	b00c      	add	sp, #48	@ 0x30
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	ff7fffff 	.word	0xff7fffff

08003900 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003908:	f3ef 8310 	mrs	r3, PRIMASK
 800390c:	60bb      	str	r3, [r7, #8]
  return(result);
 800390e:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003910:	617b      	str	r3, [r7, #20]
 8003912:	2301      	movs	r3, #1
 8003914:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f383 8810 	msr	PRIMASK, r3
}
 800391c:	46c0      	nop			@ (mov r8, r8)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2140      	movs	r1, #64	@ 0x40
 800392a:	438a      	bics	r2, r1
 800392c:	601a      	str	r2, [r3, #0]
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	f383 8810 	msr	PRIMASK, r3
}
 8003938:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2288      	movs	r2, #136	@ 0x88
 800393e:	2120      	movs	r1, #32
 8003940:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	0018      	movs	r0, r3
 800394c:	f7fe ffe6 	bl	800291c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003950:	46c0      	nop			@ (mov r8, r8)
 8003952:	46bd      	mov	sp, r7
 8003954:	b006      	add	sp, #24
 8003956:	bd80      	pop	{r7, pc}

08003958 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b094      	sub	sp, #80	@ 0x50
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003960:	204e      	movs	r0, #78	@ 0x4e
 8003962:	183b      	adds	r3, r7, r0
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	2160      	movs	r1, #96	@ 0x60
 8003968:	5a52      	ldrh	r2, [r2, r1]
 800396a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	228c      	movs	r2, #140	@ 0x8c
 8003970:	589b      	ldr	r3, [r3, r2]
 8003972:	2b22      	cmp	r3, #34	@ 0x22
 8003974:	d000      	beq.n	8003978 <UART_RxISR_8BIT+0x20>
 8003976:	e0bf      	b.n	8003af8 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800397e:	214c      	movs	r1, #76	@ 0x4c
 8003980:	187b      	adds	r3, r7, r1
 8003982:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003984:	187b      	adds	r3, r7, r1
 8003986:	881b      	ldrh	r3, [r3, #0]
 8003988:	b2da      	uxtb	r2, r3
 800398a:	183b      	adds	r3, r7, r0
 800398c:	881b      	ldrh	r3, [r3, #0]
 800398e:	b2d9      	uxtb	r1, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003994:	400a      	ands	r2, r1
 8003996:	b2d2      	uxtb	r2, r2
 8003998:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800399e:	1c5a      	adds	r2, r3, #1
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	225e      	movs	r2, #94	@ 0x5e
 80039a8:	5a9b      	ldrh	r3, [r3, r2]
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	3b01      	subs	r3, #1
 80039ae:	b299      	uxth	r1, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	225e      	movs	r2, #94	@ 0x5e
 80039b4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	225e      	movs	r2, #94	@ 0x5e
 80039ba:	5a9b      	ldrh	r3, [r3, r2]
 80039bc:	b29b      	uxth	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d000      	beq.n	80039c4 <UART_RxISR_8BIT+0x6c>
 80039c2:	e0a1      	b.n	8003b08 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039c4:	f3ef 8310 	mrs	r3, PRIMASK
 80039c8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80039ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80039cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039ce:	2301      	movs	r3, #1
 80039d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039d4:	f383 8810 	msr	PRIMASK, r3
}
 80039d8:	46c0      	nop			@ (mov r8, r8)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	494a      	ldr	r1, [pc, #296]	@ (8003b10 <UART_RxISR_8BIT+0x1b8>)
 80039e6:	400a      	ands	r2, r1
 80039e8:	601a      	str	r2, [r3, #0]
 80039ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039f0:	f383 8810 	msr	PRIMASK, r3
}
 80039f4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039f6:	f3ef 8310 	mrs	r3, PRIMASK
 80039fa:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80039fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a00:	2301      	movs	r3, #1
 8003a02:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a06:	f383 8810 	msr	PRIMASK, r3
}
 8003a0a:	46c0      	nop			@ (mov r8, r8)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	689a      	ldr	r2, [r3, #8]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2101      	movs	r1, #1
 8003a18:	438a      	bics	r2, r1
 8003a1a:	609a      	str	r2, [r3, #8]
 8003a1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a22:	f383 8810 	msr	PRIMASK, r3
}
 8003a26:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	228c      	movs	r2, #140	@ 0x8c
 8003a2c:	2120      	movs	r1, #32
 8003a2e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a34      	ldr	r2, [pc, #208]	@ (8003b14 <UART_RxISR_8BIT+0x1bc>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d01f      	beq.n	8003a86 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	685a      	ldr	r2, [r3, #4]
 8003a4c:	2380      	movs	r3, #128	@ 0x80
 8003a4e:	041b      	lsls	r3, r3, #16
 8003a50:	4013      	ands	r3, r2
 8003a52:	d018      	beq.n	8003a86 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a54:	f3ef 8310 	mrs	r3, PRIMASK
 8003a58:	61bb      	str	r3, [r7, #24]
  return(result);
 8003a5a:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003a5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a5e:	2301      	movs	r3, #1
 8003a60:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	f383 8810 	msr	PRIMASK, r3
}
 8003a68:	46c0      	nop			@ (mov r8, r8)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4928      	ldr	r1, [pc, #160]	@ (8003b18 <UART_RxISR_8BIT+0x1c0>)
 8003a76:	400a      	ands	r2, r1
 8003a78:	601a      	str	r2, [r3, #0]
 8003a7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a7c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a7e:	6a3b      	ldr	r3, [r7, #32]
 8003a80:	f383 8810 	msr	PRIMASK, r3
}
 8003a84:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d12f      	bne.n	8003aee <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a94:	f3ef 8310 	mrs	r3, PRIMASK
 8003a98:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a9a:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	f383 8810 	msr	PRIMASK, r3
}
 8003aa8:	46c0      	nop			@ (mov r8, r8)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2110      	movs	r1, #16
 8003ab6:	438a      	bics	r2, r1
 8003ab8:	601a      	str	r2, [r3, #0]
 8003aba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003abc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	f383 8810 	msr	PRIMASK, r3
}
 8003ac4:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	69db      	ldr	r3, [r3, #28]
 8003acc:	2210      	movs	r2, #16
 8003ace:	4013      	ands	r3, r2
 8003ad0:	2b10      	cmp	r3, #16
 8003ad2:	d103      	bne.n	8003adc <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2210      	movs	r2, #16
 8003ada:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	225c      	movs	r2, #92	@ 0x5c
 8003ae0:	5a9a      	ldrh	r2, [r3, r2]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	0011      	movs	r1, r2
 8003ae6:	0018      	movs	r0, r3
 8003ae8:	f7fe ff28 	bl	800293c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003aec:	e00c      	b.n	8003b08 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	0018      	movs	r0, r3
 8003af2:	f7fc fe4b 	bl	800078c <HAL_UART_RxCpltCallback>
}
 8003af6:	e007      	b.n	8003b08 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	699a      	ldr	r2, [r3, #24]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2108      	movs	r1, #8
 8003b04:	430a      	orrs	r2, r1
 8003b06:	619a      	str	r2, [r3, #24]
}
 8003b08:	46c0      	nop			@ (mov r8, r8)
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	b014      	add	sp, #80	@ 0x50
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	fffffedf 	.word	0xfffffedf
 8003b14:	40008000 	.word	0x40008000
 8003b18:	fbffffff 	.word	0xfbffffff

08003b1c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b094      	sub	sp, #80	@ 0x50
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003b24:	204e      	movs	r0, #78	@ 0x4e
 8003b26:	183b      	adds	r3, r7, r0
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	2160      	movs	r1, #96	@ 0x60
 8003b2c:	5a52      	ldrh	r2, [r2, r1]
 8003b2e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	228c      	movs	r2, #140	@ 0x8c
 8003b34:	589b      	ldr	r3, [r3, r2]
 8003b36:	2b22      	cmp	r3, #34	@ 0x22
 8003b38:	d000      	beq.n	8003b3c <UART_RxISR_16BIT+0x20>
 8003b3a:	e0bf      	b.n	8003cbc <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b42:	214c      	movs	r1, #76	@ 0x4c
 8003b44:	187b      	adds	r3, r7, r1
 8003b46:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b4c:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8003b4e:	187b      	adds	r3, r7, r1
 8003b50:	183a      	adds	r2, r7, r0
 8003b52:	881b      	ldrh	r3, [r3, #0]
 8003b54:	8812      	ldrh	r2, [r2, #0]
 8003b56:	4013      	ands	r3, r2
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b5c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b62:	1c9a      	adds	r2, r3, #2
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	225e      	movs	r2, #94	@ 0x5e
 8003b6c:	5a9b      	ldrh	r3, [r3, r2]
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	3b01      	subs	r3, #1
 8003b72:	b299      	uxth	r1, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	225e      	movs	r2, #94	@ 0x5e
 8003b78:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	225e      	movs	r2, #94	@ 0x5e
 8003b7e:	5a9b      	ldrh	r3, [r3, r2]
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d000      	beq.n	8003b88 <UART_RxISR_16BIT+0x6c>
 8003b86:	e0a1      	b.n	8003ccc <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b88:	f3ef 8310 	mrs	r3, PRIMASK
 8003b8c:	623b      	str	r3, [r7, #32]
  return(result);
 8003b8e:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003b90:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b92:	2301      	movs	r3, #1
 8003b94:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b98:	f383 8810 	msr	PRIMASK, r3
}
 8003b9c:	46c0      	nop			@ (mov r8, r8)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	494a      	ldr	r1, [pc, #296]	@ (8003cd4 <UART_RxISR_16BIT+0x1b8>)
 8003baa:	400a      	ands	r2, r1
 8003bac:	601a      	str	r2, [r3, #0]
 8003bae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bb4:	f383 8810 	msr	PRIMASK, r3
}
 8003bb8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bba:	f3ef 8310 	mrs	r3, PRIMASK
 8003bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8003bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bc2:	643b      	str	r3, [r7, #64]	@ 0x40
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bca:	f383 8810 	msr	PRIMASK, r3
}
 8003bce:	46c0      	nop			@ (mov r8, r8)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689a      	ldr	r2, [r3, #8]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2101      	movs	r1, #1
 8003bdc:	438a      	bics	r2, r1
 8003bde:	609a      	str	r2, [r3, #8]
 8003be0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003be2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003be4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003be6:	f383 8810 	msr	PRIMASK, r3
}
 8003bea:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	228c      	movs	r2, #140	@ 0x8c
 8003bf0:	2120      	movs	r1, #32
 8003bf2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a34      	ldr	r2, [pc, #208]	@ (8003cd8 <UART_RxISR_16BIT+0x1bc>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d01f      	beq.n	8003c4a <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	2380      	movs	r3, #128	@ 0x80
 8003c12:	041b      	lsls	r3, r3, #16
 8003c14:	4013      	ands	r3, r2
 8003c16:	d018      	beq.n	8003c4a <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c18:	f3ef 8310 	mrs	r3, PRIMASK
 8003c1c:	617b      	str	r3, [r7, #20]
  return(result);
 8003c1e:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c22:	2301      	movs	r3, #1
 8003c24:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	f383 8810 	msr	PRIMASK, r3
}
 8003c2c:	46c0      	nop			@ (mov r8, r8)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4928      	ldr	r1, [pc, #160]	@ (8003cdc <UART_RxISR_16BIT+0x1c0>)
 8003c3a:	400a      	ands	r2, r1
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	f383 8810 	msr	PRIMASK, r3
}
 8003c48:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d12f      	bne.n	8003cb2 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c58:	f3ef 8310 	mrs	r3, PRIMASK
 8003c5c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c5e:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c60:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c62:	2301      	movs	r3, #1
 8003c64:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f383 8810 	msr	PRIMASK, r3
}
 8003c6c:	46c0      	nop			@ (mov r8, r8)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2110      	movs	r1, #16
 8003c7a:	438a      	bics	r2, r1
 8003c7c:	601a      	str	r2, [r3, #0]
 8003c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	f383 8810 	msr	PRIMASK, r3
}
 8003c88:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	69db      	ldr	r3, [r3, #28]
 8003c90:	2210      	movs	r2, #16
 8003c92:	4013      	ands	r3, r2
 8003c94:	2b10      	cmp	r3, #16
 8003c96:	d103      	bne.n	8003ca0 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2210      	movs	r2, #16
 8003c9e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	225c      	movs	r2, #92	@ 0x5c
 8003ca4:	5a9a      	ldrh	r2, [r3, r2]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	0011      	movs	r1, r2
 8003caa:	0018      	movs	r0, r3
 8003cac:	f7fe fe46 	bl	800293c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003cb0:	e00c      	b.n	8003ccc <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	0018      	movs	r0, r3
 8003cb6:	f7fc fd69 	bl	800078c <HAL_UART_RxCpltCallback>
}
 8003cba:	e007      	b.n	8003ccc <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	699a      	ldr	r2, [r3, #24]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2108      	movs	r1, #8
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	619a      	str	r2, [r3, #24]
}
 8003ccc:	46c0      	nop			@ (mov r8, r8)
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	b014      	add	sp, #80	@ 0x50
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	fffffedf 	.word	0xfffffedf
 8003cd8:	40008000 	.word	0x40008000
 8003cdc:	fbffffff 	.word	0xfbffffff

08003ce0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b0a0      	sub	sp, #128	@ 0x80
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8003ce8:	237a      	movs	r3, #122	@ 0x7a
 8003cea:	18fb      	adds	r3, r7, r3
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	2160      	movs	r1, #96	@ 0x60
 8003cf0:	5a52      	ldrh	r2, [r2, r1]
 8003cf2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	69db      	ldr	r3, [r3, #28]
 8003cfa:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	228c      	movs	r2, #140	@ 0x8c
 8003d10:	589b      	ldr	r3, [r3, r2]
 8003d12:	2b22      	cmp	r3, #34	@ 0x22
 8003d14:	d000      	beq.n	8003d18 <UART_RxISR_8BIT_FIFOEN+0x38>
 8003d16:	e16a      	b.n	8003fee <UART_RxISR_8BIT_FIFOEN+0x30e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003d18:	236e      	movs	r3, #110	@ 0x6e
 8003d1a:	18fb      	adds	r3, r7, r3
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	2168      	movs	r1, #104	@ 0x68
 8003d20:	5a52      	ldrh	r2, [r2, r1]
 8003d22:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003d24:	e111      	b.n	8003f4a <UART_RxISR_8BIT_FIFOEN+0x26a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d2c:	216c      	movs	r1, #108	@ 0x6c
 8003d2e:	187b      	adds	r3, r7, r1
 8003d30:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003d32:	187b      	adds	r3, r7, r1
 8003d34:	881b      	ldrh	r3, [r3, #0]
 8003d36:	b2da      	uxtb	r2, r3
 8003d38:	237a      	movs	r3, #122	@ 0x7a
 8003d3a:	18fb      	adds	r3, r7, r3
 8003d3c:	881b      	ldrh	r3, [r3, #0]
 8003d3e:	b2d9      	uxtb	r1, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d44:	400a      	ands	r2, r1
 8003d46:	b2d2      	uxtb	r2, r2
 8003d48:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d4e:	1c5a      	adds	r2, r3, #1
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	225e      	movs	r2, #94	@ 0x5e
 8003d58:	5a9b      	ldrh	r3, [r3, r2]
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	b299      	uxth	r1, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	225e      	movs	r2, #94	@ 0x5e
 8003d64:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	69db      	ldr	r3, [r3, #28]
 8003d6c:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003d6e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003d70:	2207      	movs	r2, #7
 8003d72:	4013      	ands	r3, r2
 8003d74:	d049      	beq.n	8003e0a <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003d76:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003d78:	2201      	movs	r2, #1
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	d010      	beq.n	8003da0 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8003d7e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003d80:	2380      	movs	r3, #128	@ 0x80
 8003d82:	005b      	lsls	r3, r3, #1
 8003d84:	4013      	ands	r3, r2
 8003d86:	d00b      	beq.n	8003da0 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2290      	movs	r2, #144	@ 0x90
 8003d94:	589b      	ldr	r3, [r3, r2]
 8003d96:	2201      	movs	r2, #1
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2190      	movs	r1, #144	@ 0x90
 8003d9e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003da0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003da2:	2202      	movs	r2, #2
 8003da4:	4013      	ands	r3, r2
 8003da6:	d00f      	beq.n	8003dc8 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8003da8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003daa:	2201      	movs	r2, #1
 8003dac:	4013      	ands	r3, r2
 8003dae:	d00b      	beq.n	8003dc8 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2202      	movs	r2, #2
 8003db6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2290      	movs	r2, #144	@ 0x90
 8003dbc:	589b      	ldr	r3, [r3, r2]
 8003dbe:	2204      	movs	r2, #4
 8003dc0:	431a      	orrs	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2190      	movs	r1, #144	@ 0x90
 8003dc6:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003dc8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003dca:	2204      	movs	r2, #4
 8003dcc:	4013      	ands	r3, r2
 8003dce:	d00f      	beq.n	8003df0 <UART_RxISR_8BIT_FIFOEN+0x110>
 8003dd0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	d00b      	beq.n	8003df0 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2204      	movs	r2, #4
 8003dde:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2290      	movs	r2, #144	@ 0x90
 8003de4:	589b      	ldr	r3, [r3, r2]
 8003de6:	2202      	movs	r2, #2
 8003de8:	431a      	orrs	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2190      	movs	r1, #144	@ 0x90
 8003dee:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2290      	movs	r2, #144	@ 0x90
 8003df4:	589b      	ldr	r3, [r3, r2]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d007      	beq.n	8003e0a <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	0018      	movs	r0, r3
 8003dfe:	f7fe fd95 	bl	800292c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2290      	movs	r2, #144	@ 0x90
 8003e06:	2100      	movs	r1, #0
 8003e08:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	225e      	movs	r2, #94	@ 0x5e
 8003e0e:	5a9b      	ldrh	r3, [r3, r2]
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d000      	beq.n	8003e18 <UART_RxISR_8BIT_FIFOEN+0x138>
 8003e16:	e098      	b.n	8003f4a <UART_RxISR_8BIT_FIFOEN+0x26a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e18:	f3ef 8310 	mrs	r3, PRIMASK
 8003e1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 8003e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e22:	2301      	movs	r3, #1
 8003e24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e28:	f383 8810 	msr	PRIMASK, r3
}
 8003e2c:	46c0      	nop			@ (mov r8, r8)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4973      	ldr	r1, [pc, #460]	@ (8004008 <UART_RxISR_8BIT_FIFOEN+0x328>)
 8003e3a:	400a      	ands	r2, r1
 8003e3c:	601a      	str	r2, [r3, #0]
 8003e3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e40:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e44:	f383 8810 	msr	PRIMASK, r3
}
 8003e48:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e4a:	f3ef 8310 	mrs	r3, PRIMASK
 8003e4e:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8003e50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003e52:	667b      	str	r3, [r7, #100]	@ 0x64
 8003e54:	2301      	movs	r3, #1
 8003e56:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e5a:	f383 8810 	msr	PRIMASK, r3
}
 8003e5e:	46c0      	nop			@ (mov r8, r8)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689a      	ldr	r2, [r3, #8]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4968      	ldr	r1, [pc, #416]	@ (800400c <UART_RxISR_8BIT_FIFOEN+0x32c>)
 8003e6c:	400a      	ands	r2, r1
 8003e6e:	609a      	str	r2, [r3, #8]
 8003e70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e76:	f383 8810 	msr	PRIMASK, r3
}
 8003e7a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	228c      	movs	r2, #140	@ 0x8c
 8003e80:	2120      	movs	r1, #32
 8003e82:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a5e      	ldr	r2, [pc, #376]	@ (8004010 <UART_RxISR_8BIT_FIFOEN+0x330>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d01f      	beq.n	8003eda <UART_RxISR_8BIT_FIFOEN+0x1fa>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	685a      	ldr	r2, [r3, #4]
 8003ea0:	2380      	movs	r3, #128	@ 0x80
 8003ea2:	041b      	lsls	r3, r3, #16
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	d018      	beq.n	8003eda <UART_RxISR_8BIT_FIFOEN+0x1fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ea8:	f3ef 8310 	mrs	r3, PRIMASK
 8003eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8003eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003eb0:	663b      	str	r3, [r7, #96]	@ 0x60
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eb8:	f383 8810 	msr	PRIMASK, r3
}
 8003ebc:	46c0      	nop			@ (mov r8, r8)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4952      	ldr	r1, [pc, #328]	@ (8004014 <UART_RxISR_8BIT_FIFOEN+0x334>)
 8003eca:	400a      	ands	r2, r1
 8003ecc:	601a      	str	r2, [r3, #0]
 8003ece:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ed0:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ed2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ed4:	f383 8810 	msr	PRIMASK, r3
}
 8003ed8:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d12f      	bne.n	8003f42 <UART_RxISR_8BIT_FIFOEN+0x262>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ee8:	f3ef 8310 	mrs	r3, PRIMASK
 8003eec:	623b      	str	r3, [r7, #32]
  return(result);
 8003eee:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ef0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef8:	f383 8810 	msr	PRIMASK, r3
}
 8003efc:	46c0      	nop			@ (mov r8, r8)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2110      	movs	r1, #16
 8003f0a:	438a      	bics	r2, r1
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f10:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f14:	f383 8810 	msr	PRIMASK, r3
}
 8003f18:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	69db      	ldr	r3, [r3, #28]
 8003f20:	2210      	movs	r2, #16
 8003f22:	4013      	ands	r3, r2
 8003f24:	2b10      	cmp	r3, #16
 8003f26:	d103      	bne.n	8003f30 <UART_RxISR_8BIT_FIFOEN+0x250>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2210      	movs	r2, #16
 8003f2e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	225c      	movs	r2, #92	@ 0x5c
 8003f34:	5a9a      	ldrh	r2, [r3, r2]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	0011      	movs	r1, r2
 8003f3a:	0018      	movs	r0, r3
 8003f3c:	f7fe fcfe 	bl	800293c <HAL_UARTEx_RxEventCallback>
 8003f40:	e003      	b.n	8003f4a <UART_RxISR_8BIT_FIFOEN+0x26a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	0018      	movs	r0, r3
 8003f46:	f7fc fc21 	bl	800078c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003f4a:	236e      	movs	r3, #110	@ 0x6e
 8003f4c:	18fb      	adds	r3, r7, r3
 8003f4e:	881b      	ldrh	r3, [r3, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d004      	beq.n	8003f5e <UART_RxISR_8BIT_FIFOEN+0x27e>
 8003f54:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f56:	2220      	movs	r2, #32
 8003f58:	4013      	ands	r3, r2
 8003f5a:	d000      	beq.n	8003f5e <UART_RxISR_8BIT_FIFOEN+0x27e>
 8003f5c:	e6e3      	b.n	8003d26 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003f5e:	205a      	movs	r0, #90	@ 0x5a
 8003f60:	183b      	adds	r3, r7, r0
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	215e      	movs	r1, #94	@ 0x5e
 8003f66:	5a52      	ldrh	r2, [r2, r1]
 8003f68:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003f6a:	0001      	movs	r1, r0
 8003f6c:	187b      	adds	r3, r7, r1
 8003f6e:	881b      	ldrh	r3, [r3, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d044      	beq.n	8003ffe <UART_RxISR_8BIT_FIFOEN+0x31e>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2268      	movs	r2, #104	@ 0x68
 8003f78:	5a9b      	ldrh	r3, [r3, r2]
 8003f7a:	187a      	adds	r2, r7, r1
 8003f7c:	8812      	ldrh	r2, [r2, #0]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d23d      	bcs.n	8003ffe <UART_RxISR_8BIT_FIFOEN+0x31e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f82:	f3ef 8310 	mrs	r3, PRIMASK
 8003f86:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f88:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003f8a:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f383 8810 	msr	PRIMASK, r3
}
 8003f96:	46c0      	nop			@ (mov r8, r8)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689a      	ldr	r2, [r3, #8]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	491d      	ldr	r1, [pc, #116]	@ (8004018 <UART_RxISR_8BIT_FIFOEN+0x338>)
 8003fa4:	400a      	ands	r2, r1
 8003fa6:	609a      	str	r2, [r3, #8]
 8003fa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003faa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	f383 8810 	msr	PRIMASK, r3
}
 8003fb2:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a19      	ldr	r2, [pc, #100]	@ (800401c <UART_RxISR_8BIT_FIFOEN+0x33c>)
 8003fb8:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fba:	f3ef 8310 	mrs	r3, PRIMASK
 8003fbe:	617b      	str	r3, [r7, #20]
  return(result);
 8003fc0:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003fc2:	653b      	str	r3, [r7, #80]	@ 0x50
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	f383 8810 	msr	PRIMASK, r3
}
 8003fce:	46c0      	nop			@ (mov r8, r8)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2120      	movs	r1, #32
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	601a      	str	r2, [r3, #0]
 8003fe0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fe2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	f383 8810 	msr	PRIMASK, r3
}
 8003fea:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003fec:	e007      	b.n	8003ffe <UART_RxISR_8BIT_FIFOEN+0x31e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	699a      	ldr	r2, [r3, #24]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2108      	movs	r1, #8
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	619a      	str	r2, [r3, #24]
}
 8003ffe:	46c0      	nop			@ (mov r8, r8)
 8004000:	46bd      	mov	sp, r7
 8004002:	b020      	add	sp, #128	@ 0x80
 8004004:	bd80      	pop	{r7, pc}
 8004006:	46c0      	nop			@ (mov r8, r8)
 8004008:	fffffeff 	.word	0xfffffeff
 800400c:	effffffe 	.word	0xeffffffe
 8004010:	40008000 	.word	0x40008000
 8004014:	fbffffff 	.word	0xfbffffff
 8004018:	efffffff 	.word	0xefffffff
 800401c:	08003959 	.word	0x08003959

08004020 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b0a2      	sub	sp, #136	@ 0x88
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004028:	2382      	movs	r3, #130	@ 0x82
 800402a:	18fb      	adds	r3, r7, r3
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	2160      	movs	r1, #96	@ 0x60
 8004030:	5a52      	ldrh	r2, [r2, r1]
 8004032:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	2284      	movs	r2, #132	@ 0x84
 800403c:	18ba      	adds	r2, r7, r2
 800403e:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	228c      	movs	r2, #140	@ 0x8c
 8004054:	589b      	ldr	r3, [r3, r2]
 8004056:	2b22      	cmp	r3, #34	@ 0x22
 8004058:	d000      	beq.n	800405c <UART_RxISR_16BIT_FIFOEN+0x3c>
 800405a:	e174      	b.n	8004346 <UART_RxISR_16BIT_FIFOEN+0x326>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800405c:	2376      	movs	r3, #118	@ 0x76
 800405e:	18fb      	adds	r3, r7, r3
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	2168      	movs	r1, #104	@ 0x68
 8004064:	5a52      	ldrh	r2, [r2, r1]
 8004066:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004068:	e119      	b.n	800429e <UART_RxISR_16BIT_FIFOEN+0x27e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004070:	2174      	movs	r1, #116	@ 0x74
 8004072:	187b      	adds	r3, r7, r1
 8004074:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800407a:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 800407c:	187b      	adds	r3, r7, r1
 800407e:	2282      	movs	r2, #130	@ 0x82
 8004080:	18ba      	adds	r2, r7, r2
 8004082:	881b      	ldrh	r3, [r3, #0]
 8004084:	8812      	ldrh	r2, [r2, #0]
 8004086:	4013      	ands	r3, r2
 8004088:	b29a      	uxth	r2, r3
 800408a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800408c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004092:	1c9a      	adds	r2, r3, #2
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	225e      	movs	r2, #94	@ 0x5e
 800409c:	5a9b      	ldrh	r3, [r3, r2]
 800409e:	b29b      	uxth	r3, r3
 80040a0:	3b01      	subs	r3, #1
 80040a2:	b299      	uxth	r1, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	225e      	movs	r2, #94	@ 0x5e
 80040a8:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	69db      	ldr	r3, [r3, #28]
 80040b0:	2184      	movs	r1, #132	@ 0x84
 80040b2:	187a      	adds	r2, r7, r1
 80040b4:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80040b6:	187b      	adds	r3, r7, r1
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2207      	movs	r2, #7
 80040bc:	4013      	ands	r3, r2
 80040be:	d04e      	beq.n	800415e <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80040c0:	187b      	adds	r3, r7, r1
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2201      	movs	r2, #1
 80040c6:	4013      	ands	r3, r2
 80040c8:	d010      	beq.n	80040ec <UART_RxISR_16BIT_FIFOEN+0xcc>
 80040ca:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80040cc:	2380      	movs	r3, #128	@ 0x80
 80040ce:	005b      	lsls	r3, r3, #1
 80040d0:	4013      	ands	r3, r2
 80040d2:	d00b      	beq.n	80040ec <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2201      	movs	r2, #1
 80040da:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2290      	movs	r2, #144	@ 0x90
 80040e0:	589b      	ldr	r3, [r3, r2]
 80040e2:	2201      	movs	r2, #1
 80040e4:	431a      	orrs	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2190      	movs	r1, #144	@ 0x90
 80040ea:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040ec:	2384      	movs	r3, #132	@ 0x84
 80040ee:	18fb      	adds	r3, r7, r3
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2202      	movs	r2, #2
 80040f4:	4013      	ands	r3, r2
 80040f6:	d00f      	beq.n	8004118 <UART_RxISR_16BIT_FIFOEN+0xf8>
 80040f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040fa:	2201      	movs	r2, #1
 80040fc:	4013      	ands	r3, r2
 80040fe:	d00b      	beq.n	8004118 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2202      	movs	r2, #2
 8004106:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2290      	movs	r2, #144	@ 0x90
 800410c:	589b      	ldr	r3, [r3, r2]
 800410e:	2204      	movs	r2, #4
 8004110:	431a      	orrs	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2190      	movs	r1, #144	@ 0x90
 8004116:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004118:	2384      	movs	r3, #132	@ 0x84
 800411a:	18fb      	adds	r3, r7, r3
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2204      	movs	r2, #4
 8004120:	4013      	ands	r3, r2
 8004122:	d00f      	beq.n	8004144 <UART_RxISR_16BIT_FIFOEN+0x124>
 8004124:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004126:	2201      	movs	r2, #1
 8004128:	4013      	ands	r3, r2
 800412a:	d00b      	beq.n	8004144 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2204      	movs	r2, #4
 8004132:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2290      	movs	r2, #144	@ 0x90
 8004138:	589b      	ldr	r3, [r3, r2]
 800413a:	2202      	movs	r2, #2
 800413c:	431a      	orrs	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2190      	movs	r1, #144	@ 0x90
 8004142:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2290      	movs	r2, #144	@ 0x90
 8004148:	589b      	ldr	r3, [r3, r2]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d007      	beq.n	800415e <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	0018      	movs	r0, r3
 8004152:	f7fe fbeb 	bl	800292c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2290      	movs	r2, #144	@ 0x90
 800415a:	2100      	movs	r1, #0
 800415c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	225e      	movs	r2, #94	@ 0x5e
 8004162:	5a9b      	ldrh	r3, [r3, r2]
 8004164:	b29b      	uxth	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d000      	beq.n	800416c <UART_RxISR_16BIT_FIFOEN+0x14c>
 800416a:	e098      	b.n	800429e <UART_RxISR_16BIT_FIFOEN+0x27e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800416c:	f3ef 8310 	mrs	r3, PRIMASK
 8004170:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8004172:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004174:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004176:	2301      	movs	r3, #1
 8004178:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800417a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800417c:	f383 8810 	msr	PRIMASK, r3
}
 8004180:	46c0      	nop			@ (mov r8, r8)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4974      	ldr	r1, [pc, #464]	@ (8004360 <UART_RxISR_16BIT_FIFOEN+0x340>)
 800418e:	400a      	ands	r2, r1
 8004190:	601a      	str	r2, [r3, #0]
 8004192:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004194:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004196:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004198:	f383 8810 	msr	PRIMASK, r3
}
 800419c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800419e:	f3ef 8310 	mrs	r3, PRIMASK
 80041a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80041a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80041a6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041a8:	2301      	movs	r3, #1
 80041aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041ae:	f383 8810 	msr	PRIMASK, r3
}
 80041b2:	46c0      	nop			@ (mov r8, r8)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689a      	ldr	r2, [r3, #8]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4969      	ldr	r1, [pc, #420]	@ (8004364 <UART_RxISR_16BIT_FIFOEN+0x344>)
 80041c0:	400a      	ands	r2, r1
 80041c2:	609a      	str	r2, [r3, #8]
 80041c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80041c6:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041ca:	f383 8810 	msr	PRIMASK, r3
}
 80041ce:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	228c      	movs	r2, #140	@ 0x8c
 80041d4:	2120      	movs	r1, #32
 80041d6:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a5f      	ldr	r2, [pc, #380]	@ (8004368 <UART_RxISR_16BIT_FIFOEN+0x348>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d01f      	beq.n	800422e <UART_RxISR_16BIT_FIFOEN+0x20e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	685a      	ldr	r2, [r3, #4]
 80041f4:	2380      	movs	r3, #128	@ 0x80
 80041f6:	041b      	lsls	r3, r3, #16
 80041f8:	4013      	ands	r3, r2
 80041fa:	d018      	beq.n	800422e <UART_RxISR_16BIT_FIFOEN+0x20e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041fc:	f3ef 8310 	mrs	r3, PRIMASK
 8004200:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004204:	667b      	str	r3, [r7, #100]	@ 0x64
 8004206:	2301      	movs	r3, #1
 8004208:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800420a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800420c:	f383 8810 	msr	PRIMASK, r3
}
 8004210:	46c0      	nop			@ (mov r8, r8)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4953      	ldr	r1, [pc, #332]	@ (800436c <UART_RxISR_16BIT_FIFOEN+0x34c>)
 800421e:	400a      	ands	r2, r1
 8004220:	601a      	str	r2, [r3, #0]
 8004222:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004224:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004228:	f383 8810 	msr	PRIMASK, r3
}
 800422c:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004232:	2b01      	cmp	r3, #1
 8004234:	d12f      	bne.n	8004296 <UART_RxISR_16BIT_FIFOEN+0x276>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800423c:	f3ef 8310 	mrs	r3, PRIMASK
 8004240:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004244:	663b      	str	r3, [r7, #96]	@ 0x60
 8004246:	2301      	movs	r3, #1
 8004248:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800424a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800424c:	f383 8810 	msr	PRIMASK, r3
}
 8004250:	46c0      	nop			@ (mov r8, r8)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2110      	movs	r1, #16
 800425e:	438a      	bics	r2, r1
 8004260:	601a      	str	r2, [r3, #0]
 8004262:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004264:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004268:	f383 8810 	msr	PRIMASK, r3
}
 800426c:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	69db      	ldr	r3, [r3, #28]
 8004274:	2210      	movs	r2, #16
 8004276:	4013      	ands	r3, r2
 8004278:	2b10      	cmp	r3, #16
 800427a:	d103      	bne.n	8004284 <UART_RxISR_16BIT_FIFOEN+0x264>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2210      	movs	r2, #16
 8004282:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	225c      	movs	r2, #92	@ 0x5c
 8004288:	5a9a      	ldrh	r2, [r3, r2]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	0011      	movs	r1, r2
 800428e:	0018      	movs	r0, r3
 8004290:	f7fe fb54 	bl	800293c <HAL_UARTEx_RxEventCallback>
 8004294:	e003      	b.n	800429e <UART_RxISR_16BIT_FIFOEN+0x27e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	0018      	movs	r0, r3
 800429a:	f7fc fa77 	bl	800078c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800429e:	2376      	movs	r3, #118	@ 0x76
 80042a0:	18fb      	adds	r3, r7, r3
 80042a2:	881b      	ldrh	r3, [r3, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d006      	beq.n	80042b6 <UART_RxISR_16BIT_FIFOEN+0x296>
 80042a8:	2384      	movs	r3, #132	@ 0x84
 80042aa:	18fb      	adds	r3, r7, r3
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2220      	movs	r2, #32
 80042b0:	4013      	ands	r3, r2
 80042b2:	d000      	beq.n	80042b6 <UART_RxISR_16BIT_FIFOEN+0x296>
 80042b4:	e6d9      	b.n	800406a <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80042b6:	205e      	movs	r0, #94	@ 0x5e
 80042b8:	183b      	adds	r3, r7, r0
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	215e      	movs	r1, #94	@ 0x5e
 80042be:	5a52      	ldrh	r2, [r2, r1]
 80042c0:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80042c2:	0001      	movs	r1, r0
 80042c4:	187b      	adds	r3, r7, r1
 80042c6:	881b      	ldrh	r3, [r3, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d044      	beq.n	8004356 <UART_RxISR_16BIT_FIFOEN+0x336>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2268      	movs	r2, #104	@ 0x68
 80042d0:	5a9b      	ldrh	r3, [r3, r2]
 80042d2:	187a      	adds	r2, r7, r1
 80042d4:	8812      	ldrh	r2, [r2, #0]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d23d      	bcs.n	8004356 <UART_RxISR_16BIT_FIFOEN+0x336>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042da:	f3ef 8310 	mrs	r3, PRIMASK
 80042de:	60fb      	str	r3, [r7, #12]
  return(result);
 80042e0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80042e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80042e4:	2301      	movs	r3, #1
 80042e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	f383 8810 	msr	PRIMASK, r3
}
 80042ee:	46c0      	nop			@ (mov r8, r8)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	689a      	ldr	r2, [r3, #8]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	491d      	ldr	r1, [pc, #116]	@ (8004370 <UART_RxISR_16BIT_FIFOEN+0x350>)
 80042fc:	400a      	ands	r2, r1
 80042fe:	609a      	str	r2, [r3, #8]
 8004300:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004302:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	f383 8810 	msr	PRIMASK, r3
}
 800430a:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a19      	ldr	r2, [pc, #100]	@ (8004374 <UART_RxISR_16BIT_FIFOEN+0x354>)
 8004310:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004312:	f3ef 8310 	mrs	r3, PRIMASK
 8004316:	61bb      	str	r3, [r7, #24]
  return(result);
 8004318:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800431a:	657b      	str	r3, [r7, #84]	@ 0x54
 800431c:	2301      	movs	r3, #1
 800431e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	f383 8810 	msr	PRIMASK, r3
}
 8004326:	46c0      	nop			@ (mov r8, r8)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2120      	movs	r1, #32
 8004334:	430a      	orrs	r2, r1
 8004336:	601a      	str	r2, [r3, #0]
 8004338:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800433a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800433c:	6a3b      	ldr	r3, [r7, #32]
 800433e:	f383 8810 	msr	PRIMASK, r3
}
 8004342:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004344:	e007      	b.n	8004356 <UART_RxISR_16BIT_FIFOEN+0x336>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	699a      	ldr	r2, [r3, #24]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2108      	movs	r1, #8
 8004352:	430a      	orrs	r2, r1
 8004354:	619a      	str	r2, [r3, #24]
}
 8004356:	46c0      	nop			@ (mov r8, r8)
 8004358:	46bd      	mov	sp, r7
 800435a:	b022      	add	sp, #136	@ 0x88
 800435c:	bd80      	pop	{r7, pc}
 800435e:	46c0      	nop			@ (mov r8, r8)
 8004360:	fffffeff 	.word	0xfffffeff
 8004364:	effffffe 	.word	0xeffffffe
 8004368:	40008000 	.word	0x40008000
 800436c:	fbffffff 	.word	0xfbffffff
 8004370:	efffffff 	.word	0xefffffff
 8004374:	08003b1d 	.word	0x08003b1d

08004378 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004380:	46c0      	nop			@ (mov r8, r8)
 8004382:	46bd      	mov	sp, r7
 8004384:	b002      	add	sp, #8
 8004386:	bd80      	pop	{r7, pc}

08004388 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004390:	46c0      	nop			@ (mov r8, r8)
 8004392:	46bd      	mov	sp, r7
 8004394:	b002      	add	sp, #8
 8004396:	bd80      	pop	{r7, pc}

08004398 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80043a0:	46c0      	nop			@ (mov r8, r8)
 80043a2:	46bd      	mov	sp, r7
 80043a4:	b002      	add	sp, #8
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2284      	movs	r2, #132	@ 0x84
 80043b4:	5c9b      	ldrb	r3, [r3, r2]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d101      	bne.n	80043be <HAL_UARTEx_DisableFifoMode+0x16>
 80043ba:	2302      	movs	r3, #2
 80043bc:	e027      	b.n	800440e <HAL_UARTEx_DisableFifoMode+0x66>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2284      	movs	r2, #132	@ 0x84
 80043c2:	2101      	movs	r1, #1
 80043c4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2288      	movs	r2, #136	@ 0x88
 80043ca:	2124      	movs	r1, #36	@ 0x24
 80043cc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2101      	movs	r1, #1
 80043e2:	438a      	bics	r2, r1
 80043e4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	4a0b      	ldr	r2, [pc, #44]	@ (8004418 <HAL_UARTEx_DisableFifoMode+0x70>)
 80043ea:	4013      	ands	r3, r2
 80043ec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2288      	movs	r2, #136	@ 0x88
 8004400:	2120      	movs	r1, #32
 8004402:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2284      	movs	r2, #132	@ 0x84
 8004408:	2100      	movs	r1, #0
 800440a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	0018      	movs	r0, r3
 8004410:	46bd      	mov	sp, r7
 8004412:	b004      	add	sp, #16
 8004414:	bd80      	pop	{r7, pc}
 8004416:	46c0      	nop			@ (mov r8, r8)
 8004418:	dfffffff 	.word	0xdfffffff

0800441c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2284      	movs	r2, #132	@ 0x84
 800442a:	5c9b      	ldrb	r3, [r3, r2]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d101      	bne.n	8004434 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004430:	2302      	movs	r3, #2
 8004432:	e02e      	b.n	8004492 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2284      	movs	r2, #132	@ 0x84
 8004438:	2101      	movs	r1, #1
 800443a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2288      	movs	r2, #136	@ 0x88
 8004440:	2124      	movs	r1, #36	@ 0x24
 8004442:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2101      	movs	r1, #1
 8004458:	438a      	bics	r2, r1
 800445a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	00db      	lsls	r3, r3, #3
 8004464:	08d9      	lsrs	r1, r3, #3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	683a      	ldr	r2, [r7, #0]
 800446c:	430a      	orrs	r2, r1
 800446e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	0018      	movs	r0, r3
 8004474:	f000 f854 	bl	8004520 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2288      	movs	r2, #136	@ 0x88
 8004484:	2120      	movs	r1, #32
 8004486:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2284      	movs	r2, #132	@ 0x84
 800448c:	2100      	movs	r1, #0
 800448e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	0018      	movs	r0, r3
 8004494:	46bd      	mov	sp, r7
 8004496:	b004      	add	sp, #16
 8004498:	bd80      	pop	{r7, pc}
	...

0800449c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2284      	movs	r2, #132	@ 0x84
 80044aa:	5c9b      	ldrb	r3, [r3, r2]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d101      	bne.n	80044b4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80044b0:	2302      	movs	r3, #2
 80044b2:	e02f      	b.n	8004514 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2284      	movs	r2, #132	@ 0x84
 80044b8:	2101      	movs	r1, #1
 80044ba:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2288      	movs	r2, #136	@ 0x88
 80044c0:	2124      	movs	r1, #36	@ 0x24
 80044c2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2101      	movs	r1, #1
 80044d8:	438a      	bics	r2, r1
 80044da:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	4a0e      	ldr	r2, [pc, #56]	@ (800451c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80044e4:	4013      	ands	r3, r2
 80044e6:	0019      	movs	r1, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	683a      	ldr	r2, [r7, #0]
 80044ee:	430a      	orrs	r2, r1
 80044f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	0018      	movs	r0, r3
 80044f6:	f000 f813 	bl	8004520 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2288      	movs	r2, #136	@ 0x88
 8004506:	2120      	movs	r1, #32
 8004508:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2284      	movs	r2, #132	@ 0x84
 800450e:	2100      	movs	r1, #0
 8004510:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	0018      	movs	r0, r3
 8004516:	46bd      	mov	sp, r7
 8004518:	b004      	add	sp, #16
 800451a:	bd80      	pop	{r7, pc}
 800451c:	f1ffffff 	.word	0xf1ffffff

08004520 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004522:	b085      	sub	sp, #20
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800452c:	2b00      	cmp	r3, #0
 800452e:	d108      	bne.n	8004542 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	226a      	movs	r2, #106	@ 0x6a
 8004534:	2101      	movs	r1, #1
 8004536:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2268      	movs	r2, #104	@ 0x68
 800453c:	2101      	movs	r1, #1
 800453e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004540:	e043      	b.n	80045ca <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004542:	260f      	movs	r6, #15
 8004544:	19bb      	adds	r3, r7, r6
 8004546:	2208      	movs	r2, #8
 8004548:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800454a:	200e      	movs	r0, #14
 800454c:	183b      	adds	r3, r7, r0
 800454e:	2208      	movs	r2, #8
 8004550:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	0e5b      	lsrs	r3, r3, #25
 800455a:	b2da      	uxtb	r2, r3
 800455c:	240d      	movs	r4, #13
 800455e:	193b      	adds	r3, r7, r4
 8004560:	2107      	movs	r1, #7
 8004562:	400a      	ands	r2, r1
 8004564:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	0f5b      	lsrs	r3, r3, #29
 800456e:	b2da      	uxtb	r2, r3
 8004570:	250c      	movs	r5, #12
 8004572:	197b      	adds	r3, r7, r5
 8004574:	2107      	movs	r1, #7
 8004576:	400a      	ands	r2, r1
 8004578:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800457a:	183b      	adds	r3, r7, r0
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	197a      	adds	r2, r7, r5
 8004580:	7812      	ldrb	r2, [r2, #0]
 8004582:	4914      	ldr	r1, [pc, #80]	@ (80045d4 <UARTEx_SetNbDataToProcess+0xb4>)
 8004584:	5c8a      	ldrb	r2, [r1, r2]
 8004586:	435a      	muls	r2, r3
 8004588:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800458a:	197b      	adds	r3, r7, r5
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	4a12      	ldr	r2, [pc, #72]	@ (80045d8 <UARTEx_SetNbDataToProcess+0xb8>)
 8004590:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004592:	0019      	movs	r1, r3
 8004594:	f7fb fe4a 	bl	800022c <__divsi3>
 8004598:	0003      	movs	r3, r0
 800459a:	b299      	uxth	r1, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	226a      	movs	r2, #106	@ 0x6a
 80045a0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80045a2:	19bb      	adds	r3, r7, r6
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	193a      	adds	r2, r7, r4
 80045a8:	7812      	ldrb	r2, [r2, #0]
 80045aa:	490a      	ldr	r1, [pc, #40]	@ (80045d4 <UARTEx_SetNbDataToProcess+0xb4>)
 80045ac:	5c8a      	ldrb	r2, [r1, r2]
 80045ae:	435a      	muls	r2, r3
 80045b0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80045b2:	193b      	adds	r3, r7, r4
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	4a08      	ldr	r2, [pc, #32]	@ (80045d8 <UARTEx_SetNbDataToProcess+0xb8>)
 80045b8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80045ba:	0019      	movs	r1, r3
 80045bc:	f7fb fe36 	bl	800022c <__divsi3>
 80045c0:	0003      	movs	r3, r0
 80045c2:	b299      	uxth	r1, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2268      	movs	r2, #104	@ 0x68
 80045c8:	5299      	strh	r1, [r3, r2]
}
 80045ca:	46c0      	nop			@ (mov r8, r8)
 80045cc:	46bd      	mov	sp, r7
 80045ce:	b005      	add	sp, #20
 80045d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045d2:	46c0      	nop			@ (mov r8, r8)
 80045d4:	08004fcc 	.word	0x08004fcc
 80045d8:	08004fd4 	.word	0x08004fd4

080045dc <siprintf>:
 80045dc:	b40e      	push	{r1, r2, r3}
 80045de:	b500      	push	{lr}
 80045e0:	490b      	ldr	r1, [pc, #44]	@ (8004610 <siprintf+0x34>)
 80045e2:	b09c      	sub	sp, #112	@ 0x70
 80045e4:	ab1d      	add	r3, sp, #116	@ 0x74
 80045e6:	9002      	str	r0, [sp, #8]
 80045e8:	9006      	str	r0, [sp, #24]
 80045ea:	9107      	str	r1, [sp, #28]
 80045ec:	9104      	str	r1, [sp, #16]
 80045ee:	4809      	ldr	r0, [pc, #36]	@ (8004614 <siprintf+0x38>)
 80045f0:	4909      	ldr	r1, [pc, #36]	@ (8004618 <siprintf+0x3c>)
 80045f2:	cb04      	ldmia	r3!, {r2}
 80045f4:	9105      	str	r1, [sp, #20]
 80045f6:	6800      	ldr	r0, [r0, #0]
 80045f8:	a902      	add	r1, sp, #8
 80045fa:	9301      	str	r3, [sp, #4]
 80045fc:	f000 f99e 	bl	800493c <_svfiprintf_r>
 8004600:	2200      	movs	r2, #0
 8004602:	9b02      	ldr	r3, [sp, #8]
 8004604:	701a      	strb	r2, [r3, #0]
 8004606:	b01c      	add	sp, #112	@ 0x70
 8004608:	bc08      	pop	{r3}
 800460a:	b003      	add	sp, #12
 800460c:	4718      	bx	r3
 800460e:	46c0      	nop			@ (mov r8, r8)
 8004610:	7fffffff 	.word	0x7fffffff
 8004614:	2000000c 	.word	0x2000000c
 8004618:	ffff0208 	.word	0xffff0208

0800461c <memset>:
 800461c:	0003      	movs	r3, r0
 800461e:	1882      	adds	r2, r0, r2
 8004620:	4293      	cmp	r3, r2
 8004622:	d100      	bne.n	8004626 <memset+0xa>
 8004624:	4770      	bx	lr
 8004626:	7019      	strb	r1, [r3, #0]
 8004628:	3301      	adds	r3, #1
 800462a:	e7f9      	b.n	8004620 <memset+0x4>

0800462c <__errno>:
 800462c:	4b01      	ldr	r3, [pc, #4]	@ (8004634 <__errno+0x8>)
 800462e:	6818      	ldr	r0, [r3, #0]
 8004630:	4770      	bx	lr
 8004632:	46c0      	nop			@ (mov r8, r8)
 8004634:	2000000c 	.word	0x2000000c

08004638 <__libc_init_array>:
 8004638:	b570      	push	{r4, r5, r6, lr}
 800463a:	2600      	movs	r6, #0
 800463c:	4c0c      	ldr	r4, [pc, #48]	@ (8004670 <__libc_init_array+0x38>)
 800463e:	4d0d      	ldr	r5, [pc, #52]	@ (8004674 <__libc_init_array+0x3c>)
 8004640:	1b64      	subs	r4, r4, r5
 8004642:	10a4      	asrs	r4, r4, #2
 8004644:	42a6      	cmp	r6, r4
 8004646:	d109      	bne.n	800465c <__libc_init_array+0x24>
 8004648:	2600      	movs	r6, #0
 800464a:	f000 fc65 	bl	8004f18 <_init>
 800464e:	4c0a      	ldr	r4, [pc, #40]	@ (8004678 <__libc_init_array+0x40>)
 8004650:	4d0a      	ldr	r5, [pc, #40]	@ (800467c <__libc_init_array+0x44>)
 8004652:	1b64      	subs	r4, r4, r5
 8004654:	10a4      	asrs	r4, r4, #2
 8004656:	42a6      	cmp	r6, r4
 8004658:	d105      	bne.n	8004666 <__libc_init_array+0x2e>
 800465a:	bd70      	pop	{r4, r5, r6, pc}
 800465c:	00b3      	lsls	r3, r6, #2
 800465e:	58eb      	ldr	r3, [r5, r3]
 8004660:	4798      	blx	r3
 8004662:	3601      	adds	r6, #1
 8004664:	e7ee      	b.n	8004644 <__libc_init_array+0xc>
 8004666:	00b3      	lsls	r3, r6, #2
 8004668:	58eb      	ldr	r3, [r5, r3]
 800466a:	4798      	blx	r3
 800466c:	3601      	adds	r6, #1
 800466e:	e7f2      	b.n	8004656 <__libc_init_array+0x1e>
 8004670:	08005018 	.word	0x08005018
 8004674:	08005018 	.word	0x08005018
 8004678:	0800501c 	.word	0x0800501c
 800467c:	08005018 	.word	0x08005018

08004680 <__retarget_lock_acquire_recursive>:
 8004680:	4770      	bx	lr

08004682 <__retarget_lock_release_recursive>:
 8004682:	4770      	bx	lr

08004684 <_free_r>:
 8004684:	b570      	push	{r4, r5, r6, lr}
 8004686:	0005      	movs	r5, r0
 8004688:	1e0c      	subs	r4, r1, #0
 800468a:	d010      	beq.n	80046ae <_free_r+0x2a>
 800468c:	3c04      	subs	r4, #4
 800468e:	6823      	ldr	r3, [r4, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	da00      	bge.n	8004696 <_free_r+0x12>
 8004694:	18e4      	adds	r4, r4, r3
 8004696:	0028      	movs	r0, r5
 8004698:	f000 f8e0 	bl	800485c <__malloc_lock>
 800469c:	4a1d      	ldr	r2, [pc, #116]	@ (8004714 <_free_r+0x90>)
 800469e:	6813      	ldr	r3, [r2, #0]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d105      	bne.n	80046b0 <_free_r+0x2c>
 80046a4:	6063      	str	r3, [r4, #4]
 80046a6:	6014      	str	r4, [r2, #0]
 80046a8:	0028      	movs	r0, r5
 80046aa:	f000 f8df 	bl	800486c <__malloc_unlock>
 80046ae:	bd70      	pop	{r4, r5, r6, pc}
 80046b0:	42a3      	cmp	r3, r4
 80046b2:	d908      	bls.n	80046c6 <_free_r+0x42>
 80046b4:	6820      	ldr	r0, [r4, #0]
 80046b6:	1821      	adds	r1, r4, r0
 80046b8:	428b      	cmp	r3, r1
 80046ba:	d1f3      	bne.n	80046a4 <_free_r+0x20>
 80046bc:	6819      	ldr	r1, [r3, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	1809      	adds	r1, r1, r0
 80046c2:	6021      	str	r1, [r4, #0]
 80046c4:	e7ee      	b.n	80046a4 <_free_r+0x20>
 80046c6:	001a      	movs	r2, r3
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d001      	beq.n	80046d2 <_free_r+0x4e>
 80046ce:	42a3      	cmp	r3, r4
 80046d0:	d9f9      	bls.n	80046c6 <_free_r+0x42>
 80046d2:	6811      	ldr	r1, [r2, #0]
 80046d4:	1850      	adds	r0, r2, r1
 80046d6:	42a0      	cmp	r0, r4
 80046d8:	d10b      	bne.n	80046f2 <_free_r+0x6e>
 80046da:	6820      	ldr	r0, [r4, #0]
 80046dc:	1809      	adds	r1, r1, r0
 80046de:	1850      	adds	r0, r2, r1
 80046e0:	6011      	str	r1, [r2, #0]
 80046e2:	4283      	cmp	r3, r0
 80046e4:	d1e0      	bne.n	80046a8 <_free_r+0x24>
 80046e6:	6818      	ldr	r0, [r3, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	1841      	adds	r1, r0, r1
 80046ec:	6011      	str	r1, [r2, #0]
 80046ee:	6053      	str	r3, [r2, #4]
 80046f0:	e7da      	b.n	80046a8 <_free_r+0x24>
 80046f2:	42a0      	cmp	r0, r4
 80046f4:	d902      	bls.n	80046fc <_free_r+0x78>
 80046f6:	230c      	movs	r3, #12
 80046f8:	602b      	str	r3, [r5, #0]
 80046fa:	e7d5      	b.n	80046a8 <_free_r+0x24>
 80046fc:	6820      	ldr	r0, [r4, #0]
 80046fe:	1821      	adds	r1, r4, r0
 8004700:	428b      	cmp	r3, r1
 8004702:	d103      	bne.n	800470c <_free_r+0x88>
 8004704:	6819      	ldr	r1, [r3, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	1809      	adds	r1, r1, r0
 800470a:	6021      	str	r1, [r4, #0]
 800470c:	6063      	str	r3, [r4, #4]
 800470e:	6054      	str	r4, [r2, #4]
 8004710:	e7ca      	b.n	80046a8 <_free_r+0x24>
 8004712:	46c0      	nop			@ (mov r8, r8)
 8004714:	20000274 	.word	0x20000274

08004718 <sbrk_aligned>:
 8004718:	b570      	push	{r4, r5, r6, lr}
 800471a:	4e0f      	ldr	r6, [pc, #60]	@ (8004758 <sbrk_aligned+0x40>)
 800471c:	000d      	movs	r5, r1
 800471e:	6831      	ldr	r1, [r6, #0]
 8004720:	0004      	movs	r4, r0
 8004722:	2900      	cmp	r1, #0
 8004724:	d102      	bne.n	800472c <sbrk_aligned+0x14>
 8004726:	f000 fb99 	bl	8004e5c <_sbrk_r>
 800472a:	6030      	str	r0, [r6, #0]
 800472c:	0029      	movs	r1, r5
 800472e:	0020      	movs	r0, r4
 8004730:	f000 fb94 	bl	8004e5c <_sbrk_r>
 8004734:	1c43      	adds	r3, r0, #1
 8004736:	d103      	bne.n	8004740 <sbrk_aligned+0x28>
 8004738:	2501      	movs	r5, #1
 800473a:	426d      	negs	r5, r5
 800473c:	0028      	movs	r0, r5
 800473e:	bd70      	pop	{r4, r5, r6, pc}
 8004740:	2303      	movs	r3, #3
 8004742:	1cc5      	adds	r5, r0, #3
 8004744:	439d      	bics	r5, r3
 8004746:	42a8      	cmp	r0, r5
 8004748:	d0f8      	beq.n	800473c <sbrk_aligned+0x24>
 800474a:	1a29      	subs	r1, r5, r0
 800474c:	0020      	movs	r0, r4
 800474e:	f000 fb85 	bl	8004e5c <_sbrk_r>
 8004752:	3001      	adds	r0, #1
 8004754:	d1f2      	bne.n	800473c <sbrk_aligned+0x24>
 8004756:	e7ef      	b.n	8004738 <sbrk_aligned+0x20>
 8004758:	20000270 	.word	0x20000270

0800475c <_malloc_r>:
 800475c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800475e:	2203      	movs	r2, #3
 8004760:	1ccb      	adds	r3, r1, #3
 8004762:	4393      	bics	r3, r2
 8004764:	3308      	adds	r3, #8
 8004766:	0005      	movs	r5, r0
 8004768:	001f      	movs	r7, r3
 800476a:	2b0c      	cmp	r3, #12
 800476c:	d234      	bcs.n	80047d8 <_malloc_r+0x7c>
 800476e:	270c      	movs	r7, #12
 8004770:	42b9      	cmp	r1, r7
 8004772:	d833      	bhi.n	80047dc <_malloc_r+0x80>
 8004774:	0028      	movs	r0, r5
 8004776:	f000 f871 	bl	800485c <__malloc_lock>
 800477a:	4e37      	ldr	r6, [pc, #220]	@ (8004858 <_malloc_r+0xfc>)
 800477c:	6833      	ldr	r3, [r6, #0]
 800477e:	001c      	movs	r4, r3
 8004780:	2c00      	cmp	r4, #0
 8004782:	d12f      	bne.n	80047e4 <_malloc_r+0x88>
 8004784:	0039      	movs	r1, r7
 8004786:	0028      	movs	r0, r5
 8004788:	f7ff ffc6 	bl	8004718 <sbrk_aligned>
 800478c:	0004      	movs	r4, r0
 800478e:	1c43      	adds	r3, r0, #1
 8004790:	d15f      	bne.n	8004852 <_malloc_r+0xf6>
 8004792:	6834      	ldr	r4, [r6, #0]
 8004794:	9400      	str	r4, [sp, #0]
 8004796:	9b00      	ldr	r3, [sp, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d14a      	bne.n	8004832 <_malloc_r+0xd6>
 800479c:	2c00      	cmp	r4, #0
 800479e:	d052      	beq.n	8004846 <_malloc_r+0xea>
 80047a0:	6823      	ldr	r3, [r4, #0]
 80047a2:	0028      	movs	r0, r5
 80047a4:	18e3      	adds	r3, r4, r3
 80047a6:	9900      	ldr	r1, [sp, #0]
 80047a8:	9301      	str	r3, [sp, #4]
 80047aa:	f000 fb57 	bl	8004e5c <_sbrk_r>
 80047ae:	9b01      	ldr	r3, [sp, #4]
 80047b0:	4283      	cmp	r3, r0
 80047b2:	d148      	bne.n	8004846 <_malloc_r+0xea>
 80047b4:	6823      	ldr	r3, [r4, #0]
 80047b6:	0028      	movs	r0, r5
 80047b8:	1aff      	subs	r7, r7, r3
 80047ba:	0039      	movs	r1, r7
 80047bc:	f7ff ffac 	bl	8004718 <sbrk_aligned>
 80047c0:	3001      	adds	r0, #1
 80047c2:	d040      	beq.n	8004846 <_malloc_r+0xea>
 80047c4:	6823      	ldr	r3, [r4, #0]
 80047c6:	19db      	adds	r3, r3, r7
 80047c8:	6023      	str	r3, [r4, #0]
 80047ca:	6833      	ldr	r3, [r6, #0]
 80047cc:	685a      	ldr	r2, [r3, #4]
 80047ce:	2a00      	cmp	r2, #0
 80047d0:	d133      	bne.n	800483a <_malloc_r+0xde>
 80047d2:	9b00      	ldr	r3, [sp, #0]
 80047d4:	6033      	str	r3, [r6, #0]
 80047d6:	e019      	b.n	800480c <_malloc_r+0xb0>
 80047d8:	2b00      	cmp	r3, #0
 80047da:	dac9      	bge.n	8004770 <_malloc_r+0x14>
 80047dc:	230c      	movs	r3, #12
 80047de:	602b      	str	r3, [r5, #0]
 80047e0:	2000      	movs	r0, #0
 80047e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80047e4:	6821      	ldr	r1, [r4, #0]
 80047e6:	1bc9      	subs	r1, r1, r7
 80047e8:	d420      	bmi.n	800482c <_malloc_r+0xd0>
 80047ea:	290b      	cmp	r1, #11
 80047ec:	d90a      	bls.n	8004804 <_malloc_r+0xa8>
 80047ee:	19e2      	adds	r2, r4, r7
 80047f0:	6027      	str	r7, [r4, #0]
 80047f2:	42a3      	cmp	r3, r4
 80047f4:	d104      	bne.n	8004800 <_malloc_r+0xa4>
 80047f6:	6032      	str	r2, [r6, #0]
 80047f8:	6863      	ldr	r3, [r4, #4]
 80047fa:	6011      	str	r1, [r2, #0]
 80047fc:	6053      	str	r3, [r2, #4]
 80047fe:	e005      	b.n	800480c <_malloc_r+0xb0>
 8004800:	605a      	str	r2, [r3, #4]
 8004802:	e7f9      	b.n	80047f8 <_malloc_r+0x9c>
 8004804:	6862      	ldr	r2, [r4, #4]
 8004806:	42a3      	cmp	r3, r4
 8004808:	d10e      	bne.n	8004828 <_malloc_r+0xcc>
 800480a:	6032      	str	r2, [r6, #0]
 800480c:	0028      	movs	r0, r5
 800480e:	f000 f82d 	bl	800486c <__malloc_unlock>
 8004812:	0020      	movs	r0, r4
 8004814:	2207      	movs	r2, #7
 8004816:	300b      	adds	r0, #11
 8004818:	1d23      	adds	r3, r4, #4
 800481a:	4390      	bics	r0, r2
 800481c:	1ac2      	subs	r2, r0, r3
 800481e:	4298      	cmp	r0, r3
 8004820:	d0df      	beq.n	80047e2 <_malloc_r+0x86>
 8004822:	1a1b      	subs	r3, r3, r0
 8004824:	50a3      	str	r3, [r4, r2]
 8004826:	e7dc      	b.n	80047e2 <_malloc_r+0x86>
 8004828:	605a      	str	r2, [r3, #4]
 800482a:	e7ef      	b.n	800480c <_malloc_r+0xb0>
 800482c:	0023      	movs	r3, r4
 800482e:	6864      	ldr	r4, [r4, #4]
 8004830:	e7a6      	b.n	8004780 <_malloc_r+0x24>
 8004832:	9c00      	ldr	r4, [sp, #0]
 8004834:	6863      	ldr	r3, [r4, #4]
 8004836:	9300      	str	r3, [sp, #0]
 8004838:	e7ad      	b.n	8004796 <_malloc_r+0x3a>
 800483a:	001a      	movs	r2, r3
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	42a3      	cmp	r3, r4
 8004840:	d1fb      	bne.n	800483a <_malloc_r+0xde>
 8004842:	2300      	movs	r3, #0
 8004844:	e7da      	b.n	80047fc <_malloc_r+0xa0>
 8004846:	230c      	movs	r3, #12
 8004848:	0028      	movs	r0, r5
 800484a:	602b      	str	r3, [r5, #0]
 800484c:	f000 f80e 	bl	800486c <__malloc_unlock>
 8004850:	e7c6      	b.n	80047e0 <_malloc_r+0x84>
 8004852:	6007      	str	r7, [r0, #0]
 8004854:	e7da      	b.n	800480c <_malloc_r+0xb0>
 8004856:	46c0      	nop			@ (mov r8, r8)
 8004858:	20000274 	.word	0x20000274

0800485c <__malloc_lock>:
 800485c:	b510      	push	{r4, lr}
 800485e:	4802      	ldr	r0, [pc, #8]	@ (8004868 <__malloc_lock+0xc>)
 8004860:	f7ff ff0e 	bl	8004680 <__retarget_lock_acquire_recursive>
 8004864:	bd10      	pop	{r4, pc}
 8004866:	46c0      	nop			@ (mov r8, r8)
 8004868:	2000026c 	.word	0x2000026c

0800486c <__malloc_unlock>:
 800486c:	b510      	push	{r4, lr}
 800486e:	4802      	ldr	r0, [pc, #8]	@ (8004878 <__malloc_unlock+0xc>)
 8004870:	f7ff ff07 	bl	8004682 <__retarget_lock_release_recursive>
 8004874:	bd10      	pop	{r4, pc}
 8004876:	46c0      	nop			@ (mov r8, r8)
 8004878:	2000026c 	.word	0x2000026c

0800487c <__ssputs_r>:
 800487c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800487e:	688e      	ldr	r6, [r1, #8]
 8004880:	b085      	sub	sp, #20
 8004882:	001f      	movs	r7, r3
 8004884:	000c      	movs	r4, r1
 8004886:	680b      	ldr	r3, [r1, #0]
 8004888:	9002      	str	r0, [sp, #8]
 800488a:	9203      	str	r2, [sp, #12]
 800488c:	42be      	cmp	r6, r7
 800488e:	d830      	bhi.n	80048f2 <__ssputs_r+0x76>
 8004890:	210c      	movs	r1, #12
 8004892:	5e62      	ldrsh	r2, [r4, r1]
 8004894:	2190      	movs	r1, #144	@ 0x90
 8004896:	00c9      	lsls	r1, r1, #3
 8004898:	420a      	tst	r2, r1
 800489a:	d028      	beq.n	80048ee <__ssputs_r+0x72>
 800489c:	2003      	movs	r0, #3
 800489e:	6921      	ldr	r1, [r4, #16]
 80048a0:	1a5b      	subs	r3, r3, r1
 80048a2:	9301      	str	r3, [sp, #4]
 80048a4:	6963      	ldr	r3, [r4, #20]
 80048a6:	4343      	muls	r3, r0
 80048a8:	9801      	ldr	r0, [sp, #4]
 80048aa:	0fdd      	lsrs	r5, r3, #31
 80048ac:	18ed      	adds	r5, r5, r3
 80048ae:	1c7b      	adds	r3, r7, #1
 80048b0:	181b      	adds	r3, r3, r0
 80048b2:	106d      	asrs	r5, r5, #1
 80048b4:	42ab      	cmp	r3, r5
 80048b6:	d900      	bls.n	80048ba <__ssputs_r+0x3e>
 80048b8:	001d      	movs	r5, r3
 80048ba:	0552      	lsls	r2, r2, #21
 80048bc:	d528      	bpl.n	8004910 <__ssputs_r+0x94>
 80048be:	0029      	movs	r1, r5
 80048c0:	9802      	ldr	r0, [sp, #8]
 80048c2:	f7ff ff4b 	bl	800475c <_malloc_r>
 80048c6:	1e06      	subs	r6, r0, #0
 80048c8:	d02c      	beq.n	8004924 <__ssputs_r+0xa8>
 80048ca:	9a01      	ldr	r2, [sp, #4]
 80048cc:	6921      	ldr	r1, [r4, #16]
 80048ce:	f000 fae2 	bl	8004e96 <memcpy>
 80048d2:	89a2      	ldrh	r2, [r4, #12]
 80048d4:	4b18      	ldr	r3, [pc, #96]	@ (8004938 <__ssputs_r+0xbc>)
 80048d6:	401a      	ands	r2, r3
 80048d8:	2380      	movs	r3, #128	@ 0x80
 80048da:	4313      	orrs	r3, r2
 80048dc:	81a3      	strh	r3, [r4, #12]
 80048de:	9b01      	ldr	r3, [sp, #4]
 80048e0:	6126      	str	r6, [r4, #16]
 80048e2:	18f6      	adds	r6, r6, r3
 80048e4:	6026      	str	r6, [r4, #0]
 80048e6:	003e      	movs	r6, r7
 80048e8:	6165      	str	r5, [r4, #20]
 80048ea:	1aed      	subs	r5, r5, r3
 80048ec:	60a5      	str	r5, [r4, #8]
 80048ee:	42be      	cmp	r6, r7
 80048f0:	d900      	bls.n	80048f4 <__ssputs_r+0x78>
 80048f2:	003e      	movs	r6, r7
 80048f4:	0032      	movs	r2, r6
 80048f6:	9903      	ldr	r1, [sp, #12]
 80048f8:	6820      	ldr	r0, [r4, #0]
 80048fa:	f000 fa9b 	bl	8004e34 <memmove>
 80048fe:	2000      	movs	r0, #0
 8004900:	68a3      	ldr	r3, [r4, #8]
 8004902:	1b9b      	subs	r3, r3, r6
 8004904:	60a3      	str	r3, [r4, #8]
 8004906:	6823      	ldr	r3, [r4, #0]
 8004908:	199b      	adds	r3, r3, r6
 800490a:	6023      	str	r3, [r4, #0]
 800490c:	b005      	add	sp, #20
 800490e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004910:	002a      	movs	r2, r5
 8004912:	9802      	ldr	r0, [sp, #8]
 8004914:	f000 fac8 	bl	8004ea8 <_realloc_r>
 8004918:	1e06      	subs	r6, r0, #0
 800491a:	d1e0      	bne.n	80048de <__ssputs_r+0x62>
 800491c:	6921      	ldr	r1, [r4, #16]
 800491e:	9802      	ldr	r0, [sp, #8]
 8004920:	f7ff feb0 	bl	8004684 <_free_r>
 8004924:	230c      	movs	r3, #12
 8004926:	2001      	movs	r0, #1
 8004928:	9a02      	ldr	r2, [sp, #8]
 800492a:	4240      	negs	r0, r0
 800492c:	6013      	str	r3, [r2, #0]
 800492e:	89a2      	ldrh	r2, [r4, #12]
 8004930:	3334      	adds	r3, #52	@ 0x34
 8004932:	4313      	orrs	r3, r2
 8004934:	81a3      	strh	r3, [r4, #12]
 8004936:	e7e9      	b.n	800490c <__ssputs_r+0x90>
 8004938:	fffffb7f 	.word	0xfffffb7f

0800493c <_svfiprintf_r>:
 800493c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800493e:	b0a1      	sub	sp, #132	@ 0x84
 8004940:	9003      	str	r0, [sp, #12]
 8004942:	001d      	movs	r5, r3
 8004944:	898b      	ldrh	r3, [r1, #12]
 8004946:	000f      	movs	r7, r1
 8004948:	0016      	movs	r6, r2
 800494a:	061b      	lsls	r3, r3, #24
 800494c:	d511      	bpl.n	8004972 <_svfiprintf_r+0x36>
 800494e:	690b      	ldr	r3, [r1, #16]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10e      	bne.n	8004972 <_svfiprintf_r+0x36>
 8004954:	2140      	movs	r1, #64	@ 0x40
 8004956:	f7ff ff01 	bl	800475c <_malloc_r>
 800495a:	6038      	str	r0, [r7, #0]
 800495c:	6138      	str	r0, [r7, #16]
 800495e:	2800      	cmp	r0, #0
 8004960:	d105      	bne.n	800496e <_svfiprintf_r+0x32>
 8004962:	230c      	movs	r3, #12
 8004964:	9a03      	ldr	r2, [sp, #12]
 8004966:	6013      	str	r3, [r2, #0]
 8004968:	2001      	movs	r0, #1
 800496a:	4240      	negs	r0, r0
 800496c:	e0cf      	b.n	8004b0e <_svfiprintf_r+0x1d2>
 800496e:	2340      	movs	r3, #64	@ 0x40
 8004970:	617b      	str	r3, [r7, #20]
 8004972:	2300      	movs	r3, #0
 8004974:	ac08      	add	r4, sp, #32
 8004976:	6163      	str	r3, [r4, #20]
 8004978:	3320      	adds	r3, #32
 800497a:	7663      	strb	r3, [r4, #25]
 800497c:	3310      	adds	r3, #16
 800497e:	76a3      	strb	r3, [r4, #26]
 8004980:	9507      	str	r5, [sp, #28]
 8004982:	0035      	movs	r5, r6
 8004984:	782b      	ldrb	r3, [r5, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d001      	beq.n	800498e <_svfiprintf_r+0x52>
 800498a:	2b25      	cmp	r3, #37	@ 0x25
 800498c:	d148      	bne.n	8004a20 <_svfiprintf_r+0xe4>
 800498e:	1bab      	subs	r3, r5, r6
 8004990:	9305      	str	r3, [sp, #20]
 8004992:	42b5      	cmp	r5, r6
 8004994:	d00b      	beq.n	80049ae <_svfiprintf_r+0x72>
 8004996:	0032      	movs	r2, r6
 8004998:	0039      	movs	r1, r7
 800499a:	9803      	ldr	r0, [sp, #12]
 800499c:	f7ff ff6e 	bl	800487c <__ssputs_r>
 80049a0:	3001      	adds	r0, #1
 80049a2:	d100      	bne.n	80049a6 <_svfiprintf_r+0x6a>
 80049a4:	e0ae      	b.n	8004b04 <_svfiprintf_r+0x1c8>
 80049a6:	6963      	ldr	r3, [r4, #20]
 80049a8:	9a05      	ldr	r2, [sp, #20]
 80049aa:	189b      	adds	r3, r3, r2
 80049ac:	6163      	str	r3, [r4, #20]
 80049ae:	782b      	ldrb	r3, [r5, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d100      	bne.n	80049b6 <_svfiprintf_r+0x7a>
 80049b4:	e0a6      	b.n	8004b04 <_svfiprintf_r+0x1c8>
 80049b6:	2201      	movs	r2, #1
 80049b8:	2300      	movs	r3, #0
 80049ba:	4252      	negs	r2, r2
 80049bc:	6062      	str	r2, [r4, #4]
 80049be:	a904      	add	r1, sp, #16
 80049c0:	3254      	adds	r2, #84	@ 0x54
 80049c2:	1852      	adds	r2, r2, r1
 80049c4:	1c6e      	adds	r6, r5, #1
 80049c6:	6023      	str	r3, [r4, #0]
 80049c8:	60e3      	str	r3, [r4, #12]
 80049ca:	60a3      	str	r3, [r4, #8]
 80049cc:	7013      	strb	r3, [r2, #0]
 80049ce:	65a3      	str	r3, [r4, #88]	@ 0x58
 80049d0:	4b54      	ldr	r3, [pc, #336]	@ (8004b24 <_svfiprintf_r+0x1e8>)
 80049d2:	2205      	movs	r2, #5
 80049d4:	0018      	movs	r0, r3
 80049d6:	7831      	ldrb	r1, [r6, #0]
 80049d8:	9305      	str	r3, [sp, #20]
 80049da:	f000 fa51 	bl	8004e80 <memchr>
 80049de:	1c75      	adds	r5, r6, #1
 80049e0:	2800      	cmp	r0, #0
 80049e2:	d11f      	bne.n	8004a24 <_svfiprintf_r+0xe8>
 80049e4:	6822      	ldr	r2, [r4, #0]
 80049e6:	06d3      	lsls	r3, r2, #27
 80049e8:	d504      	bpl.n	80049f4 <_svfiprintf_r+0xb8>
 80049ea:	2353      	movs	r3, #83	@ 0x53
 80049ec:	a904      	add	r1, sp, #16
 80049ee:	185b      	adds	r3, r3, r1
 80049f0:	2120      	movs	r1, #32
 80049f2:	7019      	strb	r1, [r3, #0]
 80049f4:	0713      	lsls	r3, r2, #28
 80049f6:	d504      	bpl.n	8004a02 <_svfiprintf_r+0xc6>
 80049f8:	2353      	movs	r3, #83	@ 0x53
 80049fa:	a904      	add	r1, sp, #16
 80049fc:	185b      	adds	r3, r3, r1
 80049fe:	212b      	movs	r1, #43	@ 0x2b
 8004a00:	7019      	strb	r1, [r3, #0]
 8004a02:	7833      	ldrb	r3, [r6, #0]
 8004a04:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a06:	d016      	beq.n	8004a36 <_svfiprintf_r+0xfa>
 8004a08:	0035      	movs	r5, r6
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	200a      	movs	r0, #10
 8004a0e:	68e3      	ldr	r3, [r4, #12]
 8004a10:	782a      	ldrb	r2, [r5, #0]
 8004a12:	1c6e      	adds	r6, r5, #1
 8004a14:	3a30      	subs	r2, #48	@ 0x30
 8004a16:	2a09      	cmp	r2, #9
 8004a18:	d950      	bls.n	8004abc <_svfiprintf_r+0x180>
 8004a1a:	2900      	cmp	r1, #0
 8004a1c:	d111      	bne.n	8004a42 <_svfiprintf_r+0x106>
 8004a1e:	e017      	b.n	8004a50 <_svfiprintf_r+0x114>
 8004a20:	3501      	adds	r5, #1
 8004a22:	e7af      	b.n	8004984 <_svfiprintf_r+0x48>
 8004a24:	9b05      	ldr	r3, [sp, #20]
 8004a26:	6822      	ldr	r2, [r4, #0]
 8004a28:	1ac0      	subs	r0, r0, r3
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	4083      	lsls	r3, r0
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	002e      	movs	r6, r5
 8004a32:	6023      	str	r3, [r4, #0]
 8004a34:	e7cc      	b.n	80049d0 <_svfiprintf_r+0x94>
 8004a36:	9b07      	ldr	r3, [sp, #28]
 8004a38:	1d19      	adds	r1, r3, #4
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	9107      	str	r1, [sp, #28]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	db01      	blt.n	8004a46 <_svfiprintf_r+0x10a>
 8004a42:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004a44:	e004      	b.n	8004a50 <_svfiprintf_r+0x114>
 8004a46:	425b      	negs	r3, r3
 8004a48:	60e3      	str	r3, [r4, #12]
 8004a4a:	2302      	movs	r3, #2
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	6023      	str	r3, [r4, #0]
 8004a50:	782b      	ldrb	r3, [r5, #0]
 8004a52:	2b2e      	cmp	r3, #46	@ 0x2e
 8004a54:	d10c      	bne.n	8004a70 <_svfiprintf_r+0x134>
 8004a56:	786b      	ldrb	r3, [r5, #1]
 8004a58:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a5a:	d134      	bne.n	8004ac6 <_svfiprintf_r+0x18a>
 8004a5c:	9b07      	ldr	r3, [sp, #28]
 8004a5e:	3502      	adds	r5, #2
 8004a60:	1d1a      	adds	r2, r3, #4
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	9207      	str	r2, [sp, #28]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	da01      	bge.n	8004a6e <_svfiprintf_r+0x132>
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	425b      	negs	r3, r3
 8004a6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a70:	4e2d      	ldr	r6, [pc, #180]	@ (8004b28 <_svfiprintf_r+0x1ec>)
 8004a72:	2203      	movs	r2, #3
 8004a74:	0030      	movs	r0, r6
 8004a76:	7829      	ldrb	r1, [r5, #0]
 8004a78:	f000 fa02 	bl	8004e80 <memchr>
 8004a7c:	2800      	cmp	r0, #0
 8004a7e:	d006      	beq.n	8004a8e <_svfiprintf_r+0x152>
 8004a80:	2340      	movs	r3, #64	@ 0x40
 8004a82:	1b80      	subs	r0, r0, r6
 8004a84:	4083      	lsls	r3, r0
 8004a86:	6822      	ldr	r2, [r4, #0]
 8004a88:	3501      	adds	r5, #1
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	6023      	str	r3, [r4, #0]
 8004a8e:	7829      	ldrb	r1, [r5, #0]
 8004a90:	2206      	movs	r2, #6
 8004a92:	4826      	ldr	r0, [pc, #152]	@ (8004b2c <_svfiprintf_r+0x1f0>)
 8004a94:	1c6e      	adds	r6, r5, #1
 8004a96:	7621      	strb	r1, [r4, #24]
 8004a98:	f000 f9f2 	bl	8004e80 <memchr>
 8004a9c:	2800      	cmp	r0, #0
 8004a9e:	d038      	beq.n	8004b12 <_svfiprintf_r+0x1d6>
 8004aa0:	4b23      	ldr	r3, [pc, #140]	@ (8004b30 <_svfiprintf_r+0x1f4>)
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d122      	bne.n	8004aec <_svfiprintf_r+0x1b0>
 8004aa6:	2207      	movs	r2, #7
 8004aa8:	9b07      	ldr	r3, [sp, #28]
 8004aaa:	3307      	adds	r3, #7
 8004aac:	4393      	bics	r3, r2
 8004aae:	3308      	adds	r3, #8
 8004ab0:	9307      	str	r3, [sp, #28]
 8004ab2:	6963      	ldr	r3, [r4, #20]
 8004ab4:	9a04      	ldr	r2, [sp, #16]
 8004ab6:	189b      	adds	r3, r3, r2
 8004ab8:	6163      	str	r3, [r4, #20]
 8004aba:	e762      	b.n	8004982 <_svfiprintf_r+0x46>
 8004abc:	4343      	muls	r3, r0
 8004abe:	0035      	movs	r5, r6
 8004ac0:	2101      	movs	r1, #1
 8004ac2:	189b      	adds	r3, r3, r2
 8004ac4:	e7a4      	b.n	8004a10 <_svfiprintf_r+0xd4>
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	200a      	movs	r0, #10
 8004aca:	0019      	movs	r1, r3
 8004acc:	3501      	adds	r5, #1
 8004ace:	6063      	str	r3, [r4, #4]
 8004ad0:	782a      	ldrb	r2, [r5, #0]
 8004ad2:	1c6e      	adds	r6, r5, #1
 8004ad4:	3a30      	subs	r2, #48	@ 0x30
 8004ad6:	2a09      	cmp	r2, #9
 8004ad8:	d903      	bls.n	8004ae2 <_svfiprintf_r+0x1a6>
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d0c8      	beq.n	8004a70 <_svfiprintf_r+0x134>
 8004ade:	9109      	str	r1, [sp, #36]	@ 0x24
 8004ae0:	e7c6      	b.n	8004a70 <_svfiprintf_r+0x134>
 8004ae2:	4341      	muls	r1, r0
 8004ae4:	0035      	movs	r5, r6
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	1889      	adds	r1, r1, r2
 8004aea:	e7f1      	b.n	8004ad0 <_svfiprintf_r+0x194>
 8004aec:	aa07      	add	r2, sp, #28
 8004aee:	9200      	str	r2, [sp, #0]
 8004af0:	0021      	movs	r1, r4
 8004af2:	003a      	movs	r2, r7
 8004af4:	4b0f      	ldr	r3, [pc, #60]	@ (8004b34 <_svfiprintf_r+0x1f8>)
 8004af6:	9803      	ldr	r0, [sp, #12]
 8004af8:	e000      	b.n	8004afc <_svfiprintf_r+0x1c0>
 8004afa:	bf00      	nop
 8004afc:	9004      	str	r0, [sp, #16]
 8004afe:	9b04      	ldr	r3, [sp, #16]
 8004b00:	3301      	adds	r3, #1
 8004b02:	d1d6      	bne.n	8004ab2 <_svfiprintf_r+0x176>
 8004b04:	89bb      	ldrh	r3, [r7, #12]
 8004b06:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004b08:	065b      	lsls	r3, r3, #25
 8004b0a:	d500      	bpl.n	8004b0e <_svfiprintf_r+0x1d2>
 8004b0c:	e72c      	b.n	8004968 <_svfiprintf_r+0x2c>
 8004b0e:	b021      	add	sp, #132	@ 0x84
 8004b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b12:	aa07      	add	r2, sp, #28
 8004b14:	9200      	str	r2, [sp, #0]
 8004b16:	0021      	movs	r1, r4
 8004b18:	003a      	movs	r2, r7
 8004b1a:	4b06      	ldr	r3, [pc, #24]	@ (8004b34 <_svfiprintf_r+0x1f8>)
 8004b1c:	9803      	ldr	r0, [sp, #12]
 8004b1e:	f000 f87b 	bl	8004c18 <_printf_i>
 8004b22:	e7eb      	b.n	8004afc <_svfiprintf_r+0x1c0>
 8004b24:	08004fdc 	.word	0x08004fdc
 8004b28:	08004fe2 	.word	0x08004fe2
 8004b2c:	08004fe6 	.word	0x08004fe6
 8004b30:	00000000 	.word	0x00000000
 8004b34:	0800487d 	.word	0x0800487d

08004b38 <_printf_common>:
 8004b38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b3a:	0016      	movs	r6, r2
 8004b3c:	9301      	str	r3, [sp, #4]
 8004b3e:	688a      	ldr	r2, [r1, #8]
 8004b40:	690b      	ldr	r3, [r1, #16]
 8004b42:	000c      	movs	r4, r1
 8004b44:	9000      	str	r0, [sp, #0]
 8004b46:	4293      	cmp	r3, r2
 8004b48:	da00      	bge.n	8004b4c <_printf_common+0x14>
 8004b4a:	0013      	movs	r3, r2
 8004b4c:	0022      	movs	r2, r4
 8004b4e:	6033      	str	r3, [r6, #0]
 8004b50:	3243      	adds	r2, #67	@ 0x43
 8004b52:	7812      	ldrb	r2, [r2, #0]
 8004b54:	2a00      	cmp	r2, #0
 8004b56:	d001      	beq.n	8004b5c <_printf_common+0x24>
 8004b58:	3301      	adds	r3, #1
 8004b5a:	6033      	str	r3, [r6, #0]
 8004b5c:	6823      	ldr	r3, [r4, #0]
 8004b5e:	069b      	lsls	r3, r3, #26
 8004b60:	d502      	bpl.n	8004b68 <_printf_common+0x30>
 8004b62:	6833      	ldr	r3, [r6, #0]
 8004b64:	3302      	adds	r3, #2
 8004b66:	6033      	str	r3, [r6, #0]
 8004b68:	6822      	ldr	r2, [r4, #0]
 8004b6a:	2306      	movs	r3, #6
 8004b6c:	0015      	movs	r5, r2
 8004b6e:	401d      	ands	r5, r3
 8004b70:	421a      	tst	r2, r3
 8004b72:	d027      	beq.n	8004bc4 <_printf_common+0x8c>
 8004b74:	0023      	movs	r3, r4
 8004b76:	3343      	adds	r3, #67	@ 0x43
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	1e5a      	subs	r2, r3, #1
 8004b7c:	4193      	sbcs	r3, r2
 8004b7e:	6822      	ldr	r2, [r4, #0]
 8004b80:	0692      	lsls	r2, r2, #26
 8004b82:	d430      	bmi.n	8004be6 <_printf_common+0xae>
 8004b84:	0022      	movs	r2, r4
 8004b86:	9901      	ldr	r1, [sp, #4]
 8004b88:	9800      	ldr	r0, [sp, #0]
 8004b8a:	9d08      	ldr	r5, [sp, #32]
 8004b8c:	3243      	adds	r2, #67	@ 0x43
 8004b8e:	47a8      	blx	r5
 8004b90:	3001      	adds	r0, #1
 8004b92:	d025      	beq.n	8004be0 <_printf_common+0xa8>
 8004b94:	2206      	movs	r2, #6
 8004b96:	6823      	ldr	r3, [r4, #0]
 8004b98:	2500      	movs	r5, #0
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	2b04      	cmp	r3, #4
 8004b9e:	d105      	bne.n	8004bac <_printf_common+0x74>
 8004ba0:	6833      	ldr	r3, [r6, #0]
 8004ba2:	68e5      	ldr	r5, [r4, #12]
 8004ba4:	1aed      	subs	r5, r5, r3
 8004ba6:	43eb      	mvns	r3, r5
 8004ba8:	17db      	asrs	r3, r3, #31
 8004baa:	401d      	ands	r5, r3
 8004bac:	68a3      	ldr	r3, [r4, #8]
 8004bae:	6922      	ldr	r2, [r4, #16]
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	dd01      	ble.n	8004bb8 <_printf_common+0x80>
 8004bb4:	1a9b      	subs	r3, r3, r2
 8004bb6:	18ed      	adds	r5, r5, r3
 8004bb8:	2600      	movs	r6, #0
 8004bba:	42b5      	cmp	r5, r6
 8004bbc:	d120      	bne.n	8004c00 <_printf_common+0xc8>
 8004bbe:	2000      	movs	r0, #0
 8004bc0:	e010      	b.n	8004be4 <_printf_common+0xac>
 8004bc2:	3501      	adds	r5, #1
 8004bc4:	68e3      	ldr	r3, [r4, #12]
 8004bc6:	6832      	ldr	r2, [r6, #0]
 8004bc8:	1a9b      	subs	r3, r3, r2
 8004bca:	42ab      	cmp	r3, r5
 8004bcc:	ddd2      	ble.n	8004b74 <_printf_common+0x3c>
 8004bce:	0022      	movs	r2, r4
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	9901      	ldr	r1, [sp, #4]
 8004bd4:	9800      	ldr	r0, [sp, #0]
 8004bd6:	9f08      	ldr	r7, [sp, #32]
 8004bd8:	3219      	adds	r2, #25
 8004bda:	47b8      	blx	r7
 8004bdc:	3001      	adds	r0, #1
 8004bde:	d1f0      	bne.n	8004bc2 <_printf_common+0x8a>
 8004be0:	2001      	movs	r0, #1
 8004be2:	4240      	negs	r0, r0
 8004be4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004be6:	2030      	movs	r0, #48	@ 0x30
 8004be8:	18e1      	adds	r1, r4, r3
 8004bea:	3143      	adds	r1, #67	@ 0x43
 8004bec:	7008      	strb	r0, [r1, #0]
 8004bee:	0021      	movs	r1, r4
 8004bf0:	1c5a      	adds	r2, r3, #1
 8004bf2:	3145      	adds	r1, #69	@ 0x45
 8004bf4:	7809      	ldrb	r1, [r1, #0]
 8004bf6:	18a2      	adds	r2, r4, r2
 8004bf8:	3243      	adds	r2, #67	@ 0x43
 8004bfa:	3302      	adds	r3, #2
 8004bfc:	7011      	strb	r1, [r2, #0]
 8004bfe:	e7c1      	b.n	8004b84 <_printf_common+0x4c>
 8004c00:	0022      	movs	r2, r4
 8004c02:	2301      	movs	r3, #1
 8004c04:	9901      	ldr	r1, [sp, #4]
 8004c06:	9800      	ldr	r0, [sp, #0]
 8004c08:	9f08      	ldr	r7, [sp, #32]
 8004c0a:	321a      	adds	r2, #26
 8004c0c:	47b8      	blx	r7
 8004c0e:	3001      	adds	r0, #1
 8004c10:	d0e6      	beq.n	8004be0 <_printf_common+0xa8>
 8004c12:	3601      	adds	r6, #1
 8004c14:	e7d1      	b.n	8004bba <_printf_common+0x82>
	...

08004c18 <_printf_i>:
 8004c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c1a:	b08b      	sub	sp, #44	@ 0x2c
 8004c1c:	9206      	str	r2, [sp, #24]
 8004c1e:	000a      	movs	r2, r1
 8004c20:	3243      	adds	r2, #67	@ 0x43
 8004c22:	9307      	str	r3, [sp, #28]
 8004c24:	9005      	str	r0, [sp, #20]
 8004c26:	9203      	str	r2, [sp, #12]
 8004c28:	7e0a      	ldrb	r2, [r1, #24]
 8004c2a:	000c      	movs	r4, r1
 8004c2c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004c2e:	2a78      	cmp	r2, #120	@ 0x78
 8004c30:	d809      	bhi.n	8004c46 <_printf_i+0x2e>
 8004c32:	2a62      	cmp	r2, #98	@ 0x62
 8004c34:	d80b      	bhi.n	8004c4e <_printf_i+0x36>
 8004c36:	2a00      	cmp	r2, #0
 8004c38:	d100      	bne.n	8004c3c <_printf_i+0x24>
 8004c3a:	e0bc      	b.n	8004db6 <_printf_i+0x19e>
 8004c3c:	497b      	ldr	r1, [pc, #492]	@ (8004e2c <_printf_i+0x214>)
 8004c3e:	9104      	str	r1, [sp, #16]
 8004c40:	2a58      	cmp	r2, #88	@ 0x58
 8004c42:	d100      	bne.n	8004c46 <_printf_i+0x2e>
 8004c44:	e090      	b.n	8004d68 <_printf_i+0x150>
 8004c46:	0025      	movs	r5, r4
 8004c48:	3542      	adds	r5, #66	@ 0x42
 8004c4a:	702a      	strb	r2, [r5, #0]
 8004c4c:	e022      	b.n	8004c94 <_printf_i+0x7c>
 8004c4e:	0010      	movs	r0, r2
 8004c50:	3863      	subs	r0, #99	@ 0x63
 8004c52:	2815      	cmp	r0, #21
 8004c54:	d8f7      	bhi.n	8004c46 <_printf_i+0x2e>
 8004c56:	f7fb fa55 	bl	8000104 <__gnu_thumb1_case_shi>
 8004c5a:	0016      	.short	0x0016
 8004c5c:	fff6001f 	.word	0xfff6001f
 8004c60:	fff6fff6 	.word	0xfff6fff6
 8004c64:	001ffff6 	.word	0x001ffff6
 8004c68:	fff6fff6 	.word	0xfff6fff6
 8004c6c:	fff6fff6 	.word	0xfff6fff6
 8004c70:	003600a1 	.word	0x003600a1
 8004c74:	fff60080 	.word	0xfff60080
 8004c78:	00b2fff6 	.word	0x00b2fff6
 8004c7c:	0036fff6 	.word	0x0036fff6
 8004c80:	fff6fff6 	.word	0xfff6fff6
 8004c84:	0084      	.short	0x0084
 8004c86:	0025      	movs	r5, r4
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	3542      	adds	r5, #66	@ 0x42
 8004c8c:	1d11      	adds	r1, r2, #4
 8004c8e:	6019      	str	r1, [r3, #0]
 8004c90:	6813      	ldr	r3, [r2, #0]
 8004c92:	702b      	strb	r3, [r5, #0]
 8004c94:	2301      	movs	r3, #1
 8004c96:	e0a0      	b.n	8004dda <_printf_i+0x1c2>
 8004c98:	6818      	ldr	r0, [r3, #0]
 8004c9a:	6809      	ldr	r1, [r1, #0]
 8004c9c:	1d02      	adds	r2, r0, #4
 8004c9e:	060d      	lsls	r5, r1, #24
 8004ca0:	d50b      	bpl.n	8004cba <_printf_i+0xa2>
 8004ca2:	6806      	ldr	r6, [r0, #0]
 8004ca4:	601a      	str	r2, [r3, #0]
 8004ca6:	2e00      	cmp	r6, #0
 8004ca8:	da03      	bge.n	8004cb2 <_printf_i+0x9a>
 8004caa:	232d      	movs	r3, #45	@ 0x2d
 8004cac:	9a03      	ldr	r2, [sp, #12]
 8004cae:	4276      	negs	r6, r6
 8004cb0:	7013      	strb	r3, [r2, #0]
 8004cb2:	4b5e      	ldr	r3, [pc, #376]	@ (8004e2c <_printf_i+0x214>)
 8004cb4:	270a      	movs	r7, #10
 8004cb6:	9304      	str	r3, [sp, #16]
 8004cb8:	e018      	b.n	8004cec <_printf_i+0xd4>
 8004cba:	6806      	ldr	r6, [r0, #0]
 8004cbc:	601a      	str	r2, [r3, #0]
 8004cbe:	0649      	lsls	r1, r1, #25
 8004cc0:	d5f1      	bpl.n	8004ca6 <_printf_i+0x8e>
 8004cc2:	b236      	sxth	r6, r6
 8004cc4:	e7ef      	b.n	8004ca6 <_printf_i+0x8e>
 8004cc6:	6808      	ldr	r0, [r1, #0]
 8004cc8:	6819      	ldr	r1, [r3, #0]
 8004cca:	c940      	ldmia	r1!, {r6}
 8004ccc:	0605      	lsls	r5, r0, #24
 8004cce:	d402      	bmi.n	8004cd6 <_printf_i+0xbe>
 8004cd0:	0640      	lsls	r0, r0, #25
 8004cd2:	d500      	bpl.n	8004cd6 <_printf_i+0xbe>
 8004cd4:	b2b6      	uxth	r6, r6
 8004cd6:	6019      	str	r1, [r3, #0]
 8004cd8:	4b54      	ldr	r3, [pc, #336]	@ (8004e2c <_printf_i+0x214>)
 8004cda:	270a      	movs	r7, #10
 8004cdc:	9304      	str	r3, [sp, #16]
 8004cde:	2a6f      	cmp	r2, #111	@ 0x6f
 8004ce0:	d100      	bne.n	8004ce4 <_printf_i+0xcc>
 8004ce2:	3f02      	subs	r7, #2
 8004ce4:	0023      	movs	r3, r4
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	3343      	adds	r3, #67	@ 0x43
 8004cea:	701a      	strb	r2, [r3, #0]
 8004cec:	6863      	ldr	r3, [r4, #4]
 8004cee:	60a3      	str	r3, [r4, #8]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	db03      	blt.n	8004cfc <_printf_i+0xe4>
 8004cf4:	2104      	movs	r1, #4
 8004cf6:	6822      	ldr	r2, [r4, #0]
 8004cf8:	438a      	bics	r2, r1
 8004cfa:	6022      	str	r2, [r4, #0]
 8004cfc:	2e00      	cmp	r6, #0
 8004cfe:	d102      	bne.n	8004d06 <_printf_i+0xee>
 8004d00:	9d03      	ldr	r5, [sp, #12]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00c      	beq.n	8004d20 <_printf_i+0x108>
 8004d06:	9d03      	ldr	r5, [sp, #12]
 8004d08:	0030      	movs	r0, r6
 8004d0a:	0039      	movs	r1, r7
 8004d0c:	f7fb fa8a 	bl	8000224 <__aeabi_uidivmod>
 8004d10:	9b04      	ldr	r3, [sp, #16]
 8004d12:	3d01      	subs	r5, #1
 8004d14:	5c5b      	ldrb	r3, [r3, r1]
 8004d16:	702b      	strb	r3, [r5, #0]
 8004d18:	0033      	movs	r3, r6
 8004d1a:	0006      	movs	r6, r0
 8004d1c:	429f      	cmp	r7, r3
 8004d1e:	d9f3      	bls.n	8004d08 <_printf_i+0xf0>
 8004d20:	2f08      	cmp	r7, #8
 8004d22:	d109      	bne.n	8004d38 <_printf_i+0x120>
 8004d24:	6823      	ldr	r3, [r4, #0]
 8004d26:	07db      	lsls	r3, r3, #31
 8004d28:	d506      	bpl.n	8004d38 <_printf_i+0x120>
 8004d2a:	6862      	ldr	r2, [r4, #4]
 8004d2c:	6923      	ldr	r3, [r4, #16]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	dc02      	bgt.n	8004d38 <_printf_i+0x120>
 8004d32:	2330      	movs	r3, #48	@ 0x30
 8004d34:	3d01      	subs	r5, #1
 8004d36:	702b      	strb	r3, [r5, #0]
 8004d38:	9b03      	ldr	r3, [sp, #12]
 8004d3a:	1b5b      	subs	r3, r3, r5
 8004d3c:	6123      	str	r3, [r4, #16]
 8004d3e:	9b07      	ldr	r3, [sp, #28]
 8004d40:	0021      	movs	r1, r4
 8004d42:	9300      	str	r3, [sp, #0]
 8004d44:	9805      	ldr	r0, [sp, #20]
 8004d46:	9b06      	ldr	r3, [sp, #24]
 8004d48:	aa09      	add	r2, sp, #36	@ 0x24
 8004d4a:	f7ff fef5 	bl	8004b38 <_printf_common>
 8004d4e:	3001      	adds	r0, #1
 8004d50:	d148      	bne.n	8004de4 <_printf_i+0x1cc>
 8004d52:	2001      	movs	r0, #1
 8004d54:	4240      	negs	r0, r0
 8004d56:	b00b      	add	sp, #44	@ 0x2c
 8004d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d5a:	2220      	movs	r2, #32
 8004d5c:	6809      	ldr	r1, [r1, #0]
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	6022      	str	r2, [r4, #0]
 8004d62:	2278      	movs	r2, #120	@ 0x78
 8004d64:	4932      	ldr	r1, [pc, #200]	@ (8004e30 <_printf_i+0x218>)
 8004d66:	9104      	str	r1, [sp, #16]
 8004d68:	0021      	movs	r1, r4
 8004d6a:	3145      	adds	r1, #69	@ 0x45
 8004d6c:	700a      	strb	r2, [r1, #0]
 8004d6e:	6819      	ldr	r1, [r3, #0]
 8004d70:	6822      	ldr	r2, [r4, #0]
 8004d72:	c940      	ldmia	r1!, {r6}
 8004d74:	0610      	lsls	r0, r2, #24
 8004d76:	d402      	bmi.n	8004d7e <_printf_i+0x166>
 8004d78:	0650      	lsls	r0, r2, #25
 8004d7a:	d500      	bpl.n	8004d7e <_printf_i+0x166>
 8004d7c:	b2b6      	uxth	r6, r6
 8004d7e:	6019      	str	r1, [r3, #0]
 8004d80:	07d3      	lsls	r3, r2, #31
 8004d82:	d502      	bpl.n	8004d8a <_printf_i+0x172>
 8004d84:	2320      	movs	r3, #32
 8004d86:	4313      	orrs	r3, r2
 8004d88:	6023      	str	r3, [r4, #0]
 8004d8a:	2e00      	cmp	r6, #0
 8004d8c:	d001      	beq.n	8004d92 <_printf_i+0x17a>
 8004d8e:	2710      	movs	r7, #16
 8004d90:	e7a8      	b.n	8004ce4 <_printf_i+0xcc>
 8004d92:	2220      	movs	r2, #32
 8004d94:	6823      	ldr	r3, [r4, #0]
 8004d96:	4393      	bics	r3, r2
 8004d98:	6023      	str	r3, [r4, #0]
 8004d9a:	e7f8      	b.n	8004d8e <_printf_i+0x176>
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	680d      	ldr	r5, [r1, #0]
 8004da0:	1d10      	adds	r0, r2, #4
 8004da2:	6949      	ldr	r1, [r1, #20]
 8004da4:	6018      	str	r0, [r3, #0]
 8004da6:	6813      	ldr	r3, [r2, #0]
 8004da8:	062e      	lsls	r6, r5, #24
 8004daa:	d501      	bpl.n	8004db0 <_printf_i+0x198>
 8004dac:	6019      	str	r1, [r3, #0]
 8004dae:	e002      	b.n	8004db6 <_printf_i+0x19e>
 8004db0:	066d      	lsls	r5, r5, #25
 8004db2:	d5fb      	bpl.n	8004dac <_printf_i+0x194>
 8004db4:	8019      	strh	r1, [r3, #0]
 8004db6:	2300      	movs	r3, #0
 8004db8:	9d03      	ldr	r5, [sp, #12]
 8004dba:	6123      	str	r3, [r4, #16]
 8004dbc:	e7bf      	b.n	8004d3e <_printf_i+0x126>
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	1d11      	adds	r1, r2, #4
 8004dc2:	6019      	str	r1, [r3, #0]
 8004dc4:	6815      	ldr	r5, [r2, #0]
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	0028      	movs	r0, r5
 8004dca:	6862      	ldr	r2, [r4, #4]
 8004dcc:	f000 f858 	bl	8004e80 <memchr>
 8004dd0:	2800      	cmp	r0, #0
 8004dd2:	d001      	beq.n	8004dd8 <_printf_i+0x1c0>
 8004dd4:	1b40      	subs	r0, r0, r5
 8004dd6:	6060      	str	r0, [r4, #4]
 8004dd8:	6863      	ldr	r3, [r4, #4]
 8004dda:	6123      	str	r3, [r4, #16]
 8004ddc:	2300      	movs	r3, #0
 8004dde:	9a03      	ldr	r2, [sp, #12]
 8004de0:	7013      	strb	r3, [r2, #0]
 8004de2:	e7ac      	b.n	8004d3e <_printf_i+0x126>
 8004de4:	002a      	movs	r2, r5
 8004de6:	6923      	ldr	r3, [r4, #16]
 8004de8:	9906      	ldr	r1, [sp, #24]
 8004dea:	9805      	ldr	r0, [sp, #20]
 8004dec:	9d07      	ldr	r5, [sp, #28]
 8004dee:	47a8      	blx	r5
 8004df0:	3001      	adds	r0, #1
 8004df2:	d0ae      	beq.n	8004d52 <_printf_i+0x13a>
 8004df4:	6823      	ldr	r3, [r4, #0]
 8004df6:	079b      	lsls	r3, r3, #30
 8004df8:	d415      	bmi.n	8004e26 <_printf_i+0x20e>
 8004dfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004dfc:	68e0      	ldr	r0, [r4, #12]
 8004dfe:	4298      	cmp	r0, r3
 8004e00:	daa9      	bge.n	8004d56 <_printf_i+0x13e>
 8004e02:	0018      	movs	r0, r3
 8004e04:	e7a7      	b.n	8004d56 <_printf_i+0x13e>
 8004e06:	0022      	movs	r2, r4
 8004e08:	2301      	movs	r3, #1
 8004e0a:	9906      	ldr	r1, [sp, #24]
 8004e0c:	9805      	ldr	r0, [sp, #20]
 8004e0e:	9e07      	ldr	r6, [sp, #28]
 8004e10:	3219      	adds	r2, #25
 8004e12:	47b0      	blx	r6
 8004e14:	3001      	adds	r0, #1
 8004e16:	d09c      	beq.n	8004d52 <_printf_i+0x13a>
 8004e18:	3501      	adds	r5, #1
 8004e1a:	68e3      	ldr	r3, [r4, #12]
 8004e1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004e1e:	1a9b      	subs	r3, r3, r2
 8004e20:	42ab      	cmp	r3, r5
 8004e22:	dcf0      	bgt.n	8004e06 <_printf_i+0x1ee>
 8004e24:	e7e9      	b.n	8004dfa <_printf_i+0x1e2>
 8004e26:	2500      	movs	r5, #0
 8004e28:	e7f7      	b.n	8004e1a <_printf_i+0x202>
 8004e2a:	46c0      	nop			@ (mov r8, r8)
 8004e2c:	08004fed 	.word	0x08004fed
 8004e30:	08004ffe 	.word	0x08004ffe

08004e34 <memmove>:
 8004e34:	b510      	push	{r4, lr}
 8004e36:	4288      	cmp	r0, r1
 8004e38:	d806      	bhi.n	8004e48 <memmove+0x14>
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d008      	beq.n	8004e52 <memmove+0x1e>
 8004e40:	5ccc      	ldrb	r4, [r1, r3]
 8004e42:	54c4      	strb	r4, [r0, r3]
 8004e44:	3301      	adds	r3, #1
 8004e46:	e7f9      	b.n	8004e3c <memmove+0x8>
 8004e48:	188b      	adds	r3, r1, r2
 8004e4a:	4298      	cmp	r0, r3
 8004e4c:	d2f5      	bcs.n	8004e3a <memmove+0x6>
 8004e4e:	3a01      	subs	r2, #1
 8004e50:	d200      	bcs.n	8004e54 <memmove+0x20>
 8004e52:	bd10      	pop	{r4, pc}
 8004e54:	5c8b      	ldrb	r3, [r1, r2]
 8004e56:	5483      	strb	r3, [r0, r2]
 8004e58:	e7f9      	b.n	8004e4e <memmove+0x1a>
	...

08004e5c <_sbrk_r>:
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	b570      	push	{r4, r5, r6, lr}
 8004e60:	4d06      	ldr	r5, [pc, #24]	@ (8004e7c <_sbrk_r+0x20>)
 8004e62:	0004      	movs	r4, r0
 8004e64:	0008      	movs	r0, r1
 8004e66:	602b      	str	r3, [r5, #0]
 8004e68:	f7fb fd40 	bl	80008ec <_sbrk>
 8004e6c:	1c43      	adds	r3, r0, #1
 8004e6e:	d103      	bne.n	8004e78 <_sbrk_r+0x1c>
 8004e70:	682b      	ldr	r3, [r5, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d000      	beq.n	8004e78 <_sbrk_r+0x1c>
 8004e76:	6023      	str	r3, [r4, #0]
 8004e78:	bd70      	pop	{r4, r5, r6, pc}
 8004e7a:	46c0      	nop			@ (mov r8, r8)
 8004e7c:	20000268 	.word	0x20000268

08004e80 <memchr>:
 8004e80:	b2c9      	uxtb	r1, r1
 8004e82:	1882      	adds	r2, r0, r2
 8004e84:	4290      	cmp	r0, r2
 8004e86:	d101      	bne.n	8004e8c <memchr+0xc>
 8004e88:	2000      	movs	r0, #0
 8004e8a:	4770      	bx	lr
 8004e8c:	7803      	ldrb	r3, [r0, #0]
 8004e8e:	428b      	cmp	r3, r1
 8004e90:	d0fb      	beq.n	8004e8a <memchr+0xa>
 8004e92:	3001      	adds	r0, #1
 8004e94:	e7f6      	b.n	8004e84 <memchr+0x4>

08004e96 <memcpy>:
 8004e96:	2300      	movs	r3, #0
 8004e98:	b510      	push	{r4, lr}
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d100      	bne.n	8004ea0 <memcpy+0xa>
 8004e9e:	bd10      	pop	{r4, pc}
 8004ea0:	5ccc      	ldrb	r4, [r1, r3]
 8004ea2:	54c4      	strb	r4, [r0, r3]
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	e7f8      	b.n	8004e9a <memcpy+0x4>

08004ea8 <_realloc_r>:
 8004ea8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004eaa:	0006      	movs	r6, r0
 8004eac:	000c      	movs	r4, r1
 8004eae:	0015      	movs	r5, r2
 8004eb0:	2900      	cmp	r1, #0
 8004eb2:	d105      	bne.n	8004ec0 <_realloc_r+0x18>
 8004eb4:	0011      	movs	r1, r2
 8004eb6:	f7ff fc51 	bl	800475c <_malloc_r>
 8004eba:	0004      	movs	r4, r0
 8004ebc:	0020      	movs	r0, r4
 8004ebe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004ec0:	2a00      	cmp	r2, #0
 8004ec2:	d103      	bne.n	8004ecc <_realloc_r+0x24>
 8004ec4:	f7ff fbde 	bl	8004684 <_free_r>
 8004ec8:	2400      	movs	r4, #0
 8004eca:	e7f7      	b.n	8004ebc <_realloc_r+0x14>
 8004ecc:	f000 f81b 	bl	8004f06 <_malloc_usable_size_r>
 8004ed0:	0007      	movs	r7, r0
 8004ed2:	4285      	cmp	r5, r0
 8004ed4:	d802      	bhi.n	8004edc <_realloc_r+0x34>
 8004ed6:	0843      	lsrs	r3, r0, #1
 8004ed8:	42ab      	cmp	r3, r5
 8004eda:	d3ef      	bcc.n	8004ebc <_realloc_r+0x14>
 8004edc:	0029      	movs	r1, r5
 8004ede:	0030      	movs	r0, r6
 8004ee0:	f7ff fc3c 	bl	800475c <_malloc_r>
 8004ee4:	9001      	str	r0, [sp, #4]
 8004ee6:	2800      	cmp	r0, #0
 8004ee8:	d0ee      	beq.n	8004ec8 <_realloc_r+0x20>
 8004eea:	002a      	movs	r2, r5
 8004eec:	42bd      	cmp	r5, r7
 8004eee:	d900      	bls.n	8004ef2 <_realloc_r+0x4a>
 8004ef0:	003a      	movs	r2, r7
 8004ef2:	0021      	movs	r1, r4
 8004ef4:	9801      	ldr	r0, [sp, #4]
 8004ef6:	f7ff ffce 	bl	8004e96 <memcpy>
 8004efa:	0021      	movs	r1, r4
 8004efc:	0030      	movs	r0, r6
 8004efe:	f7ff fbc1 	bl	8004684 <_free_r>
 8004f02:	9c01      	ldr	r4, [sp, #4]
 8004f04:	e7da      	b.n	8004ebc <_realloc_r+0x14>

08004f06 <_malloc_usable_size_r>:
 8004f06:	1f0b      	subs	r3, r1, #4
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	1f18      	subs	r0, r3, #4
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	da01      	bge.n	8004f14 <_malloc_usable_size_r+0xe>
 8004f10:	580b      	ldr	r3, [r1, r0]
 8004f12:	18c0      	adds	r0, r0, r3
 8004f14:	4770      	bx	lr
	...

08004f18 <_init>:
 8004f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f1a:	46c0      	nop			@ (mov r8, r8)
 8004f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f1e:	bc08      	pop	{r3}
 8004f20:	469e      	mov	lr, r3
 8004f22:	4770      	bx	lr

08004f24 <_fini>:
 8004f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f26:	46c0      	nop			@ (mov r8, r8)
 8004f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f2a:	bc08      	pop	{r3}
 8004f2c:	469e      	mov	lr, r3
 8004f2e:	4770      	bx	lr
